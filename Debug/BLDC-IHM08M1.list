
BLDC-IHM08M1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004690  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08004860  08004860  00014860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a18  08004a18  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a20  08004a20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  08004a98  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08004a98  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c8d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002554  00000000  00000000  00031d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00034288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00034fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000342d  00000000  00000000  00035c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cb1  00000000  00000000  0003905d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2515  00000000  00000000  00049d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c223  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e54  00000000  00000000  0011c278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004848 	.word	0x08004848

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004848 	.word	0x08004848

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	4b54      	ldr	r3, [pc, #336]	; (8000714 <MX_GPIO_Init+0x16c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a53      	ldr	r2, [pc, #332]	; (8000714 <MX_GPIO_Init+0x16c>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b51      	ldr	r3, [pc, #324]	; (8000714 <MX_GPIO_Init+0x16c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	4b4d      	ldr	r3, [pc, #308]	; (8000714 <MX_GPIO_Init+0x16c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a4c      	ldr	r2, [pc, #304]	; (8000714 <MX_GPIO_Init+0x16c>)
 80005e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b4a      	ldr	r3, [pc, #296]	; (8000714 <MX_GPIO_Init+0x16c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b46      	ldr	r3, [pc, #280]	; (8000714 <MX_GPIO_Init+0x16c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a45      	ldr	r2, [pc, #276]	; (8000714 <MX_GPIO_Init+0x16c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b43      	ldr	r3, [pc, #268]	; (8000714 <MX_GPIO_Init+0x16c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b3f      	ldr	r3, [pc, #252]	; (8000714 <MX_GPIO_Init+0x16c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a3e      	ldr	r2, [pc, #248]	; (8000714 <MX_GPIO_Init+0x16c>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b3c      	ldr	r3, [pc, #240]	; (8000714 <MX_GPIO_Init+0x16c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|S1_L_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	21a0      	movs	r1, #160	; 0xa0
 8000632:	4839      	ldr	r0, [pc, #228]	; (8000718 <MX_GPIO_Init+0x170>)
 8000634:	f001 f970 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S2_L_Pin|S3_L_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2103      	movs	r1, #3
 800063c:	4837      	ldr	r0, [pc, #220]	; (800071c <MX_GPIO_Init+0x174>)
 800063e:	f001 f96b 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000648:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800064c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	4831      	ldr	r0, [pc, #196]	; (8000720 <MX_GPIO_Init+0x178>)
 800065a:	f000 ffb1 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800065e:	2320      	movs	r3, #32
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	4828      	ldr	r0, [pc, #160]	; (8000718 <MX_GPIO_Init+0x170>)
 8000676:	f000 ffa3 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S1_L_Pin;
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000682:	2302      	movs	r3, #2
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(S1_L_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4821      	ldr	r0, [pc, #132]	; (8000718 <MX_GPIO_Init+0x170>)
 8000692:	f000 ff95 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = S2_L_Pin|S3_L_Pin;
 8000696:	2303      	movs	r3, #3
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800069e:	2302      	movs	r3, #2
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	481b      	ldr	r0, [pc, #108]	; (800071c <MX_GPIO_Init+0x174>)
 80006ae:	f000 ff87 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 80006b2:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006b8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	4814      	ldr	r0, [pc, #80]	; (800071c <MX_GPIO_Init+0x174>)
 80006ca:	f000 ff79 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = H1_Pin;
 80006ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006d4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80006d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006da:	2301      	movs	r3, #1
 80006dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_GPIO_Init+0x170>)
 80006e6:	f000 ff6b 	bl	80015c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	2009      	movs	r0, #9
 80006f0:	f000 ff29 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006f4:	2009      	movs	r0, #9
 80006f6:	f000 ff42 	bl	800157e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	2028      	movs	r0, #40	; 0x28
 8000700:	f000 ff21 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000704:	2028      	movs	r0, #40	; 0x28
 8000706:	f000 ff3a 	bl	800157e <HAL_NVIC_EnableIRQ>

}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	; 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40020000 	.word	0x40020000
 800071c:	40020400 	.word	0x40020400
 8000720:	40020800 	.word	0x40020800

08000724 <HS_Calculate_State>:

// ---------------------------------------------------------------------------+
// -- calc state
// ---------------------------------------------------------------------------+
uint8_t HS_Calculate_State()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0

	uint8_t commutation_state[] = {
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <HS_Calculate_State+0x80>)
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000732:	e883 0003 	stmia.w	r3, {r0, r1}
		 3, //	| 6
		 7, //	| 7
	};

	// read current HALL values
	uint8_t val_H1 = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 8000736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073a:	481b      	ldr	r0, [pc, #108]	; (80007a8 <HS_Calculate_State+0x84>)
 800073c:	f001 f8d4 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]
	uint8_t val_H2 = HAL_GPIO_ReadPin(H2_GPIO_Port, H2_Pin);
 8000744:	2108      	movs	r1, #8
 8000746:	4819      	ldr	r0, [pc, #100]	; (80007ac <HS_Calculate_State+0x88>)
 8000748:	f001 f8ce 	bl	80018e8 <HAL_GPIO_ReadPin>
 800074c:	4603      	mov	r3, r0
 800074e:	73bb      	strb	r3, [r7, #14]
	uint8_t val_H3 = HAL_GPIO_ReadPin(H3_GPIO_Port, H3_Pin);
 8000750:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000754:	4815      	ldr	r0, [pc, #84]	; (80007ac <HS_Calculate_State+0x88>)
 8000756:	f001 f8c7 	bl	80018e8 <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	737b      	strb	r3, [r7, #13]

	// compound values
	uint8_t total_val = (val_H3 << 2) | (val_H2 << 1) | (val_H1  << 0);
 800075e:	7b7b      	ldrb	r3, [r7, #13]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	b25a      	sxtb	r2, r3
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	b25b      	sxtb	r3, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	b25a      	sxtb	r2, r3
 800076e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000772:	4313      	orrs	r3, r2
 8000774:	b25b      	sxtb	r3, r3
 8000776:	733b      	strb	r3, [r7, #12]

	// sanity check
	// TODO add some kind of emergency stop here?
	if(total_val < 1 || total_val > 6)
 8000778:	7b3b      	ldrb	r3, [r7, #12]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <HS_Calculate_State+0x60>
 800077e:	7b3b      	ldrb	r3, [r7, #12]
 8000780:	2b06      	cmp	r3, #6
 8000782:	d901      	bls.n	8000788 <HS_Calculate_State+0x64>
	{
		return 0; // this should not be happening
 8000784:	2300      	movs	r3, #0
 8000786:	e009      	b.n	800079c <HS_Calculate_State+0x78>
	}

	_hs_state = commutation_state[total_val];
 8000788:	7b3b      	ldrb	r3, [r7, #12]
 800078a:	f107 0210 	add.w	r2, r7, #16
 800078e:	4413      	add	r3, r2
 8000790:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HS_Calculate_State+0x8c>)
 8000796:	701a      	strb	r2, [r3, #0]

	return _hs_state;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HS_Calculate_State+0x8c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	08004860 	.word	0x08004860
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40020400 	.word	0x40020400
 80007b0:	20000098 	.word	0x20000098

080007b4 <__io_putchar>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
int __io_putchar(int ch)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b0a      	cmp	r3, #10
 80007c0:	d109      	bne.n	80007d6 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 80007c2:	230d      	movs	r3, #13
 80007c4:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 80007c6:	f107 010f 	add.w	r1, r7, #15
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	2201      	movs	r2, #1
 80007d0:	4807      	ldr	r0, [pc, #28]	; (80007f0 <__io_putchar+0x3c>)
 80007d2:	f002 fde8 	bl	80033a6 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80007d6:	1d39      	adds	r1, r7, #4
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	2201      	movs	r2, #1
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <__io_putchar+0x3c>)
 80007e0:	f002 fde1 	bl	80033a6 <HAL_UART_Transmit>
    return 1;
 80007e4:	2301      	movs	r3, #1
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000174 	.word	0x20000174

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b5b0      	push	{r4, r5, r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f000 fd33 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f901 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000802:	f7ff fed1 	bl	80005a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000806:	f000 fc91 	bl	800112c <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800080a:	f000 fbcb 	bl	8000fa4 <MX_TIM7_Init>
  MX_TIM3_Init();
 800080e:	f000 fb7b 	bl	8000f08 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000812:	f000 fac1 	bl	8000d98 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // welcome message
  HAL_UART_Transmit(&huart2, (uint8_t *)WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	222d      	movs	r2, #45	; 0x2d
 800081c:	4972      	ldr	r1, [pc, #456]	; (80009e8 <main+0x1f4>)
 800081e:	4873      	ldr	r0, [pc, #460]	; (80009ec <main+0x1f8>)
 8000820:	f002 fdc1 	bl	80033a6 <HAL_UART_Transmit>

  // init globals
//  glob_state = 1;
//  SS_Commutate_Type5(glob_state);
  uint8_t val_HS;
  uint8_t val_H1 = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 8000824:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000828:	4871      	ldr	r0, [pc, #452]	; (80009f0 <main+0x1fc>)
 800082a:	f001 f85d 	bl	80018e8 <HAL_GPIO_ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	713b      	strb	r3, [r7, #4]
  uint8_t val_H2 = HAL_GPIO_ReadPin(H2_GPIO_Port, H2_Pin);
 8000832:	2108      	movs	r1, #8
 8000834:	486f      	ldr	r0, [pc, #444]	; (80009f4 <main+0x200>)
 8000836:	f001 f857 	bl	80018e8 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	70fb      	strb	r3, [r7, #3]
  uint8_t val_H3 = HAL_GPIO_ReadPin(H3_GPIO_Port, H3_Pin);
 800083e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000842:	486c      	ldr	r0, [pc, #432]	; (80009f4 <main+0x200>)
 8000844:	f001 f850 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	70bb      	strb	r3, [r7, #2]

  uint8_t val_HS_OLD;
  uint8_t counter = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	717b      	strb	r3, [r7, #5]
  uint8_t revolution;
  uint8_t delay=5;
 8000850:	2305      	movs	r3, #5
 8000852:	707b      	strb	r3, [r7, #1]

  HAL_SYSTICK_Callback();
 8000854:	f000 fead 	bl	80015b2 <HAL_SYSTICK_Callback>
  // start timers
//  HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_Base_Start_IT(&htim7);
 8000858:	4867      	ldr	r0, [pc, #412]	; (80009f8 <main+0x204>)
 800085a:	f001 fe63 	bl	8002524 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
#define SIMPLE_TEST

  while (1)
  {
	  HAL_GPIO_WritePin(S1_H_GPIO_Port, S1_H_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000864:	4862      	ldr	r0, [pc, #392]	; (80009f0 <main+0x1fc>)
 8000866:	f001 f857 	bl	8001918 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(S1_L_GPIO_Port, S1_L_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	4860      	ldr	r0, [pc, #384]	; (80009f0 <main+0x1fc>)
 8000870:	f001 f852 	bl	8001918 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(S2_H_GPIO_Port, S2_H_Pin, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7100 	mov.w	r1, #512	; 0x200
 800087a:	485d      	ldr	r0, [pc, #372]	; (80009f0 <main+0x1fc>)
 800087c:	f001 f84c 	bl	8001918 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(S2_L_GPIO_Port, S2_L_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	2101      	movs	r1, #1
 8000884:	485b      	ldr	r0, [pc, #364]	; (80009f4 <main+0x200>)
 8000886:	f001 f847 	bl	8001918 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(S3_H_GPIO_Port, S3_H_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000890:	4857      	ldr	r0, [pc, #348]	; (80009f0 <main+0x1fc>)
 8000892:	f001 f841 	bl	8001918 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(S3_L_GPIO_Port, S3_L_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2102      	movs	r1, #2
 800089a:	4856      	ldr	r0, [pc, #344]	; (80009f4 <main+0x200>)
 800089c:	f001 f83c 	bl	8001918 <HAL_GPIO_WritePin>
	  //HAL_Delay(100);
	  /*if(val_HS>3)
		  val_HS=val_HS-3;
*/

	  switch (val_HS)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	2b05      	cmp	r3, #5
 80008a6:	d85b      	bhi.n	8000960 <main+0x16c>
 80008a8:	a201      	add	r2, pc, #4	; (adr r2, 80008b0 <main+0xbc>)
 80008aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ae:	bf00      	nop
 80008b0:	080008c9 	.word	0x080008c9
 80008b4:	080008c9 	.word	0x080008c9
 80008b8:	080008ef 	.word	0x080008ef
 80008bc:	080008ef 	.word	0x080008ef
 80008c0:	08000915 	.word	0x08000915
 80008c4:	0800093b 	.word	0x0800093b
	  {
	  case 1:
	  case 2:
		  HAL_GPIO_WritePin(S2_H_GPIO_Port, S2_H_Pin, GPIO_PIN_SET); //do HS 2 od HS 6,1 i 3,4 // 5 opposite
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ce:	4848      	ldr	r0, [pc, #288]	; (80009f0 <main+0x1fc>)
 80008d0:	f001 f822 	bl	8001918 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 80008d4:	787b      	ldrb	r3, [r7, #1]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fd36 	bl	8001348 <HAL_Delay>
		  HAL_GPIO_WritePin(S2_L_GPIO_Port, S2_L_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	4844      	ldr	r0, [pc, #272]	; (80009f4 <main+0x200>)
 80008e2:	f001 f819 	bl	8001918 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 80008e6:	787b      	ldrb	r3, [r7, #1]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fd2d 	bl	8001348 <HAL_Delay>
	 case 3:
	 case 4:
		  HAL_GPIO_WritePin(S1_H_GPIO_Port, S1_H_Pin, GPIO_PIN_SET); //do HS 4 od HS 5,6 i 2,3 // 1 opposite
 80008ee:	2201      	movs	r2, #1
 80008f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f4:	483e      	ldr	r0, [pc, #248]	; (80009f0 <main+0x1fc>)
 80008f6:	f001 f80f 	bl	8001918 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 80008fa:	787b      	ldrb	r3, [r7, #1]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fd23 	bl	8001348 <HAL_Delay>
		  HAL_GPIO_WritePin(S1_L_GPIO_Port, S1_L_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	483a      	ldr	r0, [pc, #232]	; (80009f0 <main+0x1fc>)
 8000908:	f001 f806 	bl	8001918 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 800090c:	787b      	ldrb	r3, [r7, #1]
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fd1a 	bl	8001348 <HAL_Delay>

	 case 5:
		  HAL_GPIO_WritePin(S3_H_GPIO_Port, S3_H_Pin, GPIO_PIN_SET); // do HS 6 od HS 4,5 i 1,2 // 3 opposite
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800091a:	4835      	ldr	r0, [pc, #212]	; (80009f0 <main+0x1fc>)
 800091c:	f000 fffc 	bl	8001918 <HAL_GPIO_WritePin>
	  	  HAL_Delay(delay);
 8000920:	787b      	ldrb	r3, [r7, #1]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fd10 	bl	8001348 <HAL_Delay>
		  HAL_GPIO_WritePin(S3_L_GPIO_Port, S3_L_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2102      	movs	r1, #2
 800092c:	4831      	ldr	r0, [pc, #196]	; (80009f4 <main+0x200>)
 800092e:	f000 fff3 	bl	8001918 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 8000932:	787b      	ldrb	r3, [r7, #1]
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fd07 	bl	8001348 <HAL_Delay>
	 case 6:
		  HAL_GPIO_WritePin(S2_H_GPIO_Port, S2_H_Pin, GPIO_PIN_SET); //do HS 2 od HS 6,1 i 3,4 // 5 opposite
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000940:	482b      	ldr	r0, [pc, #172]	; (80009f0 <main+0x1fc>)
 8000942:	f000 ffe9 	bl	8001918 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 8000946:	787b      	ldrb	r3, [r7, #1]
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fcfd 	bl	8001348 <HAL_Delay>
		  HAL_GPIO_WritePin(S2_L_GPIO_Port, S2_L_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2101      	movs	r1, #1
 8000952:	4828      	ldr	r0, [pc, #160]	; (80009f4 <main+0x200>)
 8000954:	f000 ffe0 	bl	8001918 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 8000958:	787b      	ldrb	r3, [r7, #1]
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fcf4 	bl	8001348 <HAL_Delay>
	  //default:
	  }
	  HAL_Delay(delay);
 8000960:	787b      	ldrb	r3, [r7, #1]
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fcf0 	bl	8001348 <HAL_Delay>
		  val_H1 = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 8000968:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800096c:	4820      	ldr	r0, [pc, #128]	; (80009f0 <main+0x1fc>)
 800096e:	f000 ffbb 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000972:	4603      	mov	r3, r0
 8000974:	713b      	strb	r3, [r7, #4]
		  val_H2 = HAL_GPIO_ReadPin(H2_GPIO_Port, H2_Pin);
 8000976:	2108      	movs	r1, #8
 8000978:	481e      	ldr	r0, [pc, #120]	; (80009f4 <main+0x200>)
 800097a:	f000 ffb5 	bl	80018e8 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	70fb      	strb	r3, [r7, #3]
		  val_H3 = HAL_GPIO_ReadPin(H3_GPIO_Port, H3_Pin);
 8000982:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000986:	481b      	ldr	r0, [pc, #108]	; (80009f4 <main+0x200>)
 8000988:	f000 ffae 	bl	80018e8 <HAL_GPIO_ReadPin>
 800098c:	4603      	mov	r3, r0
 800098e:	70bb      	strb	r3, [r7, #2]
		  val_HS = HS_Calculate_State();
 8000990:	f7ff fec8 	bl	8000724 <HS_Calculate_State>
 8000994:	4603      	mov	r3, r0
 8000996:	71fb      	strb	r3, [r7, #7]
		  if(val_HS == 6 && val_HS != val_HS_OLD && val_HS != val_HS_OLD-1){
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	2b06      	cmp	r3, #6
 800099c:	d10b      	bne.n	80009b6 <main+0x1c2>
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d007      	beq.n	80009b6 <main+0x1c2>
 80009a6:	79fa      	ldrb	r2, [r7, #7]
 80009a8:	79bb      	ldrb	r3, [r7, #6]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d002      	beq.n	80009b6 <main+0x1c2>
			  counter++;
 80009b0:	797b      	ldrb	r3, [r7, #5]
 80009b2:	3301      	adds	r3, #1
 80009b4:	717b      	strb	r3, [r7, #5]
		  }
		  val_HS_OLD = val_HS;
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	71bb      	strb	r3, [r7, #6]
		  revolution = counter/15;
 80009ba:	797b      	ldrb	r3, [r7, #5]
 80009bc:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <main+0x208>)
 80009be:	fba2 2303 	umull	r2, r3, r2, r3
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	703b      	strb	r3, [r7, #0]
		  printf("Sensor 1: %d   Sensor 2: %d   Sensor3: %d    HS: %d    Counter: %d  Revolution: %d\n ",val_H1,val_H2,val_H3,val_HS, counter, revolution);
 80009c6:	7938      	ldrb	r0, [r7, #4]
 80009c8:	78fc      	ldrb	r4, [r7, #3]
 80009ca:	78bd      	ldrb	r5, [r7, #2]
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	797a      	ldrb	r2, [r7, #5]
 80009d0:	7839      	ldrb	r1, [r7, #0]
 80009d2:	9102      	str	r1, [sp, #8]
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	462b      	mov	r3, r5
 80009da:	4622      	mov	r2, r4
 80009dc:	4601      	mov	r1, r0
 80009de:	4808      	ldr	r0, [pc, #32]	; (8000a00 <main+0x20c>)
 80009e0:	f002 ffdc 	bl	800399c <iprintf>
  {
 80009e4:	e73b      	b.n	800085e <main+0x6a>
 80009e6:	bf00      	nop
 80009e8:	080048e0 	.word	0x080048e0
 80009ec:	20000174 	.word	0x20000174
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020400 	.word	0x40020400
 80009f8:	2000012c 	.word	0x2000012c
 80009fc:	88888889 	.word	0x88888889
 8000a00:	08004910 	.word	0x08004910

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b094      	sub	sp, #80	; 0x50
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	2234      	movs	r2, #52	; 0x34
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 ffba 	bl	800398c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a29      	ldr	r2, [pc, #164]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <SystemClock_Config+0xd4>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a44:	2300      	movs	r3, #0
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <SystemClock_Config+0xd8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a50:	4a22      	ldr	r2, [pc, #136]	; (8000adc <SystemClock_Config+0xd8>)
 8000a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b20      	ldr	r3, [pc, #128]	; (8000adc <SystemClock_Config+0xd8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a7c:	2332      	movs	r3, #50	; 0x32
 8000a7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fa59 	bl	8001f48 <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a9c:	f000 f820 	bl	8000ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	2101      	movs	r1, #1
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 ff76 	bl	80019b0 <HAL_RCC_ClockConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000aca:	f000 f809 	bl	8000ae0 <Error_Handler>
  }
}
 8000ace:	bf00      	nop
 8000ad0:	3750      	adds	r7, #80	; 0x50
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40007000 	.word	0x40007000

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
   //User can add his own implementation to report the HAL error return state

  /* USER CODE END Error_Handler_Debug */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f000 fcfe 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 fbb8 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USART_RX_Pin);
 8000ba0:	2008      	movs	r0, #8
 8000ba2:	f000 feed 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(H3_Pin);
 8000bae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bb2:	f000 fee5 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bb6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bba:	f000 fee1 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(H1_Pin);
 8000bbe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000bc2:	f000 fedd 	bl	8001980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <TIM7_IRQHandler+0x18>)
 8000bd2:	f001 fd70 	bl	80026b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000bd6:	2120      	movs	r1, #32
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <TIM7_IRQHandler+0x1c>)
 8000bda:	f000 feb6 	bl	800194a <HAL_GPIO_TogglePin>
//
//	debug_printf("Global State: %d\r\n", glob_state);
//	SS_Commutate_Type6(glob_state);

  /* USER CODE END TIM7_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000012c 	.word	0x2000012c
 8000be8:	40020000 	.word	0x40020000

08000bec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
	switch (gpio_pin) {
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bfc:	d00d      	beq.n	8000c1a <HAL_GPIO_EXTI_Callback+0x2e>
 8000bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c02:	dc0f      	bgt.n	8000c24 <HAL_GPIO_EXTI_Callback+0x38>
 8000c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c08:	d00e      	beq.n	8000c28 <HAL_GPIO_EXTI_Callback+0x3c>
 8000c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c0e:	dc09      	bgt.n	8000c24 <HAL_GPIO_EXTI_Callback+0x38>
 8000c10:	2b08      	cmp	r3, #8
 8000c12:	d002      	beq.n	8000c1a <HAL_GPIO_EXTI_Callback+0x2e>
 8000c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c18:	d104      	bne.n	8000c24 <HAL_GPIO_EXTI_Callback+0x38>
		case HALL1_GPIO_PIN:
		case HALL2_GPIO_PIN:
		case HALL3_GPIO_PIN:
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x48>)
 8000c1e:	f000 fe94 	bl	800194a <HAL_GPIO_TogglePin>
			break;
 8000c22:	e002      	b.n	8000c2a <HAL_GPIO_EXTI_Callback+0x3e>
//			SS_Commutate_Type3(glob_state);

			break;
		}
		default:
			break;
 8000c24:	bf00      	nop
 8000c26:	e000      	b.n	8000c2a <HAL_GPIO_EXTI_Callback+0x3e>
			break;
 8000c28:	bf00      	nop
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40020000 	.word	0x40020000

08000c38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e00a      	b.n	8000c60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c4a:	f3af 8000 	nop.w
 8000c4e:	4601      	mov	r1, r0
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf0      	blt.n	8000c4a <_read+0x12>
	}

return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	60f8      	str	r0, [r7, #12]
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	e009      	b.n	8000c98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fd91 	bl	80007b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3301      	adds	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dbf1      	blt.n	8000c84 <_write+0x12>
	}
	return len;
 8000ca0:	687b      	ldr	r3, [r7, #4]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <_close>:

int _close(int file)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	return -1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd2:	605a      	str	r2, [r3, #4]
	return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_isatty>:

int _isatty(int file)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
	return 1;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
	return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <_sbrk+0x50>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x16>
		heap_end = &end;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <_sbrk+0x50>)
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <_sbrk+0x54>)
 8000d28:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <_sbrk+0x50>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <_sbrk+0x50>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4413      	add	r3, r2
 8000d38:	466a      	mov	r2, sp
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d907      	bls.n	8000d4e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d3e:	f002 fdfb 	bl	8003938 <__errno>
 8000d42:	4603      	mov	r3, r0
 8000d44:	220c      	movs	r2, #12
 8000d46:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4c:	e006      	b.n	8000d5c <_sbrk+0x48>
	}

	heap_end += incr;
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <_sbrk+0x50>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a03      	ldr	r2, [pc, #12]	; (8000d64 <_sbrk+0x50>)
 8000d58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000008c 	.word	0x2000008c
 8000d68:	200001d0 	.word	0x200001d0

08000d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <SystemInit+0x28>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d76:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <SystemInit+0x28>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SystemInit+0x28>)
 8000d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d86:	609a      	str	r2, [r3, #8]
#endif
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b096      	sub	sp, #88	; 0x58
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
 8000dc6:	615a      	str	r2, [r3, #20]
 8000dc8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2220      	movs	r2, #32
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 fddb 	bl	800398c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dd6:	4b4a      	ldr	r3, [pc, #296]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000dd8:	4a4a      	ldr	r2, [pc, #296]	; (8000f04 <MX_TIM1_Init+0x16c>)
 8000dda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ddc:	4b48      	ldr	r3, [pc, #288]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de2:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000de8:	4b45      	ldr	r3, [pc, #276]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df0:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df6:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e02:	483f      	ldr	r0, [pc, #252]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000e04:	f001 fb3e 	bl	8002484 <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e0e:	f7ff fe67 	bl	8000ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4838      	ldr	r0, [pc, #224]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000e20:	f001 fdae 	bl	8002980 <HAL_TIM_ConfigClockSource>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e2a:	f7ff fe59 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000e2e:	4834      	ldr	r0, [pc, #208]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000e30:	f001 fbe8 	bl	8002604 <HAL_TIM_OC_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e3a:	f7ff fe51 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	482c      	ldr	r0, [pc, #176]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000e4e:	f002 f97b 	bl	8003148 <HAL_TIMEx_MasterConfigSynchronization>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e58:	f7ff fe42 	bl	8000ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481f      	ldr	r0, [pc, #124]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000e82:	f001 fd21 	bl	80028c8 <HAL_TIM_OC_ConfigChannel>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e8c:	f7ff fe28 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	2204      	movs	r2, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4819      	ldr	r0, [pc, #100]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000e9a:	f001 fd15 	bl	80028c8 <HAL_TIM_OC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000ea4:	f7ff fe1c 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eac:	2208      	movs	r2, #8
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4813      	ldr	r0, [pc, #76]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000eb2:	f001 fd09 	bl	80028c8 <HAL_TIM_OC_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ebc:	f7ff fe10 	bl	8000ae0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000ee4:	f002 f9ac 	bl	8003240 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000eee:	f7ff fdf7 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <MX_TIM1_Init+0x168>)
 8000ef4:	f000 f8e0 	bl	80010b8 <HAL_TIM_MspPostInit>

}
 8000ef8:	bf00      	nop
 8000efa:	3758      	adds	r7, #88	; 0x58
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200000e4 	.word	0x200000e4
 8000f04:	40010000 	.word	0x40010000

08000f08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <MX_TIM3_Init+0x94>)
 8000f26:	4a1e      	ldr	r2, [pc, #120]	; (8000fa0 <MX_TIM3_Init+0x98>)
 8000f28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8999;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_TIM3_Init+0x94>)
 8000f2c:	f242 3227 	movw	r2, #8999	; 0x2327
 8000f30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_TIM3_Init+0x94>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_TIM3_Init+0x94>)
 8000f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_TIM3_Init+0x94>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_TIM3_Init+0x94>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f4c:	4813      	ldr	r0, [pc, #76]	; (8000f9c <MX_TIM3_Init+0x94>)
 8000f4e:	f001 fa99 	bl	8002484 <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f58:	f7ff fdc2 	bl	8000ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	4619      	mov	r1, r3
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <MX_TIM3_Init+0x94>)
 8000f6a:	f001 fd09 	bl	8002980 <HAL_TIM_ConfigClockSource>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f74:	f7ff fdb4 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_TIM3_Init+0x94>)
 8000f86:	f002 f8df 	bl	8003148 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f90:	f7ff fda6 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000009c 	.word	0x2000009c
 8000fa0:	40000400 	.word	0x40000400

08000fa4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000faa:	463b      	mov	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fb4:	4a15      	ldr	r2, [pc, #84]	; (800100c <MX_TIM7_Init+0x68>)
 8000fb6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1;
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 44999;
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fc6:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000fca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fd2:	480d      	ldr	r0, [pc, #52]	; (8001008 <MX_TIM7_Init+0x64>)
 8000fd4:	f001 fa56 	bl	8002484 <HAL_TIM_Base_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000fde:	f7ff fd7f 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <MX_TIM7_Init+0x64>)
 8000ff0:	f002 f8aa 	bl	8003148 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000ffa:	f7ff fd71 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000012c 	.word	0x2000012c
 800100c:	40001400 	.word	0x40001400

08001010 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <HAL_TIM_Base_MspInit+0x98>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d10e      	bne.n	8001040 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <HAL_TIM_Base_MspInit+0x9c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a20      	ldr	r2, [pc, #128]	; (80010ac <HAL_TIM_Base_MspInit+0x9c>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <HAL_TIM_Base_MspInit+0x9c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800103e:	e02e      	b.n	800109e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a1a      	ldr	r2, [pc, #104]	; (80010b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d10e      	bne.n	8001068 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_TIM_Base_MspInit+0x9c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a16      	ldr	r2, [pc, #88]	; (80010ac <HAL_TIM_Base_MspInit+0x9c>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_TIM_Base_MspInit+0x9c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
}
 8001066:	e01a      	b.n	800109e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM7)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <HAL_TIM_Base_MspInit+0xa4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d115      	bne.n	800109e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_TIM_Base_MspInit+0x9c>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_TIM_Base_MspInit+0x9c>)
 800107c:	f043 0320 	orr.w	r3, r3, #32
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_TIM_Base_MspInit+0x9c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 0320 	and.w	r3, r3, #32
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2037      	movs	r0, #55	; 0x37
 8001094:	f000 fa57 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001098:	2037      	movs	r0, #55	; 0x37
 800109a:	f000 fa70 	bl	800157e <HAL_NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40010000 	.word	0x40010000
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40000400 	.word	0x40000400
 80010b4:	40001400 	.word	0x40001400

080010b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a12      	ldr	r2, [pc, #72]	; (8001120 <HAL_TIM_MspPostInit+0x68>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d11e      	bne.n	8001118 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_TIM_MspPostInit+0x6c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_TIM_MspPostInit+0x6c>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_TIM_MspPostInit+0x6c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = S1_H_Pin|S2_H_Pin|S3_H_Pin;
 80010f6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80010fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001108:	2301      	movs	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4619      	mov	r1, r3
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_TIM_MspPostInit+0x70>)
 8001114:	f000 fa54 	bl	80015c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40010000 	.word	0x40010000
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000

0800112c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_USART2_UART_Init+0x50>)
 8001134:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_USART2_UART_Init+0x4c>)
 8001164:	f002 f8d2 	bl	800330c <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800116e:	f7ff fcb7 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000174 	.word	0x20000174
 800117c:	40004400 	.word	0x40004400

08001180 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a19      	ldr	r2, [pc, #100]	; (8001204 <HAL_UART_MspInit+0x84>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d12b      	bne.n	80011fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_UART_MspInit+0x88>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <HAL_UART_MspInit+0x88>)
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_UART_MspInit+0x88>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_UART_MspInit+0x88>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <HAL_UART_MspInit+0x88>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_UART_MspInit+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011da:	230c      	movs	r3, #12
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ea:	2307      	movs	r3, #7
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_UART_MspInit+0x8c>)
 80011f6:	f000 f9e3 	bl	80015c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40004400 	.word	0x40004400
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000

08001210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001248 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001214:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001216:	e003      	b.n	8001220 <LoopCopyDataInit>

08001218 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800121a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800121c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800121e:	3104      	adds	r1, #4

08001220 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001220:	480b      	ldr	r0, [pc, #44]	; (8001250 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001224:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001226:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001228:	d3f6      	bcc.n	8001218 <CopyDataInit>
  ldr  r2, =_sbss
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800122c:	e002      	b.n	8001234 <LoopFillZerobss>

0800122e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800122e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001230:	f842 3b04 	str.w	r3, [r2], #4

08001234 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001236:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001238:	d3f9      	bcc.n	800122e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800123a:	f7ff fd97 	bl	8000d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123e:	f002 fb81 	bl	8003944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001242:	f7ff fad7 	bl	80007f4 <main>
  bx  lr    
 8001246:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001248:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800124c:	08004a28 	.word	0x08004a28
  ldr  r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001254:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001258:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800125c:	200001cc 	.word	0x200001cc

08001260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC_IRQHandler>
	...

08001264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <HAL_Init+0x40>)
 800126e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <HAL_Init+0x40>)
 800127a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <HAL_Init+0x40>)
 8001286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128c:	2003      	movs	r0, #3
 800128e:	f000 f94f 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001292:	2000      	movs	r0, #0
 8001294:	f000 f808 	bl	80012a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001298:	f7ff fc2a 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023c00 	.word	0x40023c00

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_InitTick+0x54>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_InitTick+0x58>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f967 	bl	800159a <HAL_SYSTICK_Config>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00e      	b.n	80012f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d80a      	bhi.n	80012f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f000 f92f 	bl	8001546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_InitTick+0x5c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000008 	.word	0x20000008
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x20>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x24>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_IncTick+0x24>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000008 	.word	0x20000008
 800132c:	200001b8 	.word	0x200001b8

08001330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return uwTick;
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_GetTick+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	200001b8 	.word	0x200001b8

08001348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff ffee 	bl	8001330 <HAL_GetTick>
 8001354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001360:	d005      	beq.n	800136e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_Delay+0x44>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800136e:	bf00      	nop
 8001370:	f7ff ffde 	bl	8001330 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	d8f7      	bhi.n	8001370 <HAL_Delay+0x28>
  {
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff8e 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff29 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff3e 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff8e 	bl	8001484 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff31 	bl	80013f4 <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffa2 	bl	80014ec <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	e165      	b.n	80018a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 8154 	bne.w	80018a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d005      	beq.n	8001612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160e:	2b02      	cmp	r3, #2
 8001610:	d130      	bne.n	8001674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 0201 	and.w	r2, r3, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b03      	cmp	r3, #3
 800167e:	d017      	beq.n	80016b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d123      	bne.n	8001704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	69b9      	ldr	r1, [r7, #24]
 8001700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0203 	and.w	r2, r3, #3
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80ae 	beq.w	80018a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b5d      	ldr	r3, [pc, #372]	; (80018c0 <HAL_GPIO_Init+0x300>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a5c      	ldr	r2, [pc, #368]	; (80018c0 <HAL_GPIO_Init+0x300>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b5a      	ldr	r3, [pc, #360]	; (80018c0 <HAL_GPIO_Init+0x300>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001762:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <HAL_GPIO_Init+0x304>)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4f      	ldr	r2, [pc, #316]	; (80018c8 <HAL_GPIO_Init+0x308>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d025      	beq.n	80017da <HAL_GPIO_Init+0x21a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <HAL_GPIO_Init+0x30c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01f      	beq.n	80017d6 <HAL_GPIO_Init+0x216>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4d      	ldr	r2, [pc, #308]	; (80018d0 <HAL_GPIO_Init+0x310>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d019      	beq.n	80017d2 <HAL_GPIO_Init+0x212>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4c      	ldr	r2, [pc, #304]	; (80018d4 <HAL_GPIO_Init+0x314>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0x20e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4b      	ldr	r2, [pc, #300]	; (80018d8 <HAL_GPIO_Init+0x318>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_Init+0x20a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4a      	ldr	r2, [pc, #296]	; (80018dc <HAL_GPIO_Init+0x31c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x206>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a49      	ldr	r2, [pc, #292]	; (80018e0 <HAL_GPIO_Init+0x320>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_Init+0x202>
 80017be:	2306      	movs	r3, #6
 80017c0:	e00c      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017c2:	2307      	movs	r3, #7
 80017c4:	e00a      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017c6:	2305      	movs	r3, #5
 80017c8:	e008      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017ca:	2304      	movs	r3, #4
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e004      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_GPIO_Init+0x21c>
 80017da:	2300      	movs	r3, #0
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f002 0203 	and.w	r2, r2, #3
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	4093      	lsls	r3, r2
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ec:	4935      	ldr	r1, [pc, #212]	; (80018c4 <HAL_GPIO_Init+0x304>)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017fa:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <HAL_GPIO_Init+0x324>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800181e:	4a31      	ldr	r2, [pc, #196]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001848:	4a26      	ldr	r2, [pc, #152]	; (80018e4 <HAL_GPIO_Init+0x324>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184e:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_GPIO_Init+0x324>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800189c:	4a11      	ldr	r2, [pc, #68]	; (80018e4 <HAL_GPIO_Init+0x324>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b0f      	cmp	r3, #15
 80018ac:	f67f ae96 	bls.w	80015dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020400 	.word	0x40020400
 80018d0:	40020800 	.word	0x40020800
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40021400 	.word	0x40021400
 80018e0:	40021800 	.word	0x40021800
 80018e4:	40013c00 	.word	0x40013c00

080018e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	887b      	ldrh	r3, [r7, #2]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e001      	b.n	800190a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001934:	e003      	b.n	800193e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800194a:	b480      	push	{r7}
 800194c:	b085      	sub	sp, #20
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800195c:	887a      	ldrh	r2, [r7, #2]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	041a      	lsls	r2, r3, #16
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43d9      	mvns	r1, r3
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	400b      	ands	r3, r1
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	619a      	str	r2, [r3, #24]
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d006      	beq.n	80019a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f924 	bl	8000bec <HAL_GPIO_EXTI_Callback>
  }
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40013c00 	.word	0x40013c00

080019b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0cc      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b68      	ldr	r3, [pc, #416]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d90c      	bls.n	80019ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b65      	ldr	r3, [pc, #404]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0b8      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	494d      	ldr	r1, [pc, #308]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d044      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d119      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e07f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d003      	beq.n	8001a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e06f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	4b3b      	ldr	r3, [pc, #236]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e067      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4934      	ldr	r1, [pc, #208]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa0:	f7ff fc46 	bl	8001330 <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff fc42 	bl	8001330 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e04f      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 020c 	and.w	r2, r3, #12
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1eb      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d20c      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e032      	b.n	8001b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d008      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4916      	ldr	r1, [pc, #88]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	490e      	ldr	r1, [pc, #56]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b36:	f000 f855 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	490a      	ldr	r1, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fba6 	bl	80012a8 <HAL_InitTick>

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08004968 	.word	0x08004968
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000000 	.word	0x20000000

08001b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b98:	f7ff fff0 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	0a9b      	lsrs	r3, r3, #10
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4903      	ldr	r1, [pc, #12]	; (8001bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	08004978 	.word	0x08004978

08001bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bc0:	f7ff ffdc 	bl	8001b7c <HAL_RCC_GetHCLKFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	0b5b      	lsrs	r3, r3, #13
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	4903      	ldr	r1, [pc, #12]	; (8001be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd2:	5ccb      	ldrb	r3, [r1, r3]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	08004978 	.word	0x08004978

08001be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be8:	b088      	sub	sp, #32
 8001bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c00:	4bce      	ldr	r3, [pc, #824]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b0c      	cmp	r3, #12
 8001c0a:	f200 818d 	bhi.w	8001f28 <HAL_RCC_GetSysClockFreq+0x344>
 8001c0e:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <HAL_RCC_GetSysClockFreq+0x30>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c49 	.word	0x08001c49
 8001c18:	08001f29 	.word	0x08001f29
 8001c1c:	08001f29 	.word	0x08001f29
 8001c20:	08001f29 	.word	0x08001f29
 8001c24:	08001c4f 	.word	0x08001c4f
 8001c28:	08001f29 	.word	0x08001f29
 8001c2c:	08001f29 	.word	0x08001f29
 8001c30:	08001f29 	.word	0x08001f29
 8001c34:	08001c55 	.word	0x08001c55
 8001c38:	08001f29 	.word	0x08001f29
 8001c3c:	08001f29 	.word	0x08001f29
 8001c40:	08001f29 	.word	0x08001f29
 8001c44:	08001dc9 	.word	0x08001dc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c48:	4bbd      	ldr	r3, [pc, #756]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c4a:	61bb      	str	r3, [r7, #24]
       break;
 8001c4c:	e16f      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c4e:	4bbd      	ldr	r3, [pc, #756]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x360>)
 8001c50:	61bb      	str	r3, [r7, #24]
      break;
 8001c52:	e16c      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c54:	4bb9      	ldr	r3, [pc, #740]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c5c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c5e:	4bb7      	ldr	r3, [pc, #732]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d053      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6a:	4bb4      	ldr	r3, [pc, #720]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	099b      	lsrs	r3, r3, #6
 8001c70:	461a      	mov	r2, r3
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	ea02 0400 	and.w	r4, r2, r0
 8001c82:	603c      	str	r4, [r7, #0]
 8001c84:	400b      	ands	r3, r1
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	4629      	mov	r1, r5
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	014b      	lsls	r3, r1, #5
 8001c9a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c9e:	0142      	lsls	r2, r0, #5
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	1ac0      	subs	r0, r0, r3
 8001ca8:	462b      	mov	r3, r5
 8001caa:	eb61 0103 	sbc.w	r1, r1, r3
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	018b      	lsls	r3, r1, #6
 8001cb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cbc:	0182      	lsls	r2, r0, #6
 8001cbe:	1a12      	subs	r2, r2, r0
 8001cc0:	eb63 0301 	sbc.w	r3, r3, r1
 8001cc4:	f04f 0000 	mov.w	r0, #0
 8001cc8:	f04f 0100 	mov.w	r1, #0
 8001ccc:	00d9      	lsls	r1, r3, #3
 8001cce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cd2:	00d0      	lsls	r0, r2, #3
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4621      	mov	r1, r4
 8001cda:	1852      	adds	r2, r2, r1
 8001cdc:	4629      	mov	r1, r5
 8001cde:	eb43 0101 	adc.w	r1, r3, r1
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	f04f 0000 	mov.w	r0, #0
 8001ce8:	f04f 0100 	mov.w	r1, #0
 8001cec:	0259      	lsls	r1, r3, #9
 8001cee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001cf2:	0250      	lsls	r0, r2, #9
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	f7fe fad4 	bl	80002b0 <__aeabi_uldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	e04c      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d12:	4b8a      	ldr	r3, [pc, #552]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	099b      	lsrs	r3, r3, #6
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	ea02 0a00 	and.w	sl, r2, r0
 8001d2a:	ea03 0b01 	and.w	fp, r3, r1
 8001d2e:	4650      	mov	r0, sl
 8001d30:	4659      	mov	r1, fp
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	014b      	lsls	r3, r1, #5
 8001d3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d40:	0142      	lsls	r2, r0, #5
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	ebb0 000a 	subs.w	r0, r0, sl
 8001d4a:	eb61 010b 	sbc.w	r1, r1, fp
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	018b      	lsls	r3, r1, #6
 8001d58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d5c:	0182      	lsls	r2, r0, #6
 8001d5e:	1a12      	subs	r2, r2, r0
 8001d60:	eb63 0301 	sbc.w	r3, r3, r1
 8001d64:	f04f 0000 	mov.w	r0, #0
 8001d68:	f04f 0100 	mov.w	r1, #0
 8001d6c:	00d9      	lsls	r1, r3, #3
 8001d6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d72:	00d0      	lsls	r0, r2, #3
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	eb12 020a 	adds.w	r2, r2, sl
 8001d7c:	eb43 030b 	adc.w	r3, r3, fp
 8001d80:	f04f 0000 	mov.w	r0, #0
 8001d84:	f04f 0100 	mov.w	r1, #0
 8001d88:	0299      	lsls	r1, r3, #10
 8001d8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d8e:	0290      	lsls	r0, r2, #10
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	f7fe fa86 	bl	80002b0 <__aeabi_uldivmod>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4613      	mov	r3, r2
 8001daa:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dac:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	3301      	adds	r3, #1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001dbc:	69fa      	ldr	r2, [r7, #28]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	61bb      	str	r3, [r7, #24]
      break;
 8001dc6:	e0b2      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc8:	4b5c      	ldr	r3, [pc, #368]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd2:	4b5a      	ldr	r3, [pc, #360]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d04d      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dde:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	099b      	lsrs	r3, r3, #6
 8001de4:	461a      	mov	r2, r3
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dee:	f04f 0100 	mov.w	r1, #0
 8001df2:	ea02 0800 	and.w	r8, r2, r0
 8001df6:	ea03 0901 	and.w	r9, r3, r1
 8001dfa:	4640      	mov	r0, r8
 8001dfc:	4649      	mov	r1, r9
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	014b      	lsls	r3, r1, #5
 8001e08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e0c:	0142      	lsls	r2, r0, #5
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	ebb0 0008 	subs.w	r0, r0, r8
 8001e16:	eb61 0109 	sbc.w	r1, r1, r9
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	018b      	lsls	r3, r1, #6
 8001e24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e28:	0182      	lsls	r2, r0, #6
 8001e2a:	1a12      	subs	r2, r2, r0
 8001e2c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e30:	f04f 0000 	mov.w	r0, #0
 8001e34:	f04f 0100 	mov.w	r1, #0
 8001e38:	00d9      	lsls	r1, r3, #3
 8001e3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e3e:	00d0      	lsls	r0, r2, #3
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	eb12 0208 	adds.w	r2, r2, r8
 8001e48:	eb43 0309 	adc.w	r3, r3, r9
 8001e4c:	f04f 0000 	mov.w	r0, #0
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	0259      	lsls	r1, r3, #9
 8001e56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e5a:	0250      	lsls	r0, r2, #9
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	461a      	mov	r2, r3
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	f7fe fa20 	bl	80002b0 <__aeabi_uldivmod>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4613      	mov	r3, r2
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	e04a      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7a:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	461a      	mov	r2, r3
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e8a:	f04f 0100 	mov.w	r1, #0
 8001e8e:	ea02 0400 	and.w	r4, r2, r0
 8001e92:	ea03 0501 	and.w	r5, r3, r1
 8001e96:	4620      	mov	r0, r4
 8001e98:	4629      	mov	r1, r5
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	014b      	lsls	r3, r1, #5
 8001ea4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ea8:	0142      	lsls	r2, r0, #5
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	1b00      	subs	r0, r0, r4
 8001eb0:	eb61 0105 	sbc.w	r1, r1, r5
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	018b      	lsls	r3, r1, #6
 8001ebe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ec2:	0182      	lsls	r2, r0, #6
 8001ec4:	1a12      	subs	r2, r2, r0
 8001ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eca:	f04f 0000 	mov.w	r0, #0
 8001ece:	f04f 0100 	mov.w	r1, #0
 8001ed2:	00d9      	lsls	r1, r3, #3
 8001ed4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ed8:	00d0      	lsls	r0, r2, #3
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	1912      	adds	r2, r2, r4
 8001ee0:	eb45 0303 	adc.w	r3, r5, r3
 8001ee4:	f04f 0000 	mov.w	r0, #0
 8001ee8:	f04f 0100 	mov.w	r1, #0
 8001eec:	0299      	lsls	r1, r3, #10
 8001eee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ef2:	0290      	lsls	r0, r2, #10
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	461a      	mov	r2, r3
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	f7fe f9d4 	bl	80002b0 <__aeabi_uldivmod>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	0f1b      	lsrs	r3, r3, #28
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	61bb      	str	r3, [r7, #24]
      break;
 8001f26:	e002      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f2a:	61bb      	str	r3, [r7, #24]
      break;
 8001f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	00f42400 	.word	0x00f42400
 8001f44:	007a1200 	.word	0x007a1200

08001f48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e28d      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8083 	beq.w	800206e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f68:	4b94      	ldr	r3, [pc, #592]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d019      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f74:	4b91      	ldr	r3, [pc, #580]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f80:	4b8e      	ldr	r3, [pc, #568]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8e:	4b8b      	ldr	r3, [pc, #556]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	d112      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9a:	4b88      	ldr	r3, [pc, #544]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	4b84      	ldr	r3, [pc, #528]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d05b      	beq.n	800206c <HAL_RCC_OscConfig+0x124>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d157      	bne.n	800206c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e25a      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d106      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x90>
 8001fca:	4b7c      	ldr	r3, [pc, #496]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a7b      	ldr	r2, [pc, #492]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e01d      	b.n	8002014 <HAL_RCC_OscConfig+0xcc>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0xb4>
 8001fe2:	4b76      	ldr	r3, [pc, #472]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a75      	ldr	r2, [pc, #468]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b73      	ldr	r3, [pc, #460]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a72      	ldr	r2, [pc, #456]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0xcc>
 8001ffc:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6e      	ldr	r2, [pc, #440]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b6c      	ldr	r3, [pc, #432]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a6b      	ldr	r2, [pc, #428]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff f988 	bl	8001330 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff f984 	bl	8001330 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e21f      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b61      	ldr	r3, [pc, #388]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0xdc>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7ff f974 	bl	8001330 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff f970 	bl	8001330 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e20b      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	4b57      	ldr	r3, [pc, #348]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x104>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d06f      	beq.n	800215a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800207a:	4b50      	ldr	r3, [pc, #320]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b00      	cmp	r3, #0
 8002084:	d017      	beq.n	80020b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002086:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800208e:	2b08      	cmp	r3, #8
 8002090:	d105      	bne.n	800209e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002092:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020a6:	2b0c      	cmp	r3, #12
 80020a8:	d11c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020aa:	4b44      	ldr	r3, [pc, #272]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d116      	bne.n	80020e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b6:	4b41      	ldr	r3, [pc, #260]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_RCC_OscConfig+0x186>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e1d3      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4937      	ldr	r1, [pc, #220]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e2:	e03a      	b.n	800215a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d020      	beq.n	800212e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ec:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <HAL_RCC_OscConfig+0x278>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7ff f91d 	bl	8001330 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fa:	f7ff f919 	bl	8001330 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e1b4      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4925      	ldr	r1, [pc, #148]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]
 800212c:	e015      	b.n	800215a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_RCC_OscConfig+0x278>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7ff f8fc 	bl	8001330 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213c:	f7ff f8f8 	bl	8001330 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e193      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d036      	beq.n	80021d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d016      	beq.n	800219c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_RCC_OscConfig+0x27c>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002174:	f7ff f8dc 	bl	8001330 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217c:	f7ff f8d8 	bl	8001330 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e173      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x234>
 800219a:	e01b      	b.n	80021d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_OscConfig+0x27c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a2:	f7ff f8c5 	bl	8001330 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a8:	e00e      	b.n	80021c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021aa:	f7ff f8c1 	bl	8001330 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d907      	bls.n	80021c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e15c      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
 80021bc:	40023800 	.word	0x40023800
 80021c0:	42470000 	.word	0x42470000
 80021c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	4b8a      	ldr	r3, [pc, #552]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80021ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ea      	bne.n	80021aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 8097 	beq.w	8002310 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e6:	4b83      	ldr	r3, [pc, #524]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10f      	bne.n	8002212 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	4b7f      	ldr	r3, [pc, #508]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a7e      	ldr	r2, [pc, #504]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
 8002202:	4b7c      	ldr	r3, [pc, #496]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220e:	2301      	movs	r3, #1
 8002210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002212:	4b79      	ldr	r3, [pc, #484]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d118      	bne.n	8002250 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221e:	4b76      	ldr	r3, [pc, #472]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a75      	ldr	r2, [pc, #468]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222a:	f7ff f881 	bl	8001330 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002232:	f7ff f87d 	bl	8001330 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e118      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	4b6c      	ldr	r3, [pc, #432]	; (80023f8 <HAL_RCC_OscConfig+0x4b0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d106      	bne.n	8002266 <HAL_RCC_OscConfig+0x31e>
 8002258:	4b66      	ldr	r3, [pc, #408]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	4a65      	ldr	r2, [pc, #404]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6713      	str	r3, [r2, #112]	; 0x70
 8002264:	e01c      	b.n	80022a0 <HAL_RCC_OscConfig+0x358>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b05      	cmp	r3, #5
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x340>
 800226e:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	4a60      	ldr	r2, [pc, #384]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	6713      	str	r3, [r2, #112]	; 0x70
 800227a:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a5d      	ldr	r2, [pc, #372]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0x358>
 8002288:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	4a59      	ldr	r2, [pc, #356]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	6713      	str	r3, [r2, #112]	; 0x70
 8002294:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	4a56      	ldr	r2, [pc, #344]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800229a:	f023 0304 	bic.w	r3, r3, #4
 800229e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a8:	f7ff f842 	bl	8001330 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7ff f83e 	bl	8001330 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e0d7      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c6:	4b4b      	ldr	r3, [pc, #300]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0ee      	beq.n	80022b0 <HAL_RCC_OscConfig+0x368>
 80022d2:	e014      	b.n	80022fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7ff f82c 	bl	8001330 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022dc:	f7ff f828 	bl	8001330 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e0c1      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f2:	4b40      	ldr	r3, [pc, #256]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1ee      	bne.n	80022dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d105      	bne.n	8002310 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800230a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80ad 	beq.w	8002474 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800231a:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b08      	cmp	r3, #8
 8002324:	d060      	beq.n	80023e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d145      	bne.n	80023ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232e:	4b33      	ldr	r3, [pc, #204]	; (80023fc <HAL_RCC_OscConfig+0x4b4>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe fffc 	bl	8001330 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233c:	f7fe fff8 	bl	8001330 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e093      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	019b      	lsls	r3, r3, #6
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	085b      	lsrs	r3, r3, #1
 8002372:	3b01      	subs	r3, #1
 8002374:	041b      	lsls	r3, r3, #16
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	071b      	lsls	r3, r3, #28
 8002386:	491b      	ldr	r1, [pc, #108]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x4b4>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe ffcd 	bl	8001330 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe ffc9 	bl	8001330 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e064      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x452>
 80023b8:	e05c      	b.n	8002474 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_RCC_OscConfig+0x4b4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe ffb6 	bl	8001330 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe ffb2 	bl	8001330 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e04d      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_RCC_OscConfig+0x4ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x480>
 80023e6:	e045      	b.n	8002474 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d107      	bne.n	8002400 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e040      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40007000 	.word	0x40007000
 80023fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <HAL_RCC_OscConfig+0x538>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d030      	beq.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d129      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d122      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002438:	4293      	cmp	r3, r2
 800243a:	d119      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	3b01      	subs	r3, #1
 800244a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d10f      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d107      	bne.n	8002470 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800

08002484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e041      	b.n	800251a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe fdb0 	bl	8001010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3304      	adds	r3, #4
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f000 fb56 	bl	8002b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d001      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e04e      	b.n	80025da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a23      	ldr	r2, [pc, #140]	; (80025e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d022      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x80>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002566:	d01d      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x80>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1f      	ldr	r2, [pc, #124]	; (80025ec <HAL_TIM_Base_Start_IT+0xc8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d018      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x80>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d013      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x80>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00e      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x80>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d009      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x80>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a19      	ldr	r2, [pc, #100]	; (80025fc <HAL_TIM_Base_Start_IT+0xd8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d004      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0x80>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a18      	ldr	r2, [pc, #96]	; (8002600 <HAL_TIM_Base_Start_IT+0xdc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d111      	bne.n	80025c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b06      	cmp	r3, #6
 80025b4:	d010      	beq.n	80025d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0201 	orr.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c6:	e007      	b.n	80025d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40010000 	.word	0x40010000
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40000800 	.word	0x40000800
 80025f4:	40000c00 	.word	0x40000c00
 80025f8:	40010400 	.word	0x40010400
 80025fc:	40014000 	.word	0x40014000
 8002600:	40001800 	.word	0x40001800

08002604 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e041      	b.n	800269a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f839 	bl	80026a2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	4619      	mov	r1, r3
 8002642:	4610      	mov	r0, r2
 8002644:	f000 fa96 	bl	8002b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d122      	bne.n	8002712 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d11b      	bne.n	8002712 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f06f 0202 	mvn.w	r2, #2
 80026e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fa1c 	bl	8002b36 <HAL_TIM_IC_CaptureCallback>
 80026fe:	e005      	b.n	800270c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fa0e 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fa1f 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b04      	cmp	r3, #4
 800271e:	d122      	bne.n	8002766 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b04      	cmp	r3, #4
 800272c:	d11b      	bne.n	8002766 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f06f 0204 	mvn.w	r2, #4
 8002736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f9f2 	bl	8002b36 <HAL_TIM_IC_CaptureCallback>
 8002752:	e005      	b.n	8002760 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f9e4 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f9f5 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b08      	cmp	r3, #8
 8002772:	d122      	bne.n	80027ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b08      	cmp	r3, #8
 8002780:	d11b      	bne.n	80027ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f06f 0208 	mvn.w	r2, #8
 800278a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2204      	movs	r2, #4
 8002790:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f9c8 	bl	8002b36 <HAL_TIM_IC_CaptureCallback>
 80027a6:	e005      	b.n	80027b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f9ba 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f9cb 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d122      	bne.n	800280e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b10      	cmp	r3, #16
 80027d4:	d11b      	bne.n	800280e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f06f 0210 	mvn.w	r2, #16
 80027de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2208      	movs	r2, #8
 80027e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f99e 	bl	8002b36 <HAL_TIM_IC_CaptureCallback>
 80027fa:	e005      	b.n	8002808 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f990 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f9a1 	bl	8002b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b01      	cmp	r3, #1
 800281a:	d10e      	bne.n	800283a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d107      	bne.n	800283a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f06f 0201 	mvn.w	r2, #1
 8002832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f96a 	bl	8002b0e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002844:	2b80      	cmp	r3, #128	; 0x80
 8002846:	d10e      	bne.n	8002866 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002852:	2b80      	cmp	r3, #128	; 0x80
 8002854:	d107      	bne.n	8002866 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800285e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fd49 	bl	80032f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d10e      	bne.n	8002892 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287e:	2b40      	cmp	r3, #64	; 0x40
 8002880:	d107      	bne.n	8002892 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800288a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f966 	bl	8002b5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b20      	cmp	r3, #32
 800289e:	d10e      	bne.n	80028be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d107      	bne.n	80028be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f06f 0220 	mvn.w	r2, #32
 80028b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fd13 	bl	80032e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e048      	b.n	8002978 <HAL_TIM_OC_ConfigChannel+0xb0>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b0c      	cmp	r3, #12
 80028f2:	d839      	bhi.n	8002968 <HAL_TIM_OC_ConfigChannel+0xa0>
 80028f4:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <HAL_TIM_OC_ConfigChannel+0x34>)
 80028f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fa:	bf00      	nop
 80028fc:	08002931 	.word	0x08002931
 8002900:	08002969 	.word	0x08002969
 8002904:	08002969 	.word	0x08002969
 8002908:	08002969 	.word	0x08002969
 800290c:	0800293f 	.word	0x0800293f
 8002910:	08002969 	.word	0x08002969
 8002914:	08002969 	.word	0x08002969
 8002918:	08002969 	.word	0x08002969
 800291c:	0800294d 	.word	0x0800294d
 8002920:	08002969 	.word	0x08002969
 8002924:	08002969 	.word	0x08002969
 8002928:	08002969 	.word	0x08002969
 800292c:	0800295b 	.word	0x0800295b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f9bc 	bl	8002cb4 <TIM_OC1_SetConfig>
      break;
 800293c:	e017      	b.n	800296e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	4618      	mov	r0, r3
 8002946:	f000 fa25 	bl	8002d94 <TIM_OC2_SetConfig>
      break;
 800294a:	e010      	b.n	800296e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fa94 	bl	8002e80 <TIM_OC3_SetConfig>
      break;
 8002958:	e009      	b.n	800296e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fb01 	bl	8002f68 <TIM_OC4_SetConfig>
      break;
 8002966:	e002      	b.n	800296e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	75fb      	strb	r3, [r7, #23]
      break;
 800296c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002976:	7dfb      	ldrb	r3, [r7, #23]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_TIM_ConfigClockSource+0x1c>
 8002998:	2302      	movs	r3, #2
 800299a:	e0b4      	b.n	8002b06 <HAL_TIM_ConfigClockSource+0x186>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d4:	d03e      	beq.n	8002a54 <HAL_TIM_ConfigClockSource+0xd4>
 80029d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029da:	f200 8087 	bhi.w	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 80029de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e2:	f000 8086 	beq.w	8002af2 <HAL_TIM_ConfigClockSource+0x172>
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	d87f      	bhi.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 80029ec:	2b70      	cmp	r3, #112	; 0x70
 80029ee:	d01a      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0xa6>
 80029f0:	2b70      	cmp	r3, #112	; 0x70
 80029f2:	d87b      	bhi.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 80029f4:	2b60      	cmp	r3, #96	; 0x60
 80029f6:	d050      	beq.n	8002a9a <HAL_TIM_ConfigClockSource+0x11a>
 80029f8:	2b60      	cmp	r3, #96	; 0x60
 80029fa:	d877      	bhi.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 80029fc:	2b50      	cmp	r3, #80	; 0x50
 80029fe:	d03c      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0xfa>
 8002a00:	2b50      	cmp	r3, #80	; 0x50
 8002a02:	d873      	bhi.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 8002a04:	2b40      	cmp	r3, #64	; 0x40
 8002a06:	d058      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x13a>
 8002a08:	2b40      	cmp	r3, #64	; 0x40
 8002a0a:	d86f      	bhi.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 8002a0c:	2b30      	cmp	r3, #48	; 0x30
 8002a0e:	d064      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0x15a>
 8002a10:	2b30      	cmp	r3, #48	; 0x30
 8002a12:	d86b      	bhi.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d060      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0x15a>
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d867      	bhi.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d05c      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0x15a>
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d05a      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0x15a>
 8002a24:	e062      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6899      	ldr	r1, [r3, #8]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f000 fb67 	bl	8003108 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	609a      	str	r2, [r3, #8]
      break;
 8002a52:	e04f      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6899      	ldr	r1, [r3, #8]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f000 fb50 	bl	8003108 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a76:	609a      	str	r2, [r3, #8]
      break;
 8002a78:	e03c      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f000 fac4 	bl	8003014 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2150      	movs	r1, #80	; 0x50
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fb1d 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002a98:	e02c      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f000 fae3 	bl	8003072 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2160      	movs	r1, #96	; 0x60
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fb0d 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002ab8:	e01c      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6859      	ldr	r1, [r3, #4]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f000 faa4 	bl	8003014 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2140      	movs	r1, #64	; 0x40
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fafd 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002ad8:	e00c      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	f000 faf4 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002aea:	e003      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      break;
 8002af0:	e000      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002af2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a40      	ldr	r2, [pc, #256]	; (8002c88 <TIM_Base_SetConfig+0x114>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d013      	beq.n	8002bb4 <TIM_Base_SetConfig+0x40>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b92:	d00f      	beq.n	8002bb4 <TIM_Base_SetConfig+0x40>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a3d      	ldr	r2, [pc, #244]	; (8002c8c <TIM_Base_SetConfig+0x118>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d00b      	beq.n	8002bb4 <TIM_Base_SetConfig+0x40>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a3c      	ldr	r2, [pc, #240]	; (8002c90 <TIM_Base_SetConfig+0x11c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d007      	beq.n	8002bb4 <TIM_Base_SetConfig+0x40>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a3b      	ldr	r2, [pc, #236]	; (8002c94 <TIM_Base_SetConfig+0x120>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d003      	beq.n	8002bb4 <TIM_Base_SetConfig+0x40>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a3a      	ldr	r2, [pc, #232]	; (8002c98 <TIM_Base_SetConfig+0x124>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d108      	bne.n	8002bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a2f      	ldr	r2, [pc, #188]	; (8002c88 <TIM_Base_SetConfig+0x114>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d02b      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d027      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a2c      	ldr	r2, [pc, #176]	; (8002c8c <TIM_Base_SetConfig+0x118>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d023      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a2b      	ldr	r2, [pc, #172]	; (8002c90 <TIM_Base_SetConfig+0x11c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d01f      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a2a      	ldr	r2, [pc, #168]	; (8002c94 <TIM_Base_SetConfig+0x120>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01b      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a29      	ldr	r2, [pc, #164]	; (8002c98 <TIM_Base_SetConfig+0x124>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d017      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a28      	ldr	r2, [pc, #160]	; (8002c9c <TIM_Base_SetConfig+0x128>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a27      	ldr	r2, [pc, #156]	; (8002ca0 <TIM_Base_SetConfig+0x12c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00f      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a26      	ldr	r2, [pc, #152]	; (8002ca4 <TIM_Base_SetConfig+0x130>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00b      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a25      	ldr	r2, [pc, #148]	; (8002ca8 <TIM_Base_SetConfig+0x134>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a24      	ldr	r2, [pc, #144]	; (8002cac <TIM_Base_SetConfig+0x138>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d003      	beq.n	8002c26 <TIM_Base_SetConfig+0xb2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a23      	ldr	r2, [pc, #140]	; (8002cb0 <TIM_Base_SetConfig+0x13c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d108      	bne.n	8002c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <TIM_Base_SetConfig+0x114>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d003      	beq.n	8002c6c <TIM_Base_SetConfig+0xf8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <TIM_Base_SetConfig+0x124>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d103      	bne.n	8002c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	615a      	str	r2, [r3, #20]
}
 8002c7a:	bf00      	nop
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40000800 	.word	0x40000800
 8002c94:	40000c00 	.word	0x40000c00
 8002c98:	40010400 	.word	0x40010400
 8002c9c:	40014000 	.word	0x40014000
 8002ca0:	40014400 	.word	0x40014400
 8002ca4:	40014800 	.word	0x40014800
 8002ca8:	40001800 	.word	0x40001800
 8002cac:	40001c00 	.word	0x40001c00
 8002cb0:	40002000 	.word	0x40002000

08002cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f023 0201 	bic.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0303 	bic.w	r3, r3, #3
 8002cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f023 0302 	bic.w	r3, r3, #2
 8002cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a20      	ldr	r2, [pc, #128]	; (8002d8c <TIM_OC1_SetConfig+0xd8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <TIM_OC1_SetConfig+0x64>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <TIM_OC1_SetConfig+0xdc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d10c      	bne.n	8002d32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f023 0308 	bic.w	r3, r3, #8
 8002d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f023 0304 	bic.w	r3, r3, #4
 8002d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <TIM_OC1_SetConfig+0xd8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d003      	beq.n	8002d42 <TIM_OC1_SetConfig+0x8e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <TIM_OC1_SetConfig+0xdc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d111      	bne.n	8002d66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	621a      	str	r2, [r3, #32]
}
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40010000 	.word	0x40010000
 8002d90:	40010400 	.word	0x40010400

08002d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f023 0210 	bic.w	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f023 0320 	bic.w	r3, r3, #32
 8002dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a22      	ldr	r2, [pc, #136]	; (8002e78 <TIM_OC2_SetConfig+0xe4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <TIM_OC2_SetConfig+0x68>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a21      	ldr	r2, [pc, #132]	; (8002e7c <TIM_OC2_SetConfig+0xe8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d10d      	bne.n	8002e18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <TIM_OC2_SetConfig+0xe4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d003      	beq.n	8002e28 <TIM_OC2_SetConfig+0x94>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <TIM_OC2_SetConfig+0xe8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d113      	bne.n	8002e50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	621a      	str	r2, [r3, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40010000 	.word	0x40010000
 8002e7c:	40010400 	.word	0x40010400

08002e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0303 	bic.w	r3, r3, #3
 8002eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <TIM_OC3_SetConfig+0xe0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_OC3_SetConfig+0x66>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a20      	ldr	r2, [pc, #128]	; (8002f64 <TIM_OC3_SetConfig+0xe4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d10d      	bne.n	8002f02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <TIM_OC3_SetConfig+0xe0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d003      	beq.n	8002f12 <TIM_OC3_SetConfig+0x92>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <TIM_OC3_SetConfig+0xe4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d113      	bne.n	8002f3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	621a      	str	r2, [r3, #32]
}
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40010400 	.word	0x40010400

08002f68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	031b      	lsls	r3, r3, #12
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a12      	ldr	r2, [pc, #72]	; (800300c <TIM_OC4_SetConfig+0xa4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d003      	beq.n	8002fd0 <TIM_OC4_SetConfig+0x68>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a11      	ldr	r2, [pc, #68]	; (8003010 <TIM_OC4_SetConfig+0xa8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d109      	bne.n	8002fe4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	019b      	lsls	r3, r3, #6
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	621a      	str	r2, [r3, #32]
}
 8002ffe:	bf00      	nop
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40010000 	.word	0x40010000
 8003010:	40010400 	.word	0x40010400

08003014 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0201 	bic.w	r2, r3, #1
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800303e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f023 030a 	bic.w	r3, r3, #10
 8003050:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	621a      	str	r2, [r3, #32]
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003072:	b480      	push	{r7}
 8003074:	b087      	sub	sp, #28
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	f023 0210 	bic.w	r2, r3, #16
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800309c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	031b      	lsls	r3, r3, #12
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	621a      	str	r2, [r3, #32]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f043 0307 	orr.w	r3, r3, #7
 80030f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	609a      	str	r2, [r3, #8]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	021a      	lsls	r2, r3, #8
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	431a      	orrs	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	609a      	str	r2, [r3, #8]
}
 800313c:	bf00      	nop
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800315c:	2302      	movs	r3, #2
 800315e:	e05a      	b.n	8003216 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a21      	ldr	r2, [pc, #132]	; (8003224 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d022      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ac:	d01d      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d018      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1b      	ldr	r2, [pc, #108]	; (800322c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1a      	ldr	r2, [pc, #104]	; (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a18      	ldr	r2, [pc, #96]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a17      	ldr	r2, [pc, #92]	; (8003238 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a15      	ldr	r2, [pc, #84]	; (800323c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10c      	bne.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40010000 	.word	0x40010000
 8003228:	40000400 	.word	0x40000400
 800322c:	40000800 	.word	0x40000800
 8003230:	40000c00 	.word	0x40000c00
 8003234:	40010400 	.word	0x40010400
 8003238:	40014000 	.word	0x40014000
 800323c:	40001800 	.word	0x40001800

08003240 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003258:	2302      	movs	r3, #2
 800325a:	e03d      	b.n	80032d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e03f      	b.n	800339e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fd ff24 	bl	8001180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	; 0x24
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800334e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f929 	bl	80035a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695a      	ldr	r2, [r3, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b08a      	sub	sp, #40	; 0x28
 80033aa:	af02      	add	r7, sp, #8
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d17c      	bne.n	80034c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HAL_UART_Transmit+0x2c>
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e075      	b.n	80034c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_UART_Transmit+0x3e>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e06e      	b.n	80034c2 <HAL_UART_Transmit+0x11c>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2221      	movs	r2, #33	; 0x21
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033fa:	f7fd ff99 	bl	8001330 <HAL_GetTick>
 80033fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	88fa      	ldrh	r2, [r7, #6]
 8003404:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003414:	d108      	bne.n	8003428 <HAL_UART_Transmit+0x82>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	e003      	b.n	8003430 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003438:	e02a      	b.n	8003490 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	2180      	movs	r1, #128	; 0x80
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f840 	bl	80034ca <UART_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e036      	b.n	80034c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10b      	bne.n	8003472 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003468:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	3302      	adds	r3, #2
 800346e:	61bb      	str	r3, [r7, #24]
 8003470:	e007      	b.n	8003482 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	3301      	adds	r3, #1
 8003480:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1cf      	bne.n	800343a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2200      	movs	r2, #0
 80034a2:	2140      	movs	r1, #64	; 0x40
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f810 	bl	80034ca <UART_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e006      	b.n	80034c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	e000      	b.n	80034c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b090      	sub	sp, #64	; 0x40
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	4613      	mov	r3, r2
 80034d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034da:	e050      	b.n	800357e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e2:	d04c      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <UART_WaitOnFlagUntilTimeout+0x30>
 80034ea:	f7fd ff21 	bl	8001330 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d241      	bcs.n	800357e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	330c      	adds	r3, #12
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	330c      	adds	r3, #12
 8003518:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800351a:	637a      	str	r2, [r7, #52]	; 0x34
 800351c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e5      	bne.n	80034fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3314      	adds	r3, #20
 8003534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	613b      	str	r3, [r7, #16]
   return(result);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	63bb      	str	r3, [r7, #56]	; 0x38
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3314      	adds	r3, #20
 800354c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800354e:	623a      	str	r2, [r7, #32]
 8003550:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003552:	69f9      	ldr	r1, [r7, #28]
 8003554:	6a3a      	ldr	r2, [r7, #32]
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	61bb      	str	r3, [r7, #24]
   return(result);
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1e5      	bne.n	800352e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e00f      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	429a      	cmp	r2, r3
 800359a:	d09f      	beq.n	80034dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3740      	adds	r7, #64	; 0x40
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ac:	b09f      	sub	sp, #124	; 0x7c
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035be:	68d9      	ldr	r1, [r3, #12]
 80035c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	ea40 0301 	orr.w	r3, r0, r1
 80035c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	431a      	orrs	r2, r3
 80035da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	4313      	orrs	r3, r2
 80035e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80035e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035ec:	f021 010c 	bic.w	r1, r1, #12
 80035f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035f6:	430b      	orrs	r3, r1
 80035f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003606:	6999      	ldr	r1, [r3, #24]
 8003608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	ea40 0301 	orr.w	r3, r0, r1
 8003610:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4bc5      	ldr	r3, [pc, #788]	; (800392c <UART_SetConfig+0x384>)
 8003618:	429a      	cmp	r2, r3
 800361a:	d004      	beq.n	8003626 <UART_SetConfig+0x7e>
 800361c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4bc3      	ldr	r3, [pc, #780]	; (8003930 <UART_SetConfig+0x388>)
 8003622:	429a      	cmp	r2, r3
 8003624:	d103      	bne.n	800362e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003626:	f7fe fac9 	bl	8001bbc <HAL_RCC_GetPCLK2Freq>
 800362a:	6778      	str	r0, [r7, #116]	; 0x74
 800362c:	e002      	b.n	8003634 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800362e:	f7fe fab1 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 8003632:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363c:	f040 80b6 	bne.w	80037ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003642:	461c      	mov	r4, r3
 8003644:	f04f 0500 	mov.w	r5, #0
 8003648:	4622      	mov	r2, r4
 800364a:	462b      	mov	r3, r5
 800364c:	1891      	adds	r1, r2, r2
 800364e:	6439      	str	r1, [r7, #64]	; 0x40
 8003650:	415b      	adcs	r3, r3
 8003652:	647b      	str	r3, [r7, #68]	; 0x44
 8003654:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003658:	1912      	adds	r2, r2, r4
 800365a:	eb45 0303 	adc.w	r3, r5, r3
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	00d9      	lsls	r1, r3, #3
 8003668:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800366c:	00d0      	lsls	r0, r2, #3
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	1911      	adds	r1, r2, r4
 8003674:	6639      	str	r1, [r7, #96]	; 0x60
 8003676:	416b      	adcs	r3, r5
 8003678:	667b      	str	r3, [r7, #100]	; 0x64
 800367a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	461a      	mov	r2, r3
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	1891      	adds	r1, r2, r2
 8003686:	63b9      	str	r1, [r7, #56]	; 0x38
 8003688:	415b      	adcs	r3, r3
 800368a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003690:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003694:	f7fc fe0c 	bl	80002b0 <__aeabi_uldivmod>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4ba5      	ldr	r3, [pc, #660]	; (8003934 <UART_SetConfig+0x38c>)
 800369e:	fba3 2302 	umull	r2, r3, r3, r2
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	011e      	lsls	r6, r3, #4
 80036a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a8:	461c      	mov	r4, r3
 80036aa:	f04f 0500 	mov.w	r5, #0
 80036ae:	4622      	mov	r2, r4
 80036b0:	462b      	mov	r3, r5
 80036b2:	1891      	adds	r1, r2, r2
 80036b4:	6339      	str	r1, [r7, #48]	; 0x30
 80036b6:	415b      	adcs	r3, r3
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
 80036ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036be:	1912      	adds	r2, r2, r4
 80036c0:	eb45 0303 	adc.w	r3, r5, r3
 80036c4:	f04f 0000 	mov.w	r0, #0
 80036c8:	f04f 0100 	mov.w	r1, #0
 80036cc:	00d9      	lsls	r1, r3, #3
 80036ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036d2:	00d0      	lsls	r0, r2, #3
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	1911      	adds	r1, r2, r4
 80036da:	65b9      	str	r1, [r7, #88]	; 0x58
 80036dc:	416b      	adcs	r3, r5
 80036de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	461a      	mov	r2, r3
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	1891      	adds	r1, r2, r2
 80036ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80036ee:	415b      	adcs	r3, r3
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80036fa:	f7fc fdd9 	bl	80002b0 <__aeabi_uldivmod>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4b8c      	ldr	r3, [pc, #560]	; (8003934 <UART_SetConfig+0x38c>)
 8003704:	fba3 1302 	umull	r1, r3, r3, r2
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	2164      	movs	r1, #100	; 0x64
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	3332      	adds	r3, #50	; 0x32
 8003716:	4a87      	ldr	r2, [pc, #540]	; (8003934 <UART_SetConfig+0x38c>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003724:	441e      	add	r6, r3
 8003726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003728:	4618      	mov	r0, r3
 800372a:	f04f 0100 	mov.w	r1, #0
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	1894      	adds	r4, r2, r2
 8003734:	623c      	str	r4, [r7, #32]
 8003736:	415b      	adcs	r3, r3
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
 800373a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800373e:	1812      	adds	r2, r2, r0
 8003740:	eb41 0303 	adc.w	r3, r1, r3
 8003744:	f04f 0400 	mov.w	r4, #0
 8003748:	f04f 0500 	mov.w	r5, #0
 800374c:	00dd      	lsls	r5, r3, #3
 800374e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003752:	00d4      	lsls	r4, r2, #3
 8003754:	4622      	mov	r2, r4
 8003756:	462b      	mov	r3, r5
 8003758:	1814      	adds	r4, r2, r0
 800375a:	653c      	str	r4, [r7, #80]	; 0x50
 800375c:	414b      	adcs	r3, r1
 800375e:	657b      	str	r3, [r7, #84]	; 0x54
 8003760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	461a      	mov	r2, r3
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	1891      	adds	r1, r2, r2
 800376c:	61b9      	str	r1, [r7, #24]
 800376e:	415b      	adcs	r3, r3
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003776:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800377a:	f7fc fd99 	bl	80002b0 <__aeabi_uldivmod>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4b6c      	ldr	r3, [pc, #432]	; (8003934 <UART_SetConfig+0x38c>)
 8003784:	fba3 1302 	umull	r1, r3, r3, r2
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	2164      	movs	r1, #100	; 0x64
 800378c:	fb01 f303 	mul.w	r3, r1, r3
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	3332      	adds	r3, #50	; 0x32
 8003796:	4a67      	ldr	r2, [pc, #412]	; (8003934 <UART_SetConfig+0x38c>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	f003 0207 	and.w	r2, r3, #7
 80037a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4432      	add	r2, r6
 80037a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037aa:	e0b9      	b.n	8003920 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ae:	461c      	mov	r4, r3
 80037b0:	f04f 0500 	mov.w	r5, #0
 80037b4:	4622      	mov	r2, r4
 80037b6:	462b      	mov	r3, r5
 80037b8:	1891      	adds	r1, r2, r2
 80037ba:	6139      	str	r1, [r7, #16]
 80037bc:	415b      	adcs	r3, r3
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037c4:	1912      	adds	r2, r2, r4
 80037c6:	eb45 0303 	adc.w	r3, r5, r3
 80037ca:	f04f 0000 	mov.w	r0, #0
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	00d9      	lsls	r1, r3, #3
 80037d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037d8:	00d0      	lsls	r0, r2, #3
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	eb12 0804 	adds.w	r8, r2, r4
 80037e2:	eb43 0905 	adc.w	r9, r3, r5
 80037e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f04f 0100 	mov.w	r1, #0
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	008b      	lsls	r3, r1, #2
 80037fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037fe:	0082      	lsls	r2, r0, #2
 8003800:	4640      	mov	r0, r8
 8003802:	4649      	mov	r1, r9
 8003804:	f7fc fd54 	bl	80002b0 <__aeabi_uldivmod>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4b49      	ldr	r3, [pc, #292]	; (8003934 <UART_SetConfig+0x38c>)
 800380e:	fba3 2302 	umull	r2, r3, r3, r2
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	011e      	lsls	r6, r3, #4
 8003816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003818:	4618      	mov	r0, r3
 800381a:	f04f 0100 	mov.w	r1, #0
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	1894      	adds	r4, r2, r2
 8003824:	60bc      	str	r4, [r7, #8]
 8003826:	415b      	adcs	r3, r3
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800382e:	1812      	adds	r2, r2, r0
 8003830:	eb41 0303 	adc.w	r3, r1, r3
 8003834:	f04f 0400 	mov.w	r4, #0
 8003838:	f04f 0500 	mov.w	r5, #0
 800383c:	00dd      	lsls	r5, r3, #3
 800383e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003842:	00d4      	lsls	r4, r2, #3
 8003844:	4622      	mov	r2, r4
 8003846:	462b      	mov	r3, r5
 8003848:	1814      	adds	r4, r2, r0
 800384a:	64bc      	str	r4, [r7, #72]	; 0x48
 800384c:	414b      	adcs	r3, r1
 800384e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4618      	mov	r0, r3
 8003856:	f04f 0100 	mov.w	r1, #0
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	008b      	lsls	r3, r1, #2
 8003864:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003868:	0082      	lsls	r2, r0, #2
 800386a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800386e:	f7fc fd1f 	bl	80002b0 <__aeabi_uldivmod>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <UART_SetConfig+0x38c>)
 8003878:	fba3 1302 	umull	r1, r3, r3, r2
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	2164      	movs	r1, #100	; 0x64
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	3332      	adds	r3, #50	; 0x32
 800388a:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <UART_SetConfig+0x38c>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003896:	441e      	add	r6, r3
 8003898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800389a:	4618      	mov	r0, r3
 800389c:	f04f 0100 	mov.w	r1, #0
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	1894      	adds	r4, r2, r2
 80038a6:	603c      	str	r4, [r7, #0]
 80038a8:	415b      	adcs	r3, r3
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038b0:	1812      	adds	r2, r2, r0
 80038b2:	eb41 0303 	adc.w	r3, r1, r3
 80038b6:	f04f 0400 	mov.w	r4, #0
 80038ba:	f04f 0500 	mov.w	r5, #0
 80038be:	00dd      	lsls	r5, r3, #3
 80038c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038c4:	00d4      	lsls	r4, r2, #3
 80038c6:	4622      	mov	r2, r4
 80038c8:	462b      	mov	r3, r5
 80038ca:	eb12 0a00 	adds.w	sl, r2, r0
 80038ce:	eb43 0b01 	adc.w	fp, r3, r1
 80038d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	008b      	lsls	r3, r1, #2
 80038e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038ea:	0082      	lsls	r2, r0, #2
 80038ec:	4650      	mov	r0, sl
 80038ee:	4659      	mov	r1, fp
 80038f0:	f7fc fcde 	bl	80002b0 <__aeabi_uldivmod>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <UART_SetConfig+0x38c>)
 80038fa:	fba3 1302 	umull	r1, r3, r3, r2
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2164      	movs	r1, #100	; 0x64
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	3332      	adds	r3, #50	; 0x32
 800390c:	4a09      	ldr	r2, [pc, #36]	; (8003934 <UART_SetConfig+0x38c>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	f003 020f 	and.w	r2, r3, #15
 8003918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4432      	add	r2, r6
 800391e:	609a      	str	r2, [r3, #8]
}
 8003920:	bf00      	nop
 8003922:	377c      	adds	r7, #124	; 0x7c
 8003924:	46bd      	mov	sp, r7
 8003926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392a:	bf00      	nop
 800392c:	40011000 	.word	0x40011000
 8003930:	40011400 	.word	0x40011400
 8003934:	51eb851f 	.word	0x51eb851f

08003938 <__errno>:
 8003938:	4b01      	ldr	r3, [pc, #4]	; (8003940 <__errno+0x8>)
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	2000000c 	.word	0x2000000c

08003944 <__libc_init_array>:
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	4d0d      	ldr	r5, [pc, #52]	; (800397c <__libc_init_array+0x38>)
 8003948:	4c0d      	ldr	r4, [pc, #52]	; (8003980 <__libc_init_array+0x3c>)
 800394a:	1b64      	subs	r4, r4, r5
 800394c:	10a4      	asrs	r4, r4, #2
 800394e:	2600      	movs	r6, #0
 8003950:	42a6      	cmp	r6, r4
 8003952:	d109      	bne.n	8003968 <__libc_init_array+0x24>
 8003954:	4d0b      	ldr	r5, [pc, #44]	; (8003984 <__libc_init_array+0x40>)
 8003956:	4c0c      	ldr	r4, [pc, #48]	; (8003988 <__libc_init_array+0x44>)
 8003958:	f000 ff76 	bl	8004848 <_init>
 800395c:	1b64      	subs	r4, r4, r5
 800395e:	10a4      	asrs	r4, r4, #2
 8003960:	2600      	movs	r6, #0
 8003962:	42a6      	cmp	r6, r4
 8003964:	d105      	bne.n	8003972 <__libc_init_array+0x2e>
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	f855 3b04 	ldr.w	r3, [r5], #4
 800396c:	4798      	blx	r3
 800396e:	3601      	adds	r6, #1
 8003970:	e7ee      	b.n	8003950 <__libc_init_array+0xc>
 8003972:	f855 3b04 	ldr.w	r3, [r5], #4
 8003976:	4798      	blx	r3
 8003978:	3601      	adds	r6, #1
 800397a:	e7f2      	b.n	8003962 <__libc_init_array+0x1e>
 800397c:	08004a20 	.word	0x08004a20
 8003980:	08004a20 	.word	0x08004a20
 8003984:	08004a20 	.word	0x08004a20
 8003988:	08004a24 	.word	0x08004a24

0800398c <memset>:
 800398c:	4402      	add	r2, r0
 800398e:	4603      	mov	r3, r0
 8003990:	4293      	cmp	r3, r2
 8003992:	d100      	bne.n	8003996 <memset+0xa>
 8003994:	4770      	bx	lr
 8003996:	f803 1b01 	strb.w	r1, [r3], #1
 800399a:	e7f9      	b.n	8003990 <memset+0x4>

0800399c <iprintf>:
 800399c:	b40f      	push	{r0, r1, r2, r3}
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <iprintf+0x2c>)
 80039a0:	b513      	push	{r0, r1, r4, lr}
 80039a2:	681c      	ldr	r4, [r3, #0]
 80039a4:	b124      	cbz	r4, 80039b0 <iprintf+0x14>
 80039a6:	69a3      	ldr	r3, [r4, #24]
 80039a8:	b913      	cbnz	r3, 80039b0 <iprintf+0x14>
 80039aa:	4620      	mov	r0, r4
 80039ac:	f000 f9e8 	bl	8003d80 <__sinit>
 80039b0:	ab05      	add	r3, sp, #20
 80039b2:	9a04      	ldr	r2, [sp, #16]
 80039b4:	68a1      	ldr	r1, [r4, #8]
 80039b6:	9301      	str	r3, [sp, #4]
 80039b8:	4620      	mov	r0, r4
 80039ba:	f000 fbb9 	bl	8004130 <_vfiprintf_r>
 80039be:	b002      	add	sp, #8
 80039c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c4:	b004      	add	sp, #16
 80039c6:	4770      	bx	lr
 80039c8:	2000000c 	.word	0x2000000c

080039cc <__swbuf_r>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	460e      	mov	r6, r1
 80039d0:	4614      	mov	r4, r2
 80039d2:	4605      	mov	r5, r0
 80039d4:	b118      	cbz	r0, 80039de <__swbuf_r+0x12>
 80039d6:	6983      	ldr	r3, [r0, #24]
 80039d8:	b90b      	cbnz	r3, 80039de <__swbuf_r+0x12>
 80039da:	f000 f9d1 	bl	8003d80 <__sinit>
 80039de:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <__swbuf_r+0x98>)
 80039e0:	429c      	cmp	r4, r3
 80039e2:	d12b      	bne.n	8003a3c <__swbuf_r+0x70>
 80039e4:	686c      	ldr	r4, [r5, #4]
 80039e6:	69a3      	ldr	r3, [r4, #24]
 80039e8:	60a3      	str	r3, [r4, #8]
 80039ea:	89a3      	ldrh	r3, [r4, #12]
 80039ec:	071a      	lsls	r2, r3, #28
 80039ee:	d52f      	bpl.n	8003a50 <__swbuf_r+0x84>
 80039f0:	6923      	ldr	r3, [r4, #16]
 80039f2:	b36b      	cbz	r3, 8003a50 <__swbuf_r+0x84>
 80039f4:	6923      	ldr	r3, [r4, #16]
 80039f6:	6820      	ldr	r0, [r4, #0]
 80039f8:	1ac0      	subs	r0, r0, r3
 80039fa:	6963      	ldr	r3, [r4, #20]
 80039fc:	b2f6      	uxtb	r6, r6
 80039fe:	4283      	cmp	r3, r0
 8003a00:	4637      	mov	r7, r6
 8003a02:	dc04      	bgt.n	8003a0e <__swbuf_r+0x42>
 8003a04:	4621      	mov	r1, r4
 8003a06:	4628      	mov	r0, r5
 8003a08:	f000 f926 	bl	8003c58 <_fflush_r>
 8003a0c:	bb30      	cbnz	r0, 8003a5c <__swbuf_r+0x90>
 8003a0e:	68a3      	ldr	r3, [r4, #8]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	60a3      	str	r3, [r4, #8]
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	6022      	str	r2, [r4, #0]
 8003a1a:	701e      	strb	r6, [r3, #0]
 8003a1c:	6963      	ldr	r3, [r4, #20]
 8003a1e:	3001      	adds	r0, #1
 8003a20:	4283      	cmp	r3, r0
 8003a22:	d004      	beq.n	8003a2e <__swbuf_r+0x62>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	07db      	lsls	r3, r3, #31
 8003a28:	d506      	bpl.n	8003a38 <__swbuf_r+0x6c>
 8003a2a:	2e0a      	cmp	r6, #10
 8003a2c:	d104      	bne.n	8003a38 <__swbuf_r+0x6c>
 8003a2e:	4621      	mov	r1, r4
 8003a30:	4628      	mov	r0, r5
 8003a32:	f000 f911 	bl	8003c58 <_fflush_r>
 8003a36:	b988      	cbnz	r0, 8003a5c <__swbuf_r+0x90>
 8003a38:	4638      	mov	r0, r7
 8003a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <__swbuf_r+0x9c>)
 8003a3e:	429c      	cmp	r4, r3
 8003a40:	d101      	bne.n	8003a46 <__swbuf_r+0x7a>
 8003a42:	68ac      	ldr	r4, [r5, #8]
 8003a44:	e7cf      	b.n	80039e6 <__swbuf_r+0x1a>
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <__swbuf_r+0xa0>)
 8003a48:	429c      	cmp	r4, r3
 8003a4a:	bf08      	it	eq
 8003a4c:	68ec      	ldreq	r4, [r5, #12]
 8003a4e:	e7ca      	b.n	80039e6 <__swbuf_r+0x1a>
 8003a50:	4621      	mov	r1, r4
 8003a52:	4628      	mov	r0, r5
 8003a54:	f000 f80c 	bl	8003a70 <__swsetup_r>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d0cb      	beq.n	80039f4 <__swbuf_r+0x28>
 8003a5c:	f04f 37ff 	mov.w	r7, #4294967295
 8003a60:	e7ea      	b.n	8003a38 <__swbuf_r+0x6c>
 8003a62:	bf00      	nop
 8003a64:	080049a4 	.word	0x080049a4
 8003a68:	080049c4 	.word	0x080049c4
 8003a6c:	08004984 	.word	0x08004984

08003a70 <__swsetup_r>:
 8003a70:	4b32      	ldr	r3, [pc, #200]	; (8003b3c <__swsetup_r+0xcc>)
 8003a72:	b570      	push	{r4, r5, r6, lr}
 8003a74:	681d      	ldr	r5, [r3, #0]
 8003a76:	4606      	mov	r6, r0
 8003a78:	460c      	mov	r4, r1
 8003a7a:	b125      	cbz	r5, 8003a86 <__swsetup_r+0x16>
 8003a7c:	69ab      	ldr	r3, [r5, #24]
 8003a7e:	b913      	cbnz	r3, 8003a86 <__swsetup_r+0x16>
 8003a80:	4628      	mov	r0, r5
 8003a82:	f000 f97d 	bl	8003d80 <__sinit>
 8003a86:	4b2e      	ldr	r3, [pc, #184]	; (8003b40 <__swsetup_r+0xd0>)
 8003a88:	429c      	cmp	r4, r3
 8003a8a:	d10f      	bne.n	8003aac <__swsetup_r+0x3c>
 8003a8c:	686c      	ldr	r4, [r5, #4]
 8003a8e:	89a3      	ldrh	r3, [r4, #12]
 8003a90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a94:	0719      	lsls	r1, r3, #28
 8003a96:	d42c      	bmi.n	8003af2 <__swsetup_r+0x82>
 8003a98:	06dd      	lsls	r5, r3, #27
 8003a9a:	d411      	bmi.n	8003ac0 <__swsetup_r+0x50>
 8003a9c:	2309      	movs	r3, #9
 8003a9e:	6033      	str	r3, [r6, #0]
 8003aa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003aa4:	81a3      	strh	r3, [r4, #12]
 8003aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aaa:	e03e      	b.n	8003b2a <__swsetup_r+0xba>
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <__swsetup_r+0xd4>)
 8003aae:	429c      	cmp	r4, r3
 8003ab0:	d101      	bne.n	8003ab6 <__swsetup_r+0x46>
 8003ab2:	68ac      	ldr	r4, [r5, #8]
 8003ab4:	e7eb      	b.n	8003a8e <__swsetup_r+0x1e>
 8003ab6:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <__swsetup_r+0xd8>)
 8003ab8:	429c      	cmp	r4, r3
 8003aba:	bf08      	it	eq
 8003abc:	68ec      	ldreq	r4, [r5, #12]
 8003abe:	e7e6      	b.n	8003a8e <__swsetup_r+0x1e>
 8003ac0:	0758      	lsls	r0, r3, #29
 8003ac2:	d512      	bpl.n	8003aea <__swsetup_r+0x7a>
 8003ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ac6:	b141      	cbz	r1, 8003ada <__swsetup_r+0x6a>
 8003ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003acc:	4299      	cmp	r1, r3
 8003ace:	d002      	beq.n	8003ad6 <__swsetup_r+0x66>
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	f000 fa59 	bl	8003f88 <_free_r>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	6363      	str	r3, [r4, #52]	; 0x34
 8003ada:	89a3      	ldrh	r3, [r4, #12]
 8003adc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ae0:	81a3      	strh	r3, [r4, #12]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	6063      	str	r3, [r4, #4]
 8003ae6:	6923      	ldr	r3, [r4, #16]
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	89a3      	ldrh	r3, [r4, #12]
 8003aec:	f043 0308 	orr.w	r3, r3, #8
 8003af0:	81a3      	strh	r3, [r4, #12]
 8003af2:	6923      	ldr	r3, [r4, #16]
 8003af4:	b94b      	cbnz	r3, 8003b0a <__swsetup_r+0x9a>
 8003af6:	89a3      	ldrh	r3, [r4, #12]
 8003af8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b00:	d003      	beq.n	8003b0a <__swsetup_r+0x9a>
 8003b02:	4621      	mov	r1, r4
 8003b04:	4630      	mov	r0, r6
 8003b06:	f000 f9ff 	bl	8003f08 <__smakebuf_r>
 8003b0a:	89a0      	ldrh	r0, [r4, #12]
 8003b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b10:	f010 0301 	ands.w	r3, r0, #1
 8003b14:	d00a      	beq.n	8003b2c <__swsetup_r+0xbc>
 8003b16:	2300      	movs	r3, #0
 8003b18:	60a3      	str	r3, [r4, #8]
 8003b1a:	6963      	ldr	r3, [r4, #20]
 8003b1c:	425b      	negs	r3, r3
 8003b1e:	61a3      	str	r3, [r4, #24]
 8003b20:	6923      	ldr	r3, [r4, #16]
 8003b22:	b943      	cbnz	r3, 8003b36 <__swsetup_r+0xc6>
 8003b24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b28:	d1ba      	bne.n	8003aa0 <__swsetup_r+0x30>
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
 8003b2c:	0781      	lsls	r1, r0, #30
 8003b2e:	bf58      	it	pl
 8003b30:	6963      	ldrpl	r3, [r4, #20]
 8003b32:	60a3      	str	r3, [r4, #8]
 8003b34:	e7f4      	b.n	8003b20 <__swsetup_r+0xb0>
 8003b36:	2000      	movs	r0, #0
 8003b38:	e7f7      	b.n	8003b2a <__swsetup_r+0xba>
 8003b3a:	bf00      	nop
 8003b3c:	2000000c 	.word	0x2000000c
 8003b40:	080049a4 	.word	0x080049a4
 8003b44:	080049c4 	.word	0x080049c4
 8003b48:	08004984 	.word	0x08004984

08003b4c <__sflush_r>:
 8003b4c:	898a      	ldrh	r2, [r1, #12]
 8003b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b52:	4605      	mov	r5, r0
 8003b54:	0710      	lsls	r0, r2, #28
 8003b56:	460c      	mov	r4, r1
 8003b58:	d458      	bmi.n	8003c0c <__sflush_r+0xc0>
 8003b5a:	684b      	ldr	r3, [r1, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	dc05      	bgt.n	8003b6c <__sflush_r+0x20>
 8003b60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	dc02      	bgt.n	8003b6c <__sflush_r+0x20>
 8003b66:	2000      	movs	r0, #0
 8003b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b6e:	2e00      	cmp	r6, #0
 8003b70:	d0f9      	beq.n	8003b66 <__sflush_r+0x1a>
 8003b72:	2300      	movs	r3, #0
 8003b74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b78:	682f      	ldr	r7, [r5, #0]
 8003b7a:	602b      	str	r3, [r5, #0]
 8003b7c:	d032      	beq.n	8003be4 <__sflush_r+0x98>
 8003b7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b80:	89a3      	ldrh	r3, [r4, #12]
 8003b82:	075a      	lsls	r2, r3, #29
 8003b84:	d505      	bpl.n	8003b92 <__sflush_r+0x46>
 8003b86:	6863      	ldr	r3, [r4, #4]
 8003b88:	1ac0      	subs	r0, r0, r3
 8003b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b8c:	b10b      	cbz	r3, 8003b92 <__sflush_r+0x46>
 8003b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b90:	1ac0      	subs	r0, r0, r3
 8003b92:	2300      	movs	r3, #0
 8003b94:	4602      	mov	r2, r0
 8003b96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b98:	6a21      	ldr	r1, [r4, #32]
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	47b0      	blx	r6
 8003b9e:	1c43      	adds	r3, r0, #1
 8003ba0:	89a3      	ldrh	r3, [r4, #12]
 8003ba2:	d106      	bne.n	8003bb2 <__sflush_r+0x66>
 8003ba4:	6829      	ldr	r1, [r5, #0]
 8003ba6:	291d      	cmp	r1, #29
 8003ba8:	d82c      	bhi.n	8003c04 <__sflush_r+0xb8>
 8003baa:	4a2a      	ldr	r2, [pc, #168]	; (8003c54 <__sflush_r+0x108>)
 8003bac:	40ca      	lsrs	r2, r1
 8003bae:	07d6      	lsls	r6, r2, #31
 8003bb0:	d528      	bpl.n	8003c04 <__sflush_r+0xb8>
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	6062      	str	r2, [r4, #4]
 8003bb6:	04d9      	lsls	r1, r3, #19
 8003bb8:	6922      	ldr	r2, [r4, #16]
 8003bba:	6022      	str	r2, [r4, #0]
 8003bbc:	d504      	bpl.n	8003bc8 <__sflush_r+0x7c>
 8003bbe:	1c42      	adds	r2, r0, #1
 8003bc0:	d101      	bne.n	8003bc6 <__sflush_r+0x7a>
 8003bc2:	682b      	ldr	r3, [r5, #0]
 8003bc4:	b903      	cbnz	r3, 8003bc8 <__sflush_r+0x7c>
 8003bc6:	6560      	str	r0, [r4, #84]	; 0x54
 8003bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bca:	602f      	str	r7, [r5, #0]
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	d0ca      	beq.n	8003b66 <__sflush_r+0x1a>
 8003bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bd4:	4299      	cmp	r1, r3
 8003bd6:	d002      	beq.n	8003bde <__sflush_r+0x92>
 8003bd8:	4628      	mov	r0, r5
 8003bda:	f000 f9d5 	bl	8003f88 <_free_r>
 8003bde:	2000      	movs	r0, #0
 8003be0:	6360      	str	r0, [r4, #52]	; 0x34
 8003be2:	e7c1      	b.n	8003b68 <__sflush_r+0x1c>
 8003be4:	6a21      	ldr	r1, [r4, #32]
 8003be6:	2301      	movs	r3, #1
 8003be8:	4628      	mov	r0, r5
 8003bea:	47b0      	blx	r6
 8003bec:	1c41      	adds	r1, r0, #1
 8003bee:	d1c7      	bne.n	8003b80 <__sflush_r+0x34>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0c4      	beq.n	8003b80 <__sflush_r+0x34>
 8003bf6:	2b1d      	cmp	r3, #29
 8003bf8:	d001      	beq.n	8003bfe <__sflush_r+0xb2>
 8003bfa:	2b16      	cmp	r3, #22
 8003bfc:	d101      	bne.n	8003c02 <__sflush_r+0xb6>
 8003bfe:	602f      	str	r7, [r5, #0]
 8003c00:	e7b1      	b.n	8003b66 <__sflush_r+0x1a>
 8003c02:	89a3      	ldrh	r3, [r4, #12]
 8003c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c08:	81a3      	strh	r3, [r4, #12]
 8003c0a:	e7ad      	b.n	8003b68 <__sflush_r+0x1c>
 8003c0c:	690f      	ldr	r7, [r1, #16]
 8003c0e:	2f00      	cmp	r7, #0
 8003c10:	d0a9      	beq.n	8003b66 <__sflush_r+0x1a>
 8003c12:	0793      	lsls	r3, r2, #30
 8003c14:	680e      	ldr	r6, [r1, #0]
 8003c16:	bf08      	it	eq
 8003c18:	694b      	ldreq	r3, [r1, #20]
 8003c1a:	600f      	str	r7, [r1, #0]
 8003c1c:	bf18      	it	ne
 8003c1e:	2300      	movne	r3, #0
 8003c20:	eba6 0807 	sub.w	r8, r6, r7
 8003c24:	608b      	str	r3, [r1, #8]
 8003c26:	f1b8 0f00 	cmp.w	r8, #0
 8003c2a:	dd9c      	ble.n	8003b66 <__sflush_r+0x1a>
 8003c2c:	6a21      	ldr	r1, [r4, #32]
 8003c2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c30:	4643      	mov	r3, r8
 8003c32:	463a      	mov	r2, r7
 8003c34:	4628      	mov	r0, r5
 8003c36:	47b0      	blx	r6
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	dc06      	bgt.n	8003c4a <__sflush_r+0xfe>
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c42:	81a3      	strh	r3, [r4, #12]
 8003c44:	f04f 30ff 	mov.w	r0, #4294967295
 8003c48:	e78e      	b.n	8003b68 <__sflush_r+0x1c>
 8003c4a:	4407      	add	r7, r0
 8003c4c:	eba8 0800 	sub.w	r8, r8, r0
 8003c50:	e7e9      	b.n	8003c26 <__sflush_r+0xda>
 8003c52:	bf00      	nop
 8003c54:	20400001 	.word	0x20400001

08003c58 <_fflush_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	690b      	ldr	r3, [r1, #16]
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	460c      	mov	r4, r1
 8003c60:	b913      	cbnz	r3, 8003c68 <_fflush_r+0x10>
 8003c62:	2500      	movs	r5, #0
 8003c64:	4628      	mov	r0, r5
 8003c66:	bd38      	pop	{r3, r4, r5, pc}
 8003c68:	b118      	cbz	r0, 8003c72 <_fflush_r+0x1a>
 8003c6a:	6983      	ldr	r3, [r0, #24]
 8003c6c:	b90b      	cbnz	r3, 8003c72 <_fflush_r+0x1a>
 8003c6e:	f000 f887 	bl	8003d80 <__sinit>
 8003c72:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <_fflush_r+0x6c>)
 8003c74:	429c      	cmp	r4, r3
 8003c76:	d11b      	bne.n	8003cb0 <_fflush_r+0x58>
 8003c78:	686c      	ldr	r4, [r5, #4]
 8003c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0ef      	beq.n	8003c62 <_fflush_r+0xa>
 8003c82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c84:	07d0      	lsls	r0, r2, #31
 8003c86:	d404      	bmi.n	8003c92 <_fflush_r+0x3a>
 8003c88:	0599      	lsls	r1, r3, #22
 8003c8a:	d402      	bmi.n	8003c92 <_fflush_r+0x3a>
 8003c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c8e:	f000 f915 	bl	8003ebc <__retarget_lock_acquire_recursive>
 8003c92:	4628      	mov	r0, r5
 8003c94:	4621      	mov	r1, r4
 8003c96:	f7ff ff59 	bl	8003b4c <__sflush_r>
 8003c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c9c:	07da      	lsls	r2, r3, #31
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	d4e0      	bmi.n	8003c64 <_fflush_r+0xc>
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	059b      	lsls	r3, r3, #22
 8003ca6:	d4dd      	bmi.n	8003c64 <_fflush_r+0xc>
 8003ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003caa:	f000 f908 	bl	8003ebe <__retarget_lock_release_recursive>
 8003cae:	e7d9      	b.n	8003c64 <_fflush_r+0xc>
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <_fflush_r+0x70>)
 8003cb2:	429c      	cmp	r4, r3
 8003cb4:	d101      	bne.n	8003cba <_fflush_r+0x62>
 8003cb6:	68ac      	ldr	r4, [r5, #8]
 8003cb8:	e7df      	b.n	8003c7a <_fflush_r+0x22>
 8003cba:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <_fflush_r+0x74>)
 8003cbc:	429c      	cmp	r4, r3
 8003cbe:	bf08      	it	eq
 8003cc0:	68ec      	ldreq	r4, [r5, #12]
 8003cc2:	e7da      	b.n	8003c7a <_fflush_r+0x22>
 8003cc4:	080049a4 	.word	0x080049a4
 8003cc8:	080049c4 	.word	0x080049c4
 8003ccc:	08004984 	.word	0x08004984

08003cd0 <std>:
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	b510      	push	{r4, lr}
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8003cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cde:	6083      	str	r3, [r0, #8]
 8003ce0:	8181      	strh	r1, [r0, #12]
 8003ce2:	6643      	str	r3, [r0, #100]	; 0x64
 8003ce4:	81c2      	strh	r2, [r0, #14]
 8003ce6:	6183      	str	r3, [r0, #24]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	2208      	movs	r2, #8
 8003cec:	305c      	adds	r0, #92	; 0x5c
 8003cee:	f7ff fe4d 	bl	800398c <memset>
 8003cf2:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <std+0x38>)
 8003cf4:	6263      	str	r3, [r4, #36]	; 0x24
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <std+0x3c>)
 8003cf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <std+0x40>)
 8003cfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cfe:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <std+0x44>)
 8003d00:	6224      	str	r4, [r4, #32]
 8003d02:	6323      	str	r3, [r4, #48]	; 0x30
 8003d04:	bd10      	pop	{r4, pc}
 8003d06:	bf00      	nop
 8003d08:	080046d9 	.word	0x080046d9
 8003d0c:	080046fb 	.word	0x080046fb
 8003d10:	08004733 	.word	0x08004733
 8003d14:	08004757 	.word	0x08004757

08003d18 <_cleanup_r>:
 8003d18:	4901      	ldr	r1, [pc, #4]	; (8003d20 <_cleanup_r+0x8>)
 8003d1a:	f000 b8af 	b.w	8003e7c <_fwalk_reent>
 8003d1e:	bf00      	nop
 8003d20:	08003c59 	.word	0x08003c59

08003d24 <__sfmoreglue>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	1e4a      	subs	r2, r1, #1
 8003d28:	2568      	movs	r5, #104	; 0x68
 8003d2a:	4355      	muls	r5, r2
 8003d2c:	460e      	mov	r6, r1
 8003d2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d32:	f000 f979 	bl	8004028 <_malloc_r>
 8003d36:	4604      	mov	r4, r0
 8003d38:	b140      	cbz	r0, 8003d4c <__sfmoreglue+0x28>
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	e9c0 1600 	strd	r1, r6, [r0]
 8003d40:	300c      	adds	r0, #12
 8003d42:	60a0      	str	r0, [r4, #8]
 8003d44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d48:	f7ff fe20 	bl	800398c <memset>
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}

08003d50 <__sfp_lock_acquire>:
 8003d50:	4801      	ldr	r0, [pc, #4]	; (8003d58 <__sfp_lock_acquire+0x8>)
 8003d52:	f000 b8b3 	b.w	8003ebc <__retarget_lock_acquire_recursive>
 8003d56:	bf00      	nop
 8003d58:	200001c4 	.word	0x200001c4

08003d5c <__sfp_lock_release>:
 8003d5c:	4801      	ldr	r0, [pc, #4]	; (8003d64 <__sfp_lock_release+0x8>)
 8003d5e:	f000 b8ae 	b.w	8003ebe <__retarget_lock_release_recursive>
 8003d62:	bf00      	nop
 8003d64:	200001c4 	.word	0x200001c4

08003d68 <__sinit_lock_acquire>:
 8003d68:	4801      	ldr	r0, [pc, #4]	; (8003d70 <__sinit_lock_acquire+0x8>)
 8003d6a:	f000 b8a7 	b.w	8003ebc <__retarget_lock_acquire_recursive>
 8003d6e:	bf00      	nop
 8003d70:	200001bf 	.word	0x200001bf

08003d74 <__sinit_lock_release>:
 8003d74:	4801      	ldr	r0, [pc, #4]	; (8003d7c <__sinit_lock_release+0x8>)
 8003d76:	f000 b8a2 	b.w	8003ebe <__retarget_lock_release_recursive>
 8003d7a:	bf00      	nop
 8003d7c:	200001bf 	.word	0x200001bf

08003d80 <__sinit>:
 8003d80:	b510      	push	{r4, lr}
 8003d82:	4604      	mov	r4, r0
 8003d84:	f7ff fff0 	bl	8003d68 <__sinit_lock_acquire>
 8003d88:	69a3      	ldr	r3, [r4, #24]
 8003d8a:	b11b      	cbz	r3, 8003d94 <__sinit+0x14>
 8003d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d90:	f7ff bff0 	b.w	8003d74 <__sinit_lock_release>
 8003d94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d98:	6523      	str	r3, [r4, #80]	; 0x50
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <__sinit+0x68>)
 8003d9c:	4a13      	ldr	r2, [pc, #76]	; (8003dec <__sinit+0x6c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003da2:	42a3      	cmp	r3, r4
 8003da4:	bf04      	itt	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	61a3      	streq	r3, [r4, #24]
 8003daa:	4620      	mov	r0, r4
 8003dac:	f000 f820 	bl	8003df0 <__sfp>
 8003db0:	6060      	str	r0, [r4, #4]
 8003db2:	4620      	mov	r0, r4
 8003db4:	f000 f81c 	bl	8003df0 <__sfp>
 8003db8:	60a0      	str	r0, [r4, #8]
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f000 f818 	bl	8003df0 <__sfp>
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	60e0      	str	r0, [r4, #12]
 8003dc4:	2104      	movs	r1, #4
 8003dc6:	6860      	ldr	r0, [r4, #4]
 8003dc8:	f7ff ff82 	bl	8003cd0 <std>
 8003dcc:	68a0      	ldr	r0, [r4, #8]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	2109      	movs	r1, #9
 8003dd2:	f7ff ff7d 	bl	8003cd0 <std>
 8003dd6:	68e0      	ldr	r0, [r4, #12]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	2112      	movs	r1, #18
 8003ddc:	f7ff ff78 	bl	8003cd0 <std>
 8003de0:	2301      	movs	r3, #1
 8003de2:	61a3      	str	r3, [r4, #24]
 8003de4:	e7d2      	b.n	8003d8c <__sinit+0xc>
 8003de6:	bf00      	nop
 8003de8:	08004980 	.word	0x08004980
 8003dec:	08003d19 	.word	0x08003d19

08003df0 <__sfp>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	4607      	mov	r7, r0
 8003df4:	f7ff ffac 	bl	8003d50 <__sfp_lock_acquire>
 8003df8:	4b1e      	ldr	r3, [pc, #120]	; (8003e74 <__sfp+0x84>)
 8003dfa:	681e      	ldr	r6, [r3, #0]
 8003dfc:	69b3      	ldr	r3, [r6, #24]
 8003dfe:	b913      	cbnz	r3, 8003e06 <__sfp+0x16>
 8003e00:	4630      	mov	r0, r6
 8003e02:	f7ff ffbd 	bl	8003d80 <__sinit>
 8003e06:	3648      	adds	r6, #72	; 0x48
 8003e08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	d503      	bpl.n	8003e18 <__sfp+0x28>
 8003e10:	6833      	ldr	r3, [r6, #0]
 8003e12:	b30b      	cbz	r3, 8003e58 <__sfp+0x68>
 8003e14:	6836      	ldr	r6, [r6, #0]
 8003e16:	e7f7      	b.n	8003e08 <__sfp+0x18>
 8003e18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e1c:	b9d5      	cbnz	r5, 8003e54 <__sfp+0x64>
 8003e1e:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <__sfp+0x88>)
 8003e20:	60e3      	str	r3, [r4, #12]
 8003e22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e26:	6665      	str	r5, [r4, #100]	; 0x64
 8003e28:	f000 f847 	bl	8003eba <__retarget_lock_init_recursive>
 8003e2c:	f7ff ff96 	bl	8003d5c <__sfp_lock_release>
 8003e30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e38:	6025      	str	r5, [r4, #0]
 8003e3a:	61a5      	str	r5, [r4, #24]
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	4629      	mov	r1, r5
 8003e40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e44:	f7ff fda2 	bl	800398c <memset>
 8003e48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e50:	4620      	mov	r0, r4
 8003e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e54:	3468      	adds	r4, #104	; 0x68
 8003e56:	e7d9      	b.n	8003e0c <__sfp+0x1c>
 8003e58:	2104      	movs	r1, #4
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	f7ff ff62 	bl	8003d24 <__sfmoreglue>
 8003e60:	4604      	mov	r4, r0
 8003e62:	6030      	str	r0, [r6, #0]
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d1d5      	bne.n	8003e14 <__sfp+0x24>
 8003e68:	f7ff ff78 	bl	8003d5c <__sfp_lock_release>
 8003e6c:	230c      	movs	r3, #12
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	e7ee      	b.n	8003e50 <__sfp+0x60>
 8003e72:	bf00      	nop
 8003e74:	08004980 	.word	0x08004980
 8003e78:	ffff0001 	.word	0xffff0001

08003e7c <_fwalk_reent>:
 8003e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e80:	4606      	mov	r6, r0
 8003e82:	4688      	mov	r8, r1
 8003e84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e88:	2700      	movs	r7, #0
 8003e8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e8e:	f1b9 0901 	subs.w	r9, r9, #1
 8003e92:	d505      	bpl.n	8003ea0 <_fwalk_reent+0x24>
 8003e94:	6824      	ldr	r4, [r4, #0]
 8003e96:	2c00      	cmp	r4, #0
 8003e98:	d1f7      	bne.n	8003e8a <_fwalk_reent+0xe>
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ea0:	89ab      	ldrh	r3, [r5, #12]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d907      	bls.n	8003eb6 <_fwalk_reent+0x3a>
 8003ea6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	d003      	beq.n	8003eb6 <_fwalk_reent+0x3a>
 8003eae:	4629      	mov	r1, r5
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	47c0      	blx	r8
 8003eb4:	4307      	orrs	r7, r0
 8003eb6:	3568      	adds	r5, #104	; 0x68
 8003eb8:	e7e9      	b.n	8003e8e <_fwalk_reent+0x12>

08003eba <__retarget_lock_init_recursive>:
 8003eba:	4770      	bx	lr

08003ebc <__retarget_lock_acquire_recursive>:
 8003ebc:	4770      	bx	lr

08003ebe <__retarget_lock_release_recursive>:
 8003ebe:	4770      	bx	lr

08003ec0 <__swhatbuf_r>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	460e      	mov	r6, r1
 8003ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	b096      	sub	sp, #88	; 0x58
 8003ecc:	4614      	mov	r4, r2
 8003ece:	461d      	mov	r5, r3
 8003ed0:	da07      	bge.n	8003ee2 <__swhatbuf_r+0x22>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	602b      	str	r3, [r5, #0]
 8003ed6:	89b3      	ldrh	r3, [r6, #12]
 8003ed8:	061a      	lsls	r2, r3, #24
 8003eda:	d410      	bmi.n	8003efe <__swhatbuf_r+0x3e>
 8003edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee0:	e00e      	b.n	8003f00 <__swhatbuf_r+0x40>
 8003ee2:	466a      	mov	r2, sp
 8003ee4:	f000 fc5e 	bl	80047a4 <_fstat_r>
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	dbf2      	blt.n	8003ed2 <__swhatbuf_r+0x12>
 8003eec:	9a01      	ldr	r2, [sp, #4]
 8003eee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ef2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ef6:	425a      	negs	r2, r3
 8003ef8:	415a      	adcs	r2, r3
 8003efa:	602a      	str	r2, [r5, #0]
 8003efc:	e7ee      	b.n	8003edc <__swhatbuf_r+0x1c>
 8003efe:	2340      	movs	r3, #64	; 0x40
 8003f00:	2000      	movs	r0, #0
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	b016      	add	sp, #88	; 0x58
 8003f06:	bd70      	pop	{r4, r5, r6, pc}

08003f08 <__smakebuf_r>:
 8003f08:	898b      	ldrh	r3, [r1, #12]
 8003f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f0c:	079d      	lsls	r5, r3, #30
 8003f0e:	4606      	mov	r6, r0
 8003f10:	460c      	mov	r4, r1
 8003f12:	d507      	bpl.n	8003f24 <__smakebuf_r+0x1c>
 8003f14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	6123      	str	r3, [r4, #16]
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	6163      	str	r3, [r4, #20]
 8003f20:	b002      	add	sp, #8
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	ab01      	add	r3, sp, #4
 8003f26:	466a      	mov	r2, sp
 8003f28:	f7ff ffca 	bl	8003ec0 <__swhatbuf_r>
 8003f2c:	9900      	ldr	r1, [sp, #0]
 8003f2e:	4605      	mov	r5, r0
 8003f30:	4630      	mov	r0, r6
 8003f32:	f000 f879 	bl	8004028 <_malloc_r>
 8003f36:	b948      	cbnz	r0, 8003f4c <__smakebuf_r+0x44>
 8003f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f3c:	059a      	lsls	r2, r3, #22
 8003f3e:	d4ef      	bmi.n	8003f20 <__smakebuf_r+0x18>
 8003f40:	f023 0303 	bic.w	r3, r3, #3
 8003f44:	f043 0302 	orr.w	r3, r3, #2
 8003f48:	81a3      	strh	r3, [r4, #12]
 8003f4a:	e7e3      	b.n	8003f14 <__smakebuf_r+0xc>
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <__smakebuf_r+0x7c>)
 8003f4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	6020      	str	r0, [r4, #0]
 8003f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f58:	81a3      	strh	r3, [r4, #12]
 8003f5a:	9b00      	ldr	r3, [sp, #0]
 8003f5c:	6163      	str	r3, [r4, #20]
 8003f5e:	9b01      	ldr	r3, [sp, #4]
 8003f60:	6120      	str	r0, [r4, #16]
 8003f62:	b15b      	cbz	r3, 8003f7c <__smakebuf_r+0x74>
 8003f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f000 fc2d 	bl	80047c8 <_isatty_r>
 8003f6e:	b128      	cbz	r0, 8003f7c <__smakebuf_r+0x74>
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	f023 0303 	bic.w	r3, r3, #3
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	81a3      	strh	r3, [r4, #12]
 8003f7c:	89a0      	ldrh	r0, [r4, #12]
 8003f7e:	4305      	orrs	r5, r0
 8003f80:	81a5      	strh	r5, [r4, #12]
 8003f82:	e7cd      	b.n	8003f20 <__smakebuf_r+0x18>
 8003f84:	08003d19 	.word	0x08003d19

08003f88 <_free_r>:
 8003f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f8a:	2900      	cmp	r1, #0
 8003f8c:	d048      	beq.n	8004020 <_free_r+0x98>
 8003f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f92:	9001      	str	r0, [sp, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f1a1 0404 	sub.w	r4, r1, #4
 8003f9a:	bfb8      	it	lt
 8003f9c:	18e4      	addlt	r4, r4, r3
 8003f9e:	f000 fc35 	bl	800480c <__malloc_lock>
 8003fa2:	4a20      	ldr	r2, [pc, #128]	; (8004024 <_free_r+0x9c>)
 8003fa4:	9801      	ldr	r0, [sp, #4]
 8003fa6:	6813      	ldr	r3, [r2, #0]
 8003fa8:	4615      	mov	r5, r2
 8003faa:	b933      	cbnz	r3, 8003fba <_free_r+0x32>
 8003fac:	6063      	str	r3, [r4, #4]
 8003fae:	6014      	str	r4, [r2, #0]
 8003fb0:	b003      	add	sp, #12
 8003fb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fb6:	f000 bc2f 	b.w	8004818 <__malloc_unlock>
 8003fba:	42a3      	cmp	r3, r4
 8003fbc:	d90b      	bls.n	8003fd6 <_free_r+0x4e>
 8003fbe:	6821      	ldr	r1, [r4, #0]
 8003fc0:	1862      	adds	r2, r4, r1
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	bf04      	itt	eq
 8003fc6:	681a      	ldreq	r2, [r3, #0]
 8003fc8:	685b      	ldreq	r3, [r3, #4]
 8003fca:	6063      	str	r3, [r4, #4]
 8003fcc:	bf04      	itt	eq
 8003fce:	1852      	addeq	r2, r2, r1
 8003fd0:	6022      	streq	r2, [r4, #0]
 8003fd2:	602c      	str	r4, [r5, #0]
 8003fd4:	e7ec      	b.n	8003fb0 <_free_r+0x28>
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	b10b      	cbz	r3, 8003fe0 <_free_r+0x58>
 8003fdc:	42a3      	cmp	r3, r4
 8003fde:	d9fa      	bls.n	8003fd6 <_free_r+0x4e>
 8003fe0:	6811      	ldr	r1, [r2, #0]
 8003fe2:	1855      	adds	r5, r2, r1
 8003fe4:	42a5      	cmp	r5, r4
 8003fe6:	d10b      	bne.n	8004000 <_free_r+0x78>
 8003fe8:	6824      	ldr	r4, [r4, #0]
 8003fea:	4421      	add	r1, r4
 8003fec:	1854      	adds	r4, r2, r1
 8003fee:	42a3      	cmp	r3, r4
 8003ff0:	6011      	str	r1, [r2, #0]
 8003ff2:	d1dd      	bne.n	8003fb0 <_free_r+0x28>
 8003ff4:	681c      	ldr	r4, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	6053      	str	r3, [r2, #4]
 8003ffa:	4421      	add	r1, r4
 8003ffc:	6011      	str	r1, [r2, #0]
 8003ffe:	e7d7      	b.n	8003fb0 <_free_r+0x28>
 8004000:	d902      	bls.n	8004008 <_free_r+0x80>
 8004002:	230c      	movs	r3, #12
 8004004:	6003      	str	r3, [r0, #0]
 8004006:	e7d3      	b.n	8003fb0 <_free_r+0x28>
 8004008:	6825      	ldr	r5, [r4, #0]
 800400a:	1961      	adds	r1, r4, r5
 800400c:	428b      	cmp	r3, r1
 800400e:	bf04      	itt	eq
 8004010:	6819      	ldreq	r1, [r3, #0]
 8004012:	685b      	ldreq	r3, [r3, #4]
 8004014:	6063      	str	r3, [r4, #4]
 8004016:	bf04      	itt	eq
 8004018:	1949      	addeq	r1, r1, r5
 800401a:	6021      	streq	r1, [r4, #0]
 800401c:	6054      	str	r4, [r2, #4]
 800401e:	e7c7      	b.n	8003fb0 <_free_r+0x28>
 8004020:	b003      	add	sp, #12
 8004022:	bd30      	pop	{r4, r5, pc}
 8004024:	20000090 	.word	0x20000090

08004028 <_malloc_r>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	1ccd      	adds	r5, r1, #3
 800402c:	f025 0503 	bic.w	r5, r5, #3
 8004030:	3508      	adds	r5, #8
 8004032:	2d0c      	cmp	r5, #12
 8004034:	bf38      	it	cc
 8004036:	250c      	movcc	r5, #12
 8004038:	2d00      	cmp	r5, #0
 800403a:	4606      	mov	r6, r0
 800403c:	db01      	blt.n	8004042 <_malloc_r+0x1a>
 800403e:	42a9      	cmp	r1, r5
 8004040:	d903      	bls.n	800404a <_malloc_r+0x22>
 8004042:	230c      	movs	r3, #12
 8004044:	6033      	str	r3, [r6, #0]
 8004046:	2000      	movs	r0, #0
 8004048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800404a:	f000 fbdf 	bl	800480c <__malloc_lock>
 800404e:	4921      	ldr	r1, [pc, #132]	; (80040d4 <_malloc_r+0xac>)
 8004050:	680a      	ldr	r2, [r1, #0]
 8004052:	4614      	mov	r4, r2
 8004054:	b99c      	cbnz	r4, 800407e <_malloc_r+0x56>
 8004056:	4f20      	ldr	r7, [pc, #128]	; (80040d8 <_malloc_r+0xb0>)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	b923      	cbnz	r3, 8004066 <_malloc_r+0x3e>
 800405c:	4621      	mov	r1, r4
 800405e:	4630      	mov	r0, r6
 8004060:	f000 fb2a 	bl	80046b8 <_sbrk_r>
 8004064:	6038      	str	r0, [r7, #0]
 8004066:	4629      	mov	r1, r5
 8004068:	4630      	mov	r0, r6
 800406a:	f000 fb25 	bl	80046b8 <_sbrk_r>
 800406e:	1c43      	adds	r3, r0, #1
 8004070:	d123      	bne.n	80040ba <_malloc_r+0x92>
 8004072:	230c      	movs	r3, #12
 8004074:	6033      	str	r3, [r6, #0]
 8004076:	4630      	mov	r0, r6
 8004078:	f000 fbce 	bl	8004818 <__malloc_unlock>
 800407c:	e7e3      	b.n	8004046 <_malloc_r+0x1e>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	1b5b      	subs	r3, r3, r5
 8004082:	d417      	bmi.n	80040b4 <_malloc_r+0x8c>
 8004084:	2b0b      	cmp	r3, #11
 8004086:	d903      	bls.n	8004090 <_malloc_r+0x68>
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	441c      	add	r4, r3
 800408c:	6025      	str	r5, [r4, #0]
 800408e:	e004      	b.n	800409a <_malloc_r+0x72>
 8004090:	6863      	ldr	r3, [r4, #4]
 8004092:	42a2      	cmp	r2, r4
 8004094:	bf0c      	ite	eq
 8004096:	600b      	streq	r3, [r1, #0]
 8004098:	6053      	strne	r3, [r2, #4]
 800409a:	4630      	mov	r0, r6
 800409c:	f000 fbbc 	bl	8004818 <__malloc_unlock>
 80040a0:	f104 000b 	add.w	r0, r4, #11
 80040a4:	1d23      	adds	r3, r4, #4
 80040a6:	f020 0007 	bic.w	r0, r0, #7
 80040aa:	1ac2      	subs	r2, r0, r3
 80040ac:	d0cc      	beq.n	8004048 <_malloc_r+0x20>
 80040ae:	1a1b      	subs	r3, r3, r0
 80040b0:	50a3      	str	r3, [r4, r2]
 80040b2:	e7c9      	b.n	8004048 <_malloc_r+0x20>
 80040b4:	4622      	mov	r2, r4
 80040b6:	6864      	ldr	r4, [r4, #4]
 80040b8:	e7cc      	b.n	8004054 <_malloc_r+0x2c>
 80040ba:	1cc4      	adds	r4, r0, #3
 80040bc:	f024 0403 	bic.w	r4, r4, #3
 80040c0:	42a0      	cmp	r0, r4
 80040c2:	d0e3      	beq.n	800408c <_malloc_r+0x64>
 80040c4:	1a21      	subs	r1, r4, r0
 80040c6:	4630      	mov	r0, r6
 80040c8:	f000 faf6 	bl	80046b8 <_sbrk_r>
 80040cc:	3001      	adds	r0, #1
 80040ce:	d1dd      	bne.n	800408c <_malloc_r+0x64>
 80040d0:	e7cf      	b.n	8004072 <_malloc_r+0x4a>
 80040d2:	bf00      	nop
 80040d4:	20000090 	.word	0x20000090
 80040d8:	20000094 	.word	0x20000094

080040dc <__sfputc_r>:
 80040dc:	6893      	ldr	r3, [r2, #8]
 80040de:	3b01      	subs	r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	b410      	push	{r4}
 80040e4:	6093      	str	r3, [r2, #8]
 80040e6:	da08      	bge.n	80040fa <__sfputc_r+0x1e>
 80040e8:	6994      	ldr	r4, [r2, #24]
 80040ea:	42a3      	cmp	r3, r4
 80040ec:	db01      	blt.n	80040f2 <__sfputc_r+0x16>
 80040ee:	290a      	cmp	r1, #10
 80040f0:	d103      	bne.n	80040fa <__sfputc_r+0x1e>
 80040f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040f6:	f7ff bc69 	b.w	80039cc <__swbuf_r>
 80040fa:	6813      	ldr	r3, [r2, #0]
 80040fc:	1c58      	adds	r0, r3, #1
 80040fe:	6010      	str	r0, [r2, #0]
 8004100:	7019      	strb	r1, [r3, #0]
 8004102:	4608      	mov	r0, r1
 8004104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004108:	4770      	bx	lr

0800410a <__sfputs_r>:
 800410a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410c:	4606      	mov	r6, r0
 800410e:	460f      	mov	r7, r1
 8004110:	4614      	mov	r4, r2
 8004112:	18d5      	adds	r5, r2, r3
 8004114:	42ac      	cmp	r4, r5
 8004116:	d101      	bne.n	800411c <__sfputs_r+0x12>
 8004118:	2000      	movs	r0, #0
 800411a:	e007      	b.n	800412c <__sfputs_r+0x22>
 800411c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004120:	463a      	mov	r2, r7
 8004122:	4630      	mov	r0, r6
 8004124:	f7ff ffda 	bl	80040dc <__sfputc_r>
 8004128:	1c43      	adds	r3, r0, #1
 800412a:	d1f3      	bne.n	8004114 <__sfputs_r+0xa>
 800412c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004130 <_vfiprintf_r>:
 8004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004134:	460d      	mov	r5, r1
 8004136:	b09d      	sub	sp, #116	; 0x74
 8004138:	4614      	mov	r4, r2
 800413a:	4698      	mov	r8, r3
 800413c:	4606      	mov	r6, r0
 800413e:	b118      	cbz	r0, 8004148 <_vfiprintf_r+0x18>
 8004140:	6983      	ldr	r3, [r0, #24]
 8004142:	b90b      	cbnz	r3, 8004148 <_vfiprintf_r+0x18>
 8004144:	f7ff fe1c 	bl	8003d80 <__sinit>
 8004148:	4b89      	ldr	r3, [pc, #548]	; (8004370 <_vfiprintf_r+0x240>)
 800414a:	429d      	cmp	r5, r3
 800414c:	d11b      	bne.n	8004186 <_vfiprintf_r+0x56>
 800414e:	6875      	ldr	r5, [r6, #4]
 8004150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004152:	07d9      	lsls	r1, r3, #31
 8004154:	d405      	bmi.n	8004162 <_vfiprintf_r+0x32>
 8004156:	89ab      	ldrh	r3, [r5, #12]
 8004158:	059a      	lsls	r2, r3, #22
 800415a:	d402      	bmi.n	8004162 <_vfiprintf_r+0x32>
 800415c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800415e:	f7ff fead 	bl	8003ebc <__retarget_lock_acquire_recursive>
 8004162:	89ab      	ldrh	r3, [r5, #12]
 8004164:	071b      	lsls	r3, r3, #28
 8004166:	d501      	bpl.n	800416c <_vfiprintf_r+0x3c>
 8004168:	692b      	ldr	r3, [r5, #16]
 800416a:	b9eb      	cbnz	r3, 80041a8 <_vfiprintf_r+0x78>
 800416c:	4629      	mov	r1, r5
 800416e:	4630      	mov	r0, r6
 8004170:	f7ff fc7e 	bl	8003a70 <__swsetup_r>
 8004174:	b1c0      	cbz	r0, 80041a8 <_vfiprintf_r+0x78>
 8004176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004178:	07dc      	lsls	r4, r3, #31
 800417a:	d50e      	bpl.n	800419a <_vfiprintf_r+0x6a>
 800417c:	f04f 30ff 	mov.w	r0, #4294967295
 8004180:	b01d      	add	sp, #116	; 0x74
 8004182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004186:	4b7b      	ldr	r3, [pc, #492]	; (8004374 <_vfiprintf_r+0x244>)
 8004188:	429d      	cmp	r5, r3
 800418a:	d101      	bne.n	8004190 <_vfiprintf_r+0x60>
 800418c:	68b5      	ldr	r5, [r6, #8]
 800418e:	e7df      	b.n	8004150 <_vfiprintf_r+0x20>
 8004190:	4b79      	ldr	r3, [pc, #484]	; (8004378 <_vfiprintf_r+0x248>)
 8004192:	429d      	cmp	r5, r3
 8004194:	bf08      	it	eq
 8004196:	68f5      	ldreq	r5, [r6, #12]
 8004198:	e7da      	b.n	8004150 <_vfiprintf_r+0x20>
 800419a:	89ab      	ldrh	r3, [r5, #12]
 800419c:	0598      	lsls	r0, r3, #22
 800419e:	d4ed      	bmi.n	800417c <_vfiprintf_r+0x4c>
 80041a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041a2:	f7ff fe8c 	bl	8003ebe <__retarget_lock_release_recursive>
 80041a6:	e7e9      	b.n	800417c <_vfiprintf_r+0x4c>
 80041a8:	2300      	movs	r3, #0
 80041aa:	9309      	str	r3, [sp, #36]	; 0x24
 80041ac:	2320      	movs	r3, #32
 80041ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80041b6:	2330      	movs	r3, #48	; 0x30
 80041b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800437c <_vfiprintf_r+0x24c>
 80041bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041c0:	f04f 0901 	mov.w	r9, #1
 80041c4:	4623      	mov	r3, r4
 80041c6:	469a      	mov	sl, r3
 80041c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041cc:	b10a      	cbz	r2, 80041d2 <_vfiprintf_r+0xa2>
 80041ce:	2a25      	cmp	r2, #37	; 0x25
 80041d0:	d1f9      	bne.n	80041c6 <_vfiprintf_r+0x96>
 80041d2:	ebba 0b04 	subs.w	fp, sl, r4
 80041d6:	d00b      	beq.n	80041f0 <_vfiprintf_r+0xc0>
 80041d8:	465b      	mov	r3, fp
 80041da:	4622      	mov	r2, r4
 80041dc:	4629      	mov	r1, r5
 80041de:	4630      	mov	r0, r6
 80041e0:	f7ff ff93 	bl	800410a <__sfputs_r>
 80041e4:	3001      	adds	r0, #1
 80041e6:	f000 80aa 	beq.w	800433e <_vfiprintf_r+0x20e>
 80041ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041ec:	445a      	add	r2, fp
 80041ee:	9209      	str	r2, [sp, #36]	; 0x24
 80041f0:	f89a 3000 	ldrb.w	r3, [sl]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80a2 	beq.w	800433e <_vfiprintf_r+0x20e>
 80041fa:	2300      	movs	r3, #0
 80041fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004204:	f10a 0a01 	add.w	sl, sl, #1
 8004208:	9304      	str	r3, [sp, #16]
 800420a:	9307      	str	r3, [sp, #28]
 800420c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004210:	931a      	str	r3, [sp, #104]	; 0x68
 8004212:	4654      	mov	r4, sl
 8004214:	2205      	movs	r2, #5
 8004216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800421a:	4858      	ldr	r0, [pc, #352]	; (800437c <_vfiprintf_r+0x24c>)
 800421c:	f7fb fff8 	bl	8000210 <memchr>
 8004220:	9a04      	ldr	r2, [sp, #16]
 8004222:	b9d8      	cbnz	r0, 800425c <_vfiprintf_r+0x12c>
 8004224:	06d1      	lsls	r1, r2, #27
 8004226:	bf44      	itt	mi
 8004228:	2320      	movmi	r3, #32
 800422a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800422e:	0713      	lsls	r3, r2, #28
 8004230:	bf44      	itt	mi
 8004232:	232b      	movmi	r3, #43	; 0x2b
 8004234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004238:	f89a 3000 	ldrb.w	r3, [sl]
 800423c:	2b2a      	cmp	r3, #42	; 0x2a
 800423e:	d015      	beq.n	800426c <_vfiprintf_r+0x13c>
 8004240:	9a07      	ldr	r2, [sp, #28]
 8004242:	4654      	mov	r4, sl
 8004244:	2000      	movs	r0, #0
 8004246:	f04f 0c0a 	mov.w	ip, #10
 800424a:	4621      	mov	r1, r4
 800424c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004250:	3b30      	subs	r3, #48	; 0x30
 8004252:	2b09      	cmp	r3, #9
 8004254:	d94e      	bls.n	80042f4 <_vfiprintf_r+0x1c4>
 8004256:	b1b0      	cbz	r0, 8004286 <_vfiprintf_r+0x156>
 8004258:	9207      	str	r2, [sp, #28]
 800425a:	e014      	b.n	8004286 <_vfiprintf_r+0x156>
 800425c:	eba0 0308 	sub.w	r3, r0, r8
 8004260:	fa09 f303 	lsl.w	r3, r9, r3
 8004264:	4313      	orrs	r3, r2
 8004266:	9304      	str	r3, [sp, #16]
 8004268:	46a2      	mov	sl, r4
 800426a:	e7d2      	b.n	8004212 <_vfiprintf_r+0xe2>
 800426c:	9b03      	ldr	r3, [sp, #12]
 800426e:	1d19      	adds	r1, r3, #4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	9103      	str	r1, [sp, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	bfbb      	ittet	lt
 8004278:	425b      	neglt	r3, r3
 800427a:	f042 0202 	orrlt.w	r2, r2, #2
 800427e:	9307      	strge	r3, [sp, #28]
 8004280:	9307      	strlt	r3, [sp, #28]
 8004282:	bfb8      	it	lt
 8004284:	9204      	strlt	r2, [sp, #16]
 8004286:	7823      	ldrb	r3, [r4, #0]
 8004288:	2b2e      	cmp	r3, #46	; 0x2e
 800428a:	d10c      	bne.n	80042a6 <_vfiprintf_r+0x176>
 800428c:	7863      	ldrb	r3, [r4, #1]
 800428e:	2b2a      	cmp	r3, #42	; 0x2a
 8004290:	d135      	bne.n	80042fe <_vfiprintf_r+0x1ce>
 8004292:	9b03      	ldr	r3, [sp, #12]
 8004294:	1d1a      	adds	r2, r3, #4
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	9203      	str	r2, [sp, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	bfb8      	it	lt
 800429e:	f04f 33ff 	movlt.w	r3, #4294967295
 80042a2:	3402      	adds	r4, #2
 80042a4:	9305      	str	r3, [sp, #20]
 80042a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800438c <_vfiprintf_r+0x25c>
 80042aa:	7821      	ldrb	r1, [r4, #0]
 80042ac:	2203      	movs	r2, #3
 80042ae:	4650      	mov	r0, sl
 80042b0:	f7fb ffae 	bl	8000210 <memchr>
 80042b4:	b140      	cbz	r0, 80042c8 <_vfiprintf_r+0x198>
 80042b6:	2340      	movs	r3, #64	; 0x40
 80042b8:	eba0 000a 	sub.w	r0, r0, sl
 80042bc:	fa03 f000 	lsl.w	r0, r3, r0
 80042c0:	9b04      	ldr	r3, [sp, #16]
 80042c2:	4303      	orrs	r3, r0
 80042c4:	3401      	adds	r4, #1
 80042c6:	9304      	str	r3, [sp, #16]
 80042c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042cc:	482c      	ldr	r0, [pc, #176]	; (8004380 <_vfiprintf_r+0x250>)
 80042ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042d2:	2206      	movs	r2, #6
 80042d4:	f7fb ff9c 	bl	8000210 <memchr>
 80042d8:	2800      	cmp	r0, #0
 80042da:	d03f      	beq.n	800435c <_vfiprintf_r+0x22c>
 80042dc:	4b29      	ldr	r3, [pc, #164]	; (8004384 <_vfiprintf_r+0x254>)
 80042de:	bb1b      	cbnz	r3, 8004328 <_vfiprintf_r+0x1f8>
 80042e0:	9b03      	ldr	r3, [sp, #12]
 80042e2:	3307      	adds	r3, #7
 80042e4:	f023 0307 	bic.w	r3, r3, #7
 80042e8:	3308      	adds	r3, #8
 80042ea:	9303      	str	r3, [sp, #12]
 80042ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ee:	443b      	add	r3, r7
 80042f0:	9309      	str	r3, [sp, #36]	; 0x24
 80042f2:	e767      	b.n	80041c4 <_vfiprintf_r+0x94>
 80042f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80042f8:	460c      	mov	r4, r1
 80042fa:	2001      	movs	r0, #1
 80042fc:	e7a5      	b.n	800424a <_vfiprintf_r+0x11a>
 80042fe:	2300      	movs	r3, #0
 8004300:	3401      	adds	r4, #1
 8004302:	9305      	str	r3, [sp, #20]
 8004304:	4619      	mov	r1, r3
 8004306:	f04f 0c0a 	mov.w	ip, #10
 800430a:	4620      	mov	r0, r4
 800430c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004310:	3a30      	subs	r2, #48	; 0x30
 8004312:	2a09      	cmp	r2, #9
 8004314:	d903      	bls.n	800431e <_vfiprintf_r+0x1ee>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0c5      	beq.n	80042a6 <_vfiprintf_r+0x176>
 800431a:	9105      	str	r1, [sp, #20]
 800431c:	e7c3      	b.n	80042a6 <_vfiprintf_r+0x176>
 800431e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004322:	4604      	mov	r4, r0
 8004324:	2301      	movs	r3, #1
 8004326:	e7f0      	b.n	800430a <_vfiprintf_r+0x1da>
 8004328:	ab03      	add	r3, sp, #12
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	462a      	mov	r2, r5
 800432e:	4b16      	ldr	r3, [pc, #88]	; (8004388 <_vfiprintf_r+0x258>)
 8004330:	a904      	add	r1, sp, #16
 8004332:	4630      	mov	r0, r6
 8004334:	f3af 8000 	nop.w
 8004338:	4607      	mov	r7, r0
 800433a:	1c78      	adds	r0, r7, #1
 800433c:	d1d6      	bne.n	80042ec <_vfiprintf_r+0x1bc>
 800433e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004340:	07d9      	lsls	r1, r3, #31
 8004342:	d405      	bmi.n	8004350 <_vfiprintf_r+0x220>
 8004344:	89ab      	ldrh	r3, [r5, #12]
 8004346:	059a      	lsls	r2, r3, #22
 8004348:	d402      	bmi.n	8004350 <_vfiprintf_r+0x220>
 800434a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800434c:	f7ff fdb7 	bl	8003ebe <__retarget_lock_release_recursive>
 8004350:	89ab      	ldrh	r3, [r5, #12]
 8004352:	065b      	lsls	r3, r3, #25
 8004354:	f53f af12 	bmi.w	800417c <_vfiprintf_r+0x4c>
 8004358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800435a:	e711      	b.n	8004180 <_vfiprintf_r+0x50>
 800435c:	ab03      	add	r3, sp, #12
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	462a      	mov	r2, r5
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <_vfiprintf_r+0x258>)
 8004364:	a904      	add	r1, sp, #16
 8004366:	4630      	mov	r0, r6
 8004368:	f000 f880 	bl	800446c <_printf_i>
 800436c:	e7e4      	b.n	8004338 <_vfiprintf_r+0x208>
 800436e:	bf00      	nop
 8004370:	080049a4 	.word	0x080049a4
 8004374:	080049c4 	.word	0x080049c4
 8004378:	08004984 	.word	0x08004984
 800437c:	080049e4 	.word	0x080049e4
 8004380:	080049ee 	.word	0x080049ee
 8004384:	00000000 	.word	0x00000000
 8004388:	0800410b 	.word	0x0800410b
 800438c:	080049ea 	.word	0x080049ea

08004390 <_printf_common>:
 8004390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004394:	4616      	mov	r6, r2
 8004396:	4699      	mov	r9, r3
 8004398:	688a      	ldr	r2, [r1, #8]
 800439a:	690b      	ldr	r3, [r1, #16]
 800439c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043a0:	4293      	cmp	r3, r2
 80043a2:	bfb8      	it	lt
 80043a4:	4613      	movlt	r3, r2
 80043a6:	6033      	str	r3, [r6, #0]
 80043a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043ac:	4607      	mov	r7, r0
 80043ae:	460c      	mov	r4, r1
 80043b0:	b10a      	cbz	r2, 80043b6 <_printf_common+0x26>
 80043b2:	3301      	adds	r3, #1
 80043b4:	6033      	str	r3, [r6, #0]
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	0699      	lsls	r1, r3, #26
 80043ba:	bf42      	ittt	mi
 80043bc:	6833      	ldrmi	r3, [r6, #0]
 80043be:	3302      	addmi	r3, #2
 80043c0:	6033      	strmi	r3, [r6, #0]
 80043c2:	6825      	ldr	r5, [r4, #0]
 80043c4:	f015 0506 	ands.w	r5, r5, #6
 80043c8:	d106      	bne.n	80043d8 <_printf_common+0x48>
 80043ca:	f104 0a19 	add.w	sl, r4, #25
 80043ce:	68e3      	ldr	r3, [r4, #12]
 80043d0:	6832      	ldr	r2, [r6, #0]
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	42ab      	cmp	r3, r5
 80043d6:	dc26      	bgt.n	8004426 <_printf_common+0x96>
 80043d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043dc:	1e13      	subs	r3, r2, #0
 80043de:	6822      	ldr	r2, [r4, #0]
 80043e0:	bf18      	it	ne
 80043e2:	2301      	movne	r3, #1
 80043e4:	0692      	lsls	r2, r2, #26
 80043e6:	d42b      	bmi.n	8004440 <_printf_common+0xb0>
 80043e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043ec:	4649      	mov	r1, r9
 80043ee:	4638      	mov	r0, r7
 80043f0:	47c0      	blx	r8
 80043f2:	3001      	adds	r0, #1
 80043f4:	d01e      	beq.n	8004434 <_printf_common+0xa4>
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	68e5      	ldr	r5, [r4, #12]
 80043fa:	6832      	ldr	r2, [r6, #0]
 80043fc:	f003 0306 	and.w	r3, r3, #6
 8004400:	2b04      	cmp	r3, #4
 8004402:	bf08      	it	eq
 8004404:	1aad      	subeq	r5, r5, r2
 8004406:	68a3      	ldr	r3, [r4, #8]
 8004408:	6922      	ldr	r2, [r4, #16]
 800440a:	bf0c      	ite	eq
 800440c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004410:	2500      	movne	r5, #0
 8004412:	4293      	cmp	r3, r2
 8004414:	bfc4      	itt	gt
 8004416:	1a9b      	subgt	r3, r3, r2
 8004418:	18ed      	addgt	r5, r5, r3
 800441a:	2600      	movs	r6, #0
 800441c:	341a      	adds	r4, #26
 800441e:	42b5      	cmp	r5, r6
 8004420:	d11a      	bne.n	8004458 <_printf_common+0xc8>
 8004422:	2000      	movs	r0, #0
 8004424:	e008      	b.n	8004438 <_printf_common+0xa8>
 8004426:	2301      	movs	r3, #1
 8004428:	4652      	mov	r2, sl
 800442a:	4649      	mov	r1, r9
 800442c:	4638      	mov	r0, r7
 800442e:	47c0      	blx	r8
 8004430:	3001      	adds	r0, #1
 8004432:	d103      	bne.n	800443c <_printf_common+0xac>
 8004434:	f04f 30ff 	mov.w	r0, #4294967295
 8004438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800443c:	3501      	adds	r5, #1
 800443e:	e7c6      	b.n	80043ce <_printf_common+0x3e>
 8004440:	18e1      	adds	r1, r4, r3
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	2030      	movs	r0, #48	; 0x30
 8004446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800444a:	4422      	add	r2, r4
 800444c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004454:	3302      	adds	r3, #2
 8004456:	e7c7      	b.n	80043e8 <_printf_common+0x58>
 8004458:	2301      	movs	r3, #1
 800445a:	4622      	mov	r2, r4
 800445c:	4649      	mov	r1, r9
 800445e:	4638      	mov	r0, r7
 8004460:	47c0      	blx	r8
 8004462:	3001      	adds	r0, #1
 8004464:	d0e6      	beq.n	8004434 <_printf_common+0xa4>
 8004466:	3601      	adds	r6, #1
 8004468:	e7d9      	b.n	800441e <_printf_common+0x8e>
	...

0800446c <_printf_i>:
 800446c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004470:	460c      	mov	r4, r1
 8004472:	4691      	mov	r9, r2
 8004474:	7e27      	ldrb	r7, [r4, #24]
 8004476:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004478:	2f78      	cmp	r7, #120	; 0x78
 800447a:	4680      	mov	r8, r0
 800447c:	469a      	mov	sl, r3
 800447e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004482:	d807      	bhi.n	8004494 <_printf_i+0x28>
 8004484:	2f62      	cmp	r7, #98	; 0x62
 8004486:	d80a      	bhi.n	800449e <_printf_i+0x32>
 8004488:	2f00      	cmp	r7, #0
 800448a:	f000 80d8 	beq.w	800463e <_printf_i+0x1d2>
 800448e:	2f58      	cmp	r7, #88	; 0x58
 8004490:	f000 80a3 	beq.w	80045da <_printf_i+0x16e>
 8004494:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800449c:	e03a      	b.n	8004514 <_printf_i+0xa8>
 800449e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044a2:	2b15      	cmp	r3, #21
 80044a4:	d8f6      	bhi.n	8004494 <_printf_i+0x28>
 80044a6:	a001      	add	r0, pc, #4	; (adr r0, 80044ac <_printf_i+0x40>)
 80044a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044ac:	08004505 	.word	0x08004505
 80044b0:	08004519 	.word	0x08004519
 80044b4:	08004495 	.word	0x08004495
 80044b8:	08004495 	.word	0x08004495
 80044bc:	08004495 	.word	0x08004495
 80044c0:	08004495 	.word	0x08004495
 80044c4:	08004519 	.word	0x08004519
 80044c8:	08004495 	.word	0x08004495
 80044cc:	08004495 	.word	0x08004495
 80044d0:	08004495 	.word	0x08004495
 80044d4:	08004495 	.word	0x08004495
 80044d8:	08004625 	.word	0x08004625
 80044dc:	08004549 	.word	0x08004549
 80044e0:	08004607 	.word	0x08004607
 80044e4:	08004495 	.word	0x08004495
 80044e8:	08004495 	.word	0x08004495
 80044ec:	08004647 	.word	0x08004647
 80044f0:	08004495 	.word	0x08004495
 80044f4:	08004549 	.word	0x08004549
 80044f8:	08004495 	.word	0x08004495
 80044fc:	08004495 	.word	0x08004495
 8004500:	0800460f 	.word	0x0800460f
 8004504:	680b      	ldr	r3, [r1, #0]
 8004506:	1d1a      	adds	r2, r3, #4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	600a      	str	r2, [r1, #0]
 800450c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004514:	2301      	movs	r3, #1
 8004516:	e0a3      	b.n	8004660 <_printf_i+0x1f4>
 8004518:	6825      	ldr	r5, [r4, #0]
 800451a:	6808      	ldr	r0, [r1, #0]
 800451c:	062e      	lsls	r6, r5, #24
 800451e:	f100 0304 	add.w	r3, r0, #4
 8004522:	d50a      	bpl.n	800453a <_printf_i+0xce>
 8004524:	6805      	ldr	r5, [r0, #0]
 8004526:	600b      	str	r3, [r1, #0]
 8004528:	2d00      	cmp	r5, #0
 800452a:	da03      	bge.n	8004534 <_printf_i+0xc8>
 800452c:	232d      	movs	r3, #45	; 0x2d
 800452e:	426d      	negs	r5, r5
 8004530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004534:	485e      	ldr	r0, [pc, #376]	; (80046b0 <_printf_i+0x244>)
 8004536:	230a      	movs	r3, #10
 8004538:	e019      	b.n	800456e <_printf_i+0x102>
 800453a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800453e:	6805      	ldr	r5, [r0, #0]
 8004540:	600b      	str	r3, [r1, #0]
 8004542:	bf18      	it	ne
 8004544:	b22d      	sxthne	r5, r5
 8004546:	e7ef      	b.n	8004528 <_printf_i+0xbc>
 8004548:	680b      	ldr	r3, [r1, #0]
 800454a:	6825      	ldr	r5, [r4, #0]
 800454c:	1d18      	adds	r0, r3, #4
 800454e:	6008      	str	r0, [r1, #0]
 8004550:	0628      	lsls	r0, r5, #24
 8004552:	d501      	bpl.n	8004558 <_printf_i+0xec>
 8004554:	681d      	ldr	r5, [r3, #0]
 8004556:	e002      	b.n	800455e <_printf_i+0xf2>
 8004558:	0669      	lsls	r1, r5, #25
 800455a:	d5fb      	bpl.n	8004554 <_printf_i+0xe8>
 800455c:	881d      	ldrh	r5, [r3, #0]
 800455e:	4854      	ldr	r0, [pc, #336]	; (80046b0 <_printf_i+0x244>)
 8004560:	2f6f      	cmp	r7, #111	; 0x6f
 8004562:	bf0c      	ite	eq
 8004564:	2308      	moveq	r3, #8
 8004566:	230a      	movne	r3, #10
 8004568:	2100      	movs	r1, #0
 800456a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800456e:	6866      	ldr	r6, [r4, #4]
 8004570:	60a6      	str	r6, [r4, #8]
 8004572:	2e00      	cmp	r6, #0
 8004574:	bfa2      	ittt	ge
 8004576:	6821      	ldrge	r1, [r4, #0]
 8004578:	f021 0104 	bicge.w	r1, r1, #4
 800457c:	6021      	strge	r1, [r4, #0]
 800457e:	b90d      	cbnz	r5, 8004584 <_printf_i+0x118>
 8004580:	2e00      	cmp	r6, #0
 8004582:	d04d      	beq.n	8004620 <_printf_i+0x1b4>
 8004584:	4616      	mov	r6, r2
 8004586:	fbb5 f1f3 	udiv	r1, r5, r3
 800458a:	fb03 5711 	mls	r7, r3, r1, r5
 800458e:	5dc7      	ldrb	r7, [r0, r7]
 8004590:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004594:	462f      	mov	r7, r5
 8004596:	42bb      	cmp	r3, r7
 8004598:	460d      	mov	r5, r1
 800459a:	d9f4      	bls.n	8004586 <_printf_i+0x11a>
 800459c:	2b08      	cmp	r3, #8
 800459e:	d10b      	bne.n	80045b8 <_printf_i+0x14c>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	07df      	lsls	r7, r3, #31
 80045a4:	d508      	bpl.n	80045b8 <_printf_i+0x14c>
 80045a6:	6923      	ldr	r3, [r4, #16]
 80045a8:	6861      	ldr	r1, [r4, #4]
 80045aa:	4299      	cmp	r1, r3
 80045ac:	bfde      	ittt	le
 80045ae:	2330      	movle	r3, #48	; 0x30
 80045b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045b8:	1b92      	subs	r2, r2, r6
 80045ba:	6122      	str	r2, [r4, #16]
 80045bc:	f8cd a000 	str.w	sl, [sp]
 80045c0:	464b      	mov	r3, r9
 80045c2:	aa03      	add	r2, sp, #12
 80045c4:	4621      	mov	r1, r4
 80045c6:	4640      	mov	r0, r8
 80045c8:	f7ff fee2 	bl	8004390 <_printf_common>
 80045cc:	3001      	adds	r0, #1
 80045ce:	d14c      	bne.n	800466a <_printf_i+0x1fe>
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	b004      	add	sp, #16
 80045d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045da:	4835      	ldr	r0, [pc, #212]	; (80046b0 <_printf_i+0x244>)
 80045dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	680e      	ldr	r6, [r1, #0]
 80045e4:	061f      	lsls	r7, r3, #24
 80045e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80045ea:	600e      	str	r6, [r1, #0]
 80045ec:	d514      	bpl.n	8004618 <_printf_i+0x1ac>
 80045ee:	07d9      	lsls	r1, r3, #31
 80045f0:	bf44      	itt	mi
 80045f2:	f043 0320 	orrmi.w	r3, r3, #32
 80045f6:	6023      	strmi	r3, [r4, #0]
 80045f8:	b91d      	cbnz	r5, 8004602 <_printf_i+0x196>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	f023 0320 	bic.w	r3, r3, #32
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	2310      	movs	r3, #16
 8004604:	e7b0      	b.n	8004568 <_printf_i+0xfc>
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	f043 0320 	orr.w	r3, r3, #32
 800460c:	6023      	str	r3, [r4, #0]
 800460e:	2378      	movs	r3, #120	; 0x78
 8004610:	4828      	ldr	r0, [pc, #160]	; (80046b4 <_printf_i+0x248>)
 8004612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004616:	e7e3      	b.n	80045e0 <_printf_i+0x174>
 8004618:	065e      	lsls	r6, r3, #25
 800461a:	bf48      	it	mi
 800461c:	b2ad      	uxthmi	r5, r5
 800461e:	e7e6      	b.n	80045ee <_printf_i+0x182>
 8004620:	4616      	mov	r6, r2
 8004622:	e7bb      	b.n	800459c <_printf_i+0x130>
 8004624:	680b      	ldr	r3, [r1, #0]
 8004626:	6826      	ldr	r6, [r4, #0]
 8004628:	6960      	ldr	r0, [r4, #20]
 800462a:	1d1d      	adds	r5, r3, #4
 800462c:	600d      	str	r5, [r1, #0]
 800462e:	0635      	lsls	r5, r6, #24
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	d501      	bpl.n	8004638 <_printf_i+0x1cc>
 8004634:	6018      	str	r0, [r3, #0]
 8004636:	e002      	b.n	800463e <_printf_i+0x1d2>
 8004638:	0671      	lsls	r1, r6, #25
 800463a:	d5fb      	bpl.n	8004634 <_printf_i+0x1c8>
 800463c:	8018      	strh	r0, [r3, #0]
 800463e:	2300      	movs	r3, #0
 8004640:	6123      	str	r3, [r4, #16]
 8004642:	4616      	mov	r6, r2
 8004644:	e7ba      	b.n	80045bc <_printf_i+0x150>
 8004646:	680b      	ldr	r3, [r1, #0]
 8004648:	1d1a      	adds	r2, r3, #4
 800464a:	600a      	str	r2, [r1, #0]
 800464c:	681e      	ldr	r6, [r3, #0]
 800464e:	6862      	ldr	r2, [r4, #4]
 8004650:	2100      	movs	r1, #0
 8004652:	4630      	mov	r0, r6
 8004654:	f7fb fddc 	bl	8000210 <memchr>
 8004658:	b108      	cbz	r0, 800465e <_printf_i+0x1f2>
 800465a:	1b80      	subs	r0, r0, r6
 800465c:	6060      	str	r0, [r4, #4]
 800465e:	6863      	ldr	r3, [r4, #4]
 8004660:	6123      	str	r3, [r4, #16]
 8004662:	2300      	movs	r3, #0
 8004664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004668:	e7a8      	b.n	80045bc <_printf_i+0x150>
 800466a:	6923      	ldr	r3, [r4, #16]
 800466c:	4632      	mov	r2, r6
 800466e:	4649      	mov	r1, r9
 8004670:	4640      	mov	r0, r8
 8004672:	47d0      	blx	sl
 8004674:	3001      	adds	r0, #1
 8004676:	d0ab      	beq.n	80045d0 <_printf_i+0x164>
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	079b      	lsls	r3, r3, #30
 800467c:	d413      	bmi.n	80046a6 <_printf_i+0x23a>
 800467e:	68e0      	ldr	r0, [r4, #12]
 8004680:	9b03      	ldr	r3, [sp, #12]
 8004682:	4298      	cmp	r0, r3
 8004684:	bfb8      	it	lt
 8004686:	4618      	movlt	r0, r3
 8004688:	e7a4      	b.n	80045d4 <_printf_i+0x168>
 800468a:	2301      	movs	r3, #1
 800468c:	4632      	mov	r2, r6
 800468e:	4649      	mov	r1, r9
 8004690:	4640      	mov	r0, r8
 8004692:	47d0      	blx	sl
 8004694:	3001      	adds	r0, #1
 8004696:	d09b      	beq.n	80045d0 <_printf_i+0x164>
 8004698:	3501      	adds	r5, #1
 800469a:	68e3      	ldr	r3, [r4, #12]
 800469c:	9903      	ldr	r1, [sp, #12]
 800469e:	1a5b      	subs	r3, r3, r1
 80046a0:	42ab      	cmp	r3, r5
 80046a2:	dcf2      	bgt.n	800468a <_printf_i+0x21e>
 80046a4:	e7eb      	b.n	800467e <_printf_i+0x212>
 80046a6:	2500      	movs	r5, #0
 80046a8:	f104 0619 	add.w	r6, r4, #25
 80046ac:	e7f5      	b.n	800469a <_printf_i+0x22e>
 80046ae:	bf00      	nop
 80046b0:	080049f5 	.word	0x080049f5
 80046b4:	08004a06 	.word	0x08004a06

080046b8 <_sbrk_r>:
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	4d06      	ldr	r5, [pc, #24]	; (80046d4 <_sbrk_r+0x1c>)
 80046bc:	2300      	movs	r3, #0
 80046be:	4604      	mov	r4, r0
 80046c0:	4608      	mov	r0, r1
 80046c2:	602b      	str	r3, [r5, #0]
 80046c4:	f7fc fb26 	bl	8000d14 <_sbrk>
 80046c8:	1c43      	adds	r3, r0, #1
 80046ca:	d102      	bne.n	80046d2 <_sbrk_r+0x1a>
 80046cc:	682b      	ldr	r3, [r5, #0]
 80046ce:	b103      	cbz	r3, 80046d2 <_sbrk_r+0x1a>
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	bd38      	pop	{r3, r4, r5, pc}
 80046d4:	200001c8 	.word	0x200001c8

080046d8 <__sread>:
 80046d8:	b510      	push	{r4, lr}
 80046da:	460c      	mov	r4, r1
 80046dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e0:	f000 f8a0 	bl	8004824 <_read_r>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	bfab      	itete	ge
 80046e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046ea:	89a3      	ldrhlt	r3, [r4, #12]
 80046ec:	181b      	addge	r3, r3, r0
 80046ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046f2:	bfac      	ite	ge
 80046f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80046f6:	81a3      	strhlt	r3, [r4, #12]
 80046f8:	bd10      	pop	{r4, pc}

080046fa <__swrite>:
 80046fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046fe:	461f      	mov	r7, r3
 8004700:	898b      	ldrh	r3, [r1, #12]
 8004702:	05db      	lsls	r3, r3, #23
 8004704:	4605      	mov	r5, r0
 8004706:	460c      	mov	r4, r1
 8004708:	4616      	mov	r6, r2
 800470a:	d505      	bpl.n	8004718 <__swrite+0x1e>
 800470c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004710:	2302      	movs	r3, #2
 8004712:	2200      	movs	r2, #0
 8004714:	f000 f868 	bl	80047e8 <_lseek_r>
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800471e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004722:	81a3      	strh	r3, [r4, #12]
 8004724:	4632      	mov	r2, r6
 8004726:	463b      	mov	r3, r7
 8004728:	4628      	mov	r0, r5
 800472a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800472e:	f000 b817 	b.w	8004760 <_write_r>

08004732 <__sseek>:
 8004732:	b510      	push	{r4, lr}
 8004734:	460c      	mov	r4, r1
 8004736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800473a:	f000 f855 	bl	80047e8 <_lseek_r>
 800473e:	1c43      	adds	r3, r0, #1
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	bf15      	itete	ne
 8004744:	6560      	strne	r0, [r4, #84]	; 0x54
 8004746:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800474a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800474e:	81a3      	strheq	r3, [r4, #12]
 8004750:	bf18      	it	ne
 8004752:	81a3      	strhne	r3, [r4, #12]
 8004754:	bd10      	pop	{r4, pc}

08004756 <__sclose>:
 8004756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800475a:	f000 b813 	b.w	8004784 <_close_r>
	...

08004760 <_write_r>:
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	4d07      	ldr	r5, [pc, #28]	; (8004780 <_write_r+0x20>)
 8004764:	4604      	mov	r4, r0
 8004766:	4608      	mov	r0, r1
 8004768:	4611      	mov	r1, r2
 800476a:	2200      	movs	r2, #0
 800476c:	602a      	str	r2, [r5, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	f7fc fa7f 	bl	8000c72 <_write>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d102      	bne.n	800477e <_write_r+0x1e>
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	b103      	cbz	r3, 800477e <_write_r+0x1e>
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	bd38      	pop	{r3, r4, r5, pc}
 8004780:	200001c8 	.word	0x200001c8

08004784 <_close_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4d06      	ldr	r5, [pc, #24]	; (80047a0 <_close_r+0x1c>)
 8004788:	2300      	movs	r3, #0
 800478a:	4604      	mov	r4, r0
 800478c:	4608      	mov	r0, r1
 800478e:	602b      	str	r3, [r5, #0]
 8004790:	f7fc fa8b 	bl	8000caa <_close>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_close_r+0x1a>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	b103      	cbz	r3, 800479e <_close_r+0x1a>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	200001c8 	.word	0x200001c8

080047a4 <_fstat_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4d07      	ldr	r5, [pc, #28]	; (80047c4 <_fstat_r+0x20>)
 80047a8:	2300      	movs	r3, #0
 80047aa:	4604      	mov	r4, r0
 80047ac:	4608      	mov	r0, r1
 80047ae:	4611      	mov	r1, r2
 80047b0:	602b      	str	r3, [r5, #0]
 80047b2:	f7fc fa86 	bl	8000cc2 <_fstat>
 80047b6:	1c43      	adds	r3, r0, #1
 80047b8:	d102      	bne.n	80047c0 <_fstat_r+0x1c>
 80047ba:	682b      	ldr	r3, [r5, #0]
 80047bc:	b103      	cbz	r3, 80047c0 <_fstat_r+0x1c>
 80047be:	6023      	str	r3, [r4, #0]
 80047c0:	bd38      	pop	{r3, r4, r5, pc}
 80047c2:	bf00      	nop
 80047c4:	200001c8 	.word	0x200001c8

080047c8 <_isatty_r>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	4d06      	ldr	r5, [pc, #24]	; (80047e4 <_isatty_r+0x1c>)
 80047cc:	2300      	movs	r3, #0
 80047ce:	4604      	mov	r4, r0
 80047d0:	4608      	mov	r0, r1
 80047d2:	602b      	str	r3, [r5, #0]
 80047d4:	f7fc fa85 	bl	8000ce2 <_isatty>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d102      	bne.n	80047e2 <_isatty_r+0x1a>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	b103      	cbz	r3, 80047e2 <_isatty_r+0x1a>
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	bd38      	pop	{r3, r4, r5, pc}
 80047e4:	200001c8 	.word	0x200001c8

080047e8 <_lseek_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4d07      	ldr	r5, [pc, #28]	; (8004808 <_lseek_r+0x20>)
 80047ec:	4604      	mov	r4, r0
 80047ee:	4608      	mov	r0, r1
 80047f0:	4611      	mov	r1, r2
 80047f2:	2200      	movs	r2, #0
 80047f4:	602a      	str	r2, [r5, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f7fc fa7e 	bl	8000cf8 <_lseek>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d102      	bne.n	8004806 <_lseek_r+0x1e>
 8004800:	682b      	ldr	r3, [r5, #0]
 8004802:	b103      	cbz	r3, 8004806 <_lseek_r+0x1e>
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	bd38      	pop	{r3, r4, r5, pc}
 8004808:	200001c8 	.word	0x200001c8

0800480c <__malloc_lock>:
 800480c:	4801      	ldr	r0, [pc, #4]	; (8004814 <__malloc_lock+0x8>)
 800480e:	f7ff bb55 	b.w	8003ebc <__retarget_lock_acquire_recursive>
 8004812:	bf00      	nop
 8004814:	200001c0 	.word	0x200001c0

08004818 <__malloc_unlock>:
 8004818:	4801      	ldr	r0, [pc, #4]	; (8004820 <__malloc_unlock+0x8>)
 800481a:	f7ff bb50 	b.w	8003ebe <__retarget_lock_release_recursive>
 800481e:	bf00      	nop
 8004820:	200001c0 	.word	0x200001c0

08004824 <_read_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4d07      	ldr	r5, [pc, #28]	; (8004844 <_read_r+0x20>)
 8004828:	4604      	mov	r4, r0
 800482a:	4608      	mov	r0, r1
 800482c:	4611      	mov	r1, r2
 800482e:	2200      	movs	r2, #0
 8004830:	602a      	str	r2, [r5, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	f7fc fa00 	bl	8000c38 <_read>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	d102      	bne.n	8004842 <_read_r+0x1e>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	b103      	cbz	r3, 8004842 <_read_r+0x1e>
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	bd38      	pop	{r3, r4, r5, pc}
 8004844:	200001c8 	.word	0x200001c8

08004848 <_init>:
 8004848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484a:	bf00      	nop
 800484c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484e:	bc08      	pop	{r3}
 8004850:	469e      	mov	lr, r3
 8004852:	4770      	bx	lr

08004854 <_fini>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr
