
BLDC-IHM08M1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005760  08005760  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005768  08005768  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005768  08005768  00015768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000070  080057e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080057e0  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c31  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a1  00000000  00000000  00030cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00033378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  000341e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035c8  00000000  00000000  00034f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012750  00000000  00000000  000384f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8243  00000000  00000000  0004ac48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122e8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e0  00000000  00000000  00122edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005590 	.word	0x08005590

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005590 	.word	0x08005590

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b54      	ldr	r3, [pc, #336]	; (8000720 <MX_GPIO_Init+0x16c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a53      	ldr	r2, [pc, #332]	; (8000720 <MX_GPIO_Init+0x16c>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b51      	ldr	r3, [pc, #324]	; (8000720 <MX_GPIO_Init+0x16c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b4d      	ldr	r3, [pc, #308]	; (8000720 <MX_GPIO_Init+0x16c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a4c      	ldr	r2, [pc, #304]	; (8000720 <MX_GPIO_Init+0x16c>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b4a      	ldr	r3, [pc, #296]	; (8000720 <MX_GPIO_Init+0x16c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b46      	ldr	r3, [pc, #280]	; (8000720 <MX_GPIO_Init+0x16c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a45      	ldr	r2, [pc, #276]	; (8000720 <MX_GPIO_Init+0x16c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b43      	ldr	r3, [pc, #268]	; (8000720 <MX_GPIO_Init+0x16c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b3f      	ldr	r3, [pc, #252]	; (8000720 <MX_GPIO_Init+0x16c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a3e      	ldr	r2, [pc, #248]	; (8000720 <MX_GPIO_Init+0x16c>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b3c      	ldr	r3, [pc, #240]	; (8000720 <MX_GPIO_Init+0x16c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin|S1_L_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	21e0      	movs	r1, #224	; 0xe0
 800063e:	4839      	ldr	r0, [pc, #228]	; (8000724 <MX_GPIO_Init+0x170>)
 8000640:	f001 f9e8 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S2_L_Pin|S3_L_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2103      	movs	r1, #3
 8000648:	4837      	ldr	r0, [pc, #220]	; (8000728 <MX_GPIO_Init+0x174>)
 800064a:	f001 f9e3 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000654:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	4831      	ldr	r0, [pc, #196]	; (800072c <MX_GPIO_Init+0x178>)
 8000666:	f001 f829 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 800066a:	2360      	movs	r3, #96	; 0x60
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4828      	ldr	r0, [pc, #160]	; (8000724 <MX_GPIO_Init+0x170>)
 8000682:	f001 f81b 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S1_L_Pin;
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800068e:	2302      	movs	r3, #2
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(S1_L_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4821      	ldr	r0, [pc, #132]	; (8000724 <MX_GPIO_Init+0x170>)
 800069e:	f001 f80d 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = S2_L_Pin|S3_L_Pin;
 80006a2:	2303      	movs	r3, #3
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	481b      	ldr	r0, [pc, #108]	; (8000728 <MX_GPIO_Init+0x174>)
 80006ba:	f000 ffff 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 80006be:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006c4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4814      	ldr	r0, [pc, #80]	; (8000728 <MX_GPIO_Init+0x174>)
 80006d6:	f000 fff1 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = H1_Pin;
 80006da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006e0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <MX_GPIO_Init+0x170>)
 80006f2:	f000 ffe3 	bl	80016bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2009      	movs	r0, #9
 80006fc:	f000 ffa1 	bl	8001642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000700:	2009      	movs	r0, #9
 8000702:	f000 ffba 	bl	800167a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2028      	movs	r0, #40	; 0x28
 800070c:	f000 ff99 	bl	8001642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000710:	2028      	movs	r0, #40	; 0x28
 8000712:	f000 ffb2 	bl	800167a <HAL_NVIC_EnableIRQ>

}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40020000 	.word	0x40020000
 8000728:	40020400 	.word	0x40020400
 800072c:	40020800 	.word	0x40020800

08000730 <HS_Calculate_State>:

// ---------------------------------------------------------------------------+
// -- calc state
// ---------------------------------------------------------------------------+
uint8_t HS_Calculate_State()
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

	uint8_t commutation_state[] = {
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <HS_Calculate_State+0x80>)
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800073e:	e883 0003 	stmia.w	r3, {r0, r1}
		 3, //	| 6
		 7, //	| 7
	};

	// read current HALL values
	uint8_t val_H1 = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 8000742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000746:	481b      	ldr	r0, [pc, #108]	; (80007b4 <HS_Calculate_State+0x84>)
 8000748:	f001 f94c 	bl	80019e4 <HAL_GPIO_ReadPin>
 800074c:	4603      	mov	r3, r0
 800074e:	73fb      	strb	r3, [r7, #15]
	uint8_t val_H2 = HAL_GPIO_ReadPin(H2_GPIO_Port, H2_Pin);
 8000750:	2108      	movs	r1, #8
 8000752:	4819      	ldr	r0, [pc, #100]	; (80007b8 <HS_Calculate_State+0x88>)
 8000754:	f001 f946 	bl	80019e4 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	73bb      	strb	r3, [r7, #14]
	uint8_t val_H3 = HAL_GPIO_ReadPin(H3_GPIO_Port, H3_Pin);
 800075c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000760:	4815      	ldr	r0, [pc, #84]	; (80007b8 <HS_Calculate_State+0x88>)
 8000762:	f001 f93f 	bl	80019e4 <HAL_GPIO_ReadPin>
 8000766:	4603      	mov	r3, r0
 8000768:	737b      	strb	r3, [r7, #13]

	// compound values
	uint8_t total_val = (val_H3 << 2) | (val_H2 << 1) | (val_H1  << 0);
 800076a:	7b7b      	ldrb	r3, [r7, #13]
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	b25a      	sxtb	r2, r3
 8000770:	7bbb      	ldrb	r3, [r7, #14]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	b25b      	sxtb	r3, r3
 8000776:	4313      	orrs	r3, r2
 8000778:	b25a      	sxtb	r2, r3
 800077a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800077e:	4313      	orrs	r3, r2
 8000780:	b25b      	sxtb	r3, r3
 8000782:	733b      	strb	r3, [r7, #12]

	// sanity check
	// TODO add some kind of emergency stop here?
	if(total_val < 1 || total_val > 6)
 8000784:	7b3b      	ldrb	r3, [r7, #12]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <HS_Calculate_State+0x60>
 800078a:	7b3b      	ldrb	r3, [r7, #12]
 800078c:	2b06      	cmp	r3, #6
 800078e:	d901      	bls.n	8000794 <HS_Calculate_State+0x64>
	{
		return 0; // this should not be happening
 8000790:	2300      	movs	r3, #0
 8000792:	e008      	b.n	80007a6 <HS_Calculate_State+0x76>
	}

	_hs_state = commutation_state[total_val];
 8000794:	7b3b      	ldrb	r3, [r7, #12]
 8000796:	3310      	adds	r3, #16
 8000798:	443b      	add	r3, r7
 800079a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <HS_Calculate_State+0x8c>)
 80007a0:	701a      	strb	r2, [r3, #0]

	return _hs_state;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HS_Calculate_State+0x8c>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	080055a8 	.word	0x080055a8
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020400 	.word	0x40020400
 80007bc:	2000008c 	.word	0x2000008c

080007c0 <__io_putchar>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
int __io_putchar(int ch)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b0a      	cmp	r3, #10
 80007cc:	d109      	bne.n	80007e2 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 80007ce:	230d      	movs	r3, #13
 80007d0:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 80007d2:	f107 010f 	add.w	r1, r7, #15
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	2201      	movs	r2, #1
 80007dc:	4807      	ldr	r0, [pc, #28]	; (80007fc <__io_putchar+0x3c>)
 80007de:	f003 fba2 	bl	8003f26 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80007e2:	1d39      	adds	r1, r7, #4
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	2201      	movs	r2, #1
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <__io_putchar+0x3c>)
 80007ec:	f003 fb9b 	bl	8003f26 <HAL_UART_Transmit>
    return 1;
 80007f0:	2301      	movs	r3, #1
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000018c 	.word	0x2000018c

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b5b0      	push	{r4, r5, r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af04      	add	r7, sp, #16
int main(void)
 8000806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080a:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fda8 	bl	8001360 <HAL_Init>
	  HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin));
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f924 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f7ff fece 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000818:	f000 fd06 	bl	8001228 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800081c:	f000 fc40 	bl	80010a0 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000820:	f000 fbf0 	bl	8001004 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000824:	f000 fb36 	bl	8000e94 <MX_TIM1_Init>
  MX_RTC_Init();
 8000828:	f000 f990 	bl	8000b4c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // welcome message
  HAL_UART_Transmit(&huart2, (uint8_t *)WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	222d      	movs	r2, #45	; 0x2d
 8000832:	4982      	ldr	r1, [pc, #520]	; (8000a3c <main+0x23c>)
 8000834:	4882      	ldr	r0, [pc, #520]	; (8000a40 <main+0x240>)
 8000836:	f003 fb76 	bl	8003f26 <HAL_UART_Transmit>

  // init globals
//  glob_state = 1;
//  SS_Commutate_Type5(glob_state);
  uint8_t val_HS;
  uint8_t val_H1 = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 800083a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800083e:	4881      	ldr	r0, [pc, #516]	; (8000a44 <main+0x244>)
 8000840:	f001 f8d0 	bl	80019e4 <HAL_GPIO_ReadPin>
 8000844:	4603      	mov	r3, r0
 8000846:	753b      	strb	r3, [r7, #20]
  uint8_t val_H2 = HAL_GPIO_ReadPin(H2_GPIO_Port, H2_Pin);
 8000848:	2108      	movs	r1, #8
 800084a:	487f      	ldr	r0, [pc, #508]	; (8000a48 <main+0x248>)
 800084c:	f001 f8ca 	bl	80019e4 <HAL_GPIO_ReadPin>
 8000850:	4603      	mov	r3, r0
 8000852:	74fb      	strb	r3, [r7, #19]
  uint8_t val_H3 = HAL_GPIO_ReadPin(H3_GPIO_Port, H3_Pin);
 8000854:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000858:	487b      	ldr	r0, [pc, #492]	; (8000a48 <main+0x248>)
 800085a:	f001 f8c3 	bl	80019e4 <HAL_GPIO_ReadPin>
 800085e:	4603      	mov	r3, r0
 8000860:	74bb      	strb	r3, [r7, #18]

  uint8_t val_HS_OLD;
  uint8_t counter = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	75bb      	strb	r3, [r7, #22]
  uint8_t revolution;
  uint8_t delay=5;
 8000866:	2305      	movs	r3, #5
 8000868:	747b      	strb	r3, [r7, #17]

  bool refresh = false;
 800086a:	2300      	movs	r3, #0
 800086c:	757b      	strb	r3, [r7, #21]

  HAL_SYSTICK_Callback();
 800086e:	f000 ff1e 	bl	80016ae <HAL_SYSTICK_Callback>
  // start timers
//  HAL_TIM_Base_Start_IT(&htim6);
  HAL_TIM_Base_Start_IT(&htim7);
 8000872:	4876      	ldr	r0, [pc, #472]	; (8000a4c <main+0x24c>)
 8000874:	f002 fc16 	bl	80030a4 <HAL_TIM_Base_Start_IT>

  RTC_DateTypeDef today;
  today.Year = 22;
 8000878:	2316      	movs	r3, #22
 800087a:	71fb      	strb	r3, [r7, #7]
  today.Month = 03;
 800087c:	2303      	movs	r3, #3
 800087e:	717b      	strb	r3, [r7, #5]
  today.Date = 24;
 8000880:	2318      	movs	r3, #24
 8000882:	71bb      	strb	r3, [r7, #6]
  today.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000884:	2302      	movs	r3, #2
 8000886:	713b      	strb	r3, [r7, #4]
  HAL_RTC_SetDate(&hrtc, &today, RTC_FORMAT_BIN);
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	4619      	mov	r1, r3
 800088e:	4870      	ldr	r0, [pc, #448]	; (8000a50 <main+0x250>)
 8000890:	f002 fa94 	bl	8002dbc <HAL_RTC_SetDate>
	  //for (i = 0; i < 10; i++)
		if (is_button_pressed()){
	    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	    HAL_Delay(100);
	  }*/
	  HAL_GPIO_WritePin(S1_H_GPIO_Port, S1_H_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800089a:	486a      	ldr	r0, [pc, #424]	; (8000a44 <main+0x244>)
 800089c:	f001 f8ba 	bl	8001a14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(S1_L_GPIO_Port, S1_L_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2180      	movs	r1, #128	; 0x80
 80008a4:	4867      	ldr	r0, [pc, #412]	; (8000a44 <main+0x244>)
 80008a6:	f001 f8b5 	bl	8001a14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(S2_H_GPIO_Port, S2_H_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b0:	4864      	ldr	r0, [pc, #400]	; (8000a44 <main+0x244>)
 80008b2:	f001 f8af 	bl	8001a14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(S2_L_GPIO_Port, S2_L_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2101      	movs	r1, #1
 80008ba:	4863      	ldr	r0, [pc, #396]	; (8000a48 <main+0x248>)
 80008bc:	f001 f8aa 	bl	8001a14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(S3_H_GPIO_Port, S3_H_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c6:	485f      	ldr	r0, [pc, #380]	; (8000a44 <main+0x244>)
 80008c8:	f001 f8a4 	bl	8001a14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(S3_L_GPIO_Port, S3_L_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2102      	movs	r1, #2
 80008d0:	485d      	ldr	r0, [pc, #372]	; (8000a48 <main+0x248>)
 80008d2:	f001 f89f 	bl	8001a14 <HAL_GPIO_WritePin>
	  //HAL_Delay(100);
	/*  if(val_HS>3)
		  val_HS=val_HS-3;
*/
	  val_H1 = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 80008d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008da:	485a      	ldr	r0, [pc, #360]	; (8000a44 <main+0x244>)
 80008dc:	f001 f882 	bl	80019e4 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	753b      	strb	r3, [r7, #20]
	  val_H2 = HAL_GPIO_ReadPin(H2_GPIO_Port, H2_Pin);
 80008e4:	2108      	movs	r1, #8
 80008e6:	4858      	ldr	r0, [pc, #352]	; (8000a48 <main+0x248>)
 80008e8:	f001 f87c 	bl	80019e4 <HAL_GPIO_ReadPin>
 80008ec:	4603      	mov	r3, r0
 80008ee:	74fb      	strb	r3, [r7, #19]
	  val_H3 = HAL_GPIO_ReadPin(H3_GPIO_Port, H3_Pin);
 80008f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f4:	4854      	ldr	r0, [pc, #336]	; (8000a48 <main+0x248>)
 80008f6:	f001 f875 	bl	80019e4 <HAL_GPIO_ReadPin>
 80008fa:	4603      	mov	r3, r0
 80008fc:	74bb      	strb	r3, [r7, #18]
	  val_HS = HS_Calculate_State();
 80008fe:	f7ff ff17 	bl	8000730 <HS_Calculate_State>
 8000902:	4603      	mov	r3, r0
 8000904:	743b      	strb	r3, [r7, #16]
	  if(val_HS == 6 && val_HS != val_HS_OLD && val_HS != val_HS_OLD-1)
 8000906:	7c3b      	ldrb	r3, [r7, #16]
 8000908:	2b06      	cmp	r3, #6
 800090a:	d10b      	bne.n	8000924 <main+0x124>
 800090c:	7c3a      	ldrb	r2, [r7, #16]
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	429a      	cmp	r2, r3
 8000912:	d007      	beq.n	8000924 <main+0x124>
 8000914:	7c3a      	ldrb	r2, [r7, #16]
 8000916:	7dfb      	ldrb	r3, [r7, #23]
 8000918:	3b01      	subs	r3, #1
 800091a:	429a      	cmp	r2, r3
 800091c:	d002      	beq.n	8000924 <main+0x124>
	  {
		  counter++;
 800091e:	7dbb      	ldrb	r3, [r7, #22]
 8000920:	3301      	adds	r3, #1
 8000922:	75bb      	strb	r3, [r7, #22]
	  		  }
	  if(val_HS != val_HS_OLD && val_HS != val_HS_OLD-1){
 8000924:	7c3a      	ldrb	r2, [r7, #16]
 8000926:	7dfb      	ldrb	r3, [r7, #23]
 8000928:	429a      	cmp	r2, r3
 800092a:	d006      	beq.n	800093a <main+0x13a>
 800092c:	7c3a      	ldrb	r2, [r7, #16]
 800092e:	7dfb      	ldrb	r3, [r7, #23]
 8000930:	3b01      	subs	r3, #1
 8000932:	429a      	cmp	r2, r3
 8000934:	d001      	beq.n	800093a <main+0x13a>
		  refresh = true;
 8000936:	2301      	movs	r3, #1
 8000938:	757b      	strb	r3, [r7, #21]
	  }
	  switch (val_HS)
 800093a:	7c3b      	ldrb	r3, [r7, #16]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b05      	cmp	r3, #5
 8000940:	d85a      	bhi.n	80009f8 <main+0x1f8>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <main+0x148>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000961 	.word	0x08000961
 800094c:	08000961 	.word	0x08000961
 8000950:	08000987 	.word	0x08000987
 8000954:	08000987 	.word	0x08000987
 8000958:	080009ad 	.word	0x080009ad
 800095c:	080009d3 	.word	0x080009d3
	  {
	  case 1:
	  case 2:
		  HAL_GPIO_WritePin(S2_H_GPIO_Port, S2_H_Pin, GPIO_PIN_SET); //do HS 2 od HS 6,1 i 3,4 // 5 opposite
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000966:	4837      	ldr	r0, [pc, #220]	; (8000a44 <main+0x244>)
 8000968:	f001 f854 	bl	8001a14 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 800096c:	7c7b      	ldrb	r3, [r7, #17]
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fd68 	bl	8001444 <HAL_Delay>
		  HAL_GPIO_WritePin(S2_L_GPIO_Port, S2_L_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2101      	movs	r1, #1
 8000978:	4833      	ldr	r0, [pc, #204]	; (8000a48 <main+0x248>)
 800097a:	f001 f84b 	bl	8001a14 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 800097e:	7c7b      	ldrb	r3, [r7, #17]
 8000980:	4618      	mov	r0, r3
 8000982:	f000 fd5f 	bl	8001444 <HAL_Delay>
	 case 3:
	 case 4:
		  HAL_GPIO_WritePin(S1_H_GPIO_Port, S1_H_Pin, GPIO_PIN_SET); //do HS 4 od HS 5,6 i 2,3 // 1 opposite
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098c:	482d      	ldr	r0, [pc, #180]	; (8000a44 <main+0x244>)
 800098e:	f001 f841 	bl	8001a14 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 8000992:	7c7b      	ldrb	r3, [r7, #17]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fd55 	bl	8001444 <HAL_Delay>
		  HAL_GPIO_WritePin(S1_L_GPIO_Port, S1_L_Pin, GPIO_PIN_SET);
 800099a:	2201      	movs	r2, #1
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	4829      	ldr	r0, [pc, #164]	; (8000a44 <main+0x244>)
 80009a0:	f001 f838 	bl	8001a14 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 80009a4:	7c7b      	ldrb	r3, [r7, #17]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fd4c 	bl	8001444 <HAL_Delay>

	 case 5:
		  HAL_GPIO_WritePin(S3_H_GPIO_Port, S3_H_Pin, GPIO_PIN_SET); // do HS 6 od HS 4,5 i 1,2 // 3 opposite
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b2:	4824      	ldr	r0, [pc, #144]	; (8000a44 <main+0x244>)
 80009b4:	f001 f82e 	bl	8001a14 <HAL_GPIO_WritePin>
	  	  HAL_Delay(delay);
 80009b8:	7c7b      	ldrb	r3, [r7, #17]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fd42 	bl	8001444 <HAL_Delay>
		  HAL_GPIO_WritePin(S3_L_GPIO_Port, S3_L_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2102      	movs	r1, #2
 80009c4:	4820      	ldr	r0, [pc, #128]	; (8000a48 <main+0x248>)
 80009c6:	f001 f825 	bl	8001a14 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 80009ca:	7c7b      	ldrb	r3, [r7, #17]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fd39 	bl	8001444 <HAL_Delay>
	 case 6:
		  HAL_GPIO_WritePin(S2_H_GPIO_Port, S2_H_Pin, GPIO_PIN_SET); //do HS 2 od HS 6,1 i 3,4 // 5 opposite
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d8:	481a      	ldr	r0, [pc, #104]	; (8000a44 <main+0x244>)
 80009da:	f001 f81b 	bl	8001a14 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 80009de:	7c7b      	ldrb	r3, [r7, #17]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fd2f 	bl	8001444 <HAL_Delay>
		  HAL_GPIO_WritePin(S2_L_GPIO_Port, S2_L_Pin, GPIO_PIN_SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	2101      	movs	r1, #1
 80009ea:	4817      	ldr	r0, [pc, #92]	; (8000a48 <main+0x248>)
 80009ec:	f001 f812 	bl	8001a14 <HAL_GPIO_WritePin>
		  HAL_Delay(delay);
 80009f0:	7c7b      	ldrb	r3, [r7, #17]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fd26 	bl	8001444 <HAL_Delay>
	  //default:
	  }
	  HAL_Delay(delay);
 80009f8:	7c7b      	ldrb	r3, [r7, #17]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fd22 	bl	8001444 <HAL_Delay>


		  if(refresh)
 8000a00:	7d7b      	ldrb	r3, [r7, #21]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f43f af46 	beq.w	8000894 <main+0x94>
		  {
			  val_HS_OLD = val_HS;
 8000a08:	7c3b      	ldrb	r3, [r7, #16]
 8000a0a:	75fb      	strb	r3, [r7, #23]
			  revolution = counter/15;
 8000a0c:	7dbb      	ldrb	r3, [r7, #22]
 8000a0e:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <main+0x254>)
 8000a10:	fba2 2303 	umull	r2, r3, r2, r3
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	73fb      	strb	r3, [r7, #15]
			  printf("Sensor 1: %d   Sensor 2: %d   Sensor3: %d    HS: %d    Counter: %d  Revolution: %d\n ",val_H1,val_H2,val_H3,val_HS, counter, revolution);
 8000a18:	7d38      	ldrb	r0, [r7, #20]
 8000a1a:	7cfc      	ldrb	r4, [r7, #19]
 8000a1c:	7cbd      	ldrb	r5, [r7, #18]
 8000a1e:	7c3b      	ldrb	r3, [r7, #16]
 8000a20:	7dba      	ldrb	r2, [r7, #22]
 8000a22:	7bf9      	ldrb	r1, [r7, #15]
 8000a24:	9102      	str	r1, [sp, #8]
 8000a26:	9201      	str	r2, [sp, #4]
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	462b      	mov	r3, r5
 8000a2c:	4622      	mov	r2, r4
 8000a2e:	4601      	mov	r1, r0
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <main+0x258>)
 8000a32:	f003 fe1f 	bl	8004674 <iprintf>
			  refresh = false;
 8000a36:	2300      	movs	r3, #0
 8000a38:	757b      	strb	r3, [r7, #21]
  {
 8000a3a:	e72b      	b.n	8000894 <main+0x94>
 8000a3c:	08005628 	.word	0x08005628
 8000a40:	2000018c 	.word	0x2000018c
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	20000144 	.word	0x20000144
 8000a50:	20000090 	.word	0x20000090
 8000a54:	88888889 	.word	0x88888889
 8000a58:	08005658 	.word	0x08005658

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	; 0x50
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	2234      	movs	r2, #52	; 0x34
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 fdfa 	bl	8004664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <SystemClock_Config+0xd8>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	4a2a      	ldr	r2, [pc, #168]	; (8000b34 <SystemClock_Config+0xd8>)
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a90:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <SystemClock_Config+0xd8>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <SystemClock_Config+0xdc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aa8:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <SystemClock_Config+0xdc>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <SystemClock_Config+0xdc>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000abc:	2305      	movs	r3, #5
 8000abe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aca:	2302      	movs	r3, #2
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ace:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ad8:	2332      	movs	r3, #50	; 0x32
 8000ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 fe51 	bl	8002794 <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000af8:	f000 f820 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	230f      	movs	r3, #15
 8000afe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b00:	2302      	movs	r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b12:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 ffc6 	bl	8001aac <HAL_RCC_ClockConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b26:	f000 f809 	bl	8000b3c <Error_Handler>
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	3750      	adds	r7, #80	; 0x50
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40007000 	.word	0x40007000

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
   //User can add his own implementation to report the HAL error return state

  /* USER CODE END Error_Handler_Debug */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_RTC_Init+0x44>)
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <MX_RTC_Init+0x48>)
 8000b54:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_RTC_Init+0x44>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_RTC_Init+0x44>)
 8000b5e:	227f      	movs	r2, #127	; 0x7f
 8000b60:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_RTC_Init+0x44>)
 8000b64:	22ff      	movs	r2, #255	; 0xff
 8000b66:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_RTC_Init+0x44>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_RTC_Init+0x44>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_RTC_Init+0x44>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_RTC_Init+0x44>)
 8000b7c:	f002 f8a8 	bl	8002cd0 <HAL_RTC_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b86:	f7ff ffd9 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000090 	.word	0x20000090
 8000b94:	40002800 	.word	0x40002800

08000b98 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b09a      	sub	sp, #104	; 0x68
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	225c      	movs	r2, #92	; 0x5c
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f003 fd5b 	bl	8004664 <memset>
  if(rtcHandle->Instance==RTC)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a0c      	ldr	r2, [pc, #48]	; (8000be4 <HAL_RTC_MspInit+0x4c>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d111      	bne.n	8000bdc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bb8:	2320      	movs	r3, #32
 8000bba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 f88a 	bl	8001ce0 <HAL_RCCEx_PeriphCLKConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000bd2:	f7ff ffb3 	bl	8000b3c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <HAL_RTC_MspInit+0x50>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3768      	adds	r7, #104	; 0x68
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40002800 	.word	0x40002800
 8000be8:	42470e3c 	.word	0x42470e3c

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c2a:	2007      	movs	r0, #7
 8000c2c:	f000 fcfe 	bl	800162c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 fbb8 	bl	8001404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(H2_Pin);
 8000c9c:	2008      	movs	r0, #8
 8000c9e:	f000 feed 	bl	8001a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(H3_Pin);
 8000caa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cae:	f000 fee5 	bl	8001a7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cb2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cb6:	f000 fee1 	bl	8001a7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(H1_Pin);
 8000cba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000cbe:	f000 fedd 	bl	8001a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <TIM7_IRQHandler+0x18>)
 8000cce:	f002 fab2 	bl	8003236 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <TIM7_IRQHandler+0x1c>)
 8000cd6:	f000 feb6 	bl	8001a46 <HAL_GPIO_TogglePin>
//
//	debug_printf("Global State: %d\r\n", glob_state);
//	SS_Commutate_Type6(glob_state);

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000144 	.word	0x20000144
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	switch (gpio_pin) {
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cf8:	d00d      	beq.n	8000d16 <HAL_GPIO_EXTI_Callback+0x2e>
 8000cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cfe:	dc0f      	bgt.n	8000d20 <HAL_GPIO_EXTI_Callback+0x38>
 8000d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d04:	d00e      	beq.n	8000d24 <HAL_GPIO_EXTI_Callback+0x3c>
 8000d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d0a:	dc09      	bgt.n	8000d20 <HAL_GPIO_EXTI_Callback+0x38>
 8000d0c:	2b08      	cmp	r3, #8
 8000d0e:	d002      	beq.n	8000d16 <HAL_GPIO_EXTI_Callback+0x2e>
 8000d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d14:	d104      	bne.n	8000d20 <HAL_GPIO_EXTI_Callback+0x38>
		case HALL1_GPIO_PIN:
		case HALL2_GPIO_PIN:
		case HALL3_GPIO_PIN:
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d16:	2120      	movs	r1, #32
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x48>)
 8000d1a:	f000 fe94 	bl	8001a46 <HAL_GPIO_TogglePin>
			break;
 8000d1e:	e002      	b.n	8000d26 <HAL_GPIO_EXTI_Callback+0x3e>
//			SS_Commutate_Type3(glob_state);

			break;
		}
		default:
			break;
 8000d20:	bf00      	nop
 8000d22:	e000      	b.n	8000d26 <HAL_GPIO_EXTI_Callback+0x3e>
			break;
 8000d24:	bf00      	nop
	}
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40020000 	.word	0x40020000

08000d34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e00a      	b.n	8000d5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d46:	f3af 8000 	nop.w
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	b2ca      	uxtb	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dbf0      	blt.n	8000d46 <_read+0x12>
	}

return len;
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	e009      	b.n	8000d94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	60ba      	str	r2, [r7, #8]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fd19 	bl	80007c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dbf1      	blt.n	8000d80 <_write+0x12>
	}
	return len;
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_close>:

int _close(int file)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
	return -1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dce:	605a      	str	r2, [r3, #4]
	return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_isatty>:

int _isatty(int file)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
	return 1;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
	return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <_sbrk+0x50>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <_sbrk+0x16>
		heap_end = &end;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <_sbrk+0x50>)
 8000e22:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <_sbrk+0x54>)
 8000e24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <_sbrk+0x50>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <_sbrk+0x50>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4413      	add	r3, r2
 8000e34:	466a      	mov	r2, sp
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d907      	bls.n	8000e4a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e3a:	f003 fbe9 	bl	8004610 <__errno>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	220c      	movs	r2, #12
 8000e42:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
 8000e48:	e006      	b.n	8000e58 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <_sbrk+0x50>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	4a03      	ldr	r2, [pc, #12]	; (8000e60 <_sbrk+0x50>)
 8000e54:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200000b0 	.word	0x200000b0
 8000e64:	200001e8 	.word	0x200001e8

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <SystemInit+0x28>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <SystemInit+0x28>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SystemInit+0x28>)
 8000e7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e82:	609a      	str	r2, [r3, #8]
#endif
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b096      	sub	sp, #88	; 0x58
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	615a      	str	r2, [r3, #20]
 8000ec4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2220      	movs	r2, #32
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f003 fbc9 	bl	8004664 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ed2:	4b4a      	ldr	r3, [pc, #296]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000ed4:	4a4a      	ldr	r2, [pc, #296]	; (8001000 <MX_TIM1_Init+0x16c>)
 8000ed6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ed8:	4b48      	ldr	r3, [pc, #288]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b47      	ldr	r3, [pc, #284]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ee4:	4b45      	ldr	r3, [pc, #276]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eec:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ef2:	4b42      	ldr	r3, [pc, #264]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	4b40      	ldr	r3, [pc, #256]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000efe:	483f      	ldr	r0, [pc, #252]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000f00:	f002 f881 	bl	8003006 <HAL_TIM_Base_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f0a:	f7ff fe17 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f12:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4838      	ldr	r0, [pc, #224]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000f1c:	f002 faf0 	bl	8003500 <HAL_TIM_ConfigClockSource>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f26:	f7ff fe09 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000f2a:	4834      	ldr	r0, [pc, #208]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000f2c:	f002 f92a 	bl	8003184 <HAL_TIM_OC_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f36:	f7ff fe01 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f46:	4619      	mov	r1, r3
 8000f48:	482c      	ldr	r0, [pc, #176]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000f4a:	f002 febd 	bl	8003cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f54:	f7ff fdf2 	bl	8000b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f64:	2300      	movs	r3, #0
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	481f      	ldr	r0, [pc, #124]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000f7e:	f002 fa63 	bl	8003448 <HAL_TIM_OC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000f88:	f7ff fdd8 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	2204      	movs	r2, #4
 8000f92:	4619      	mov	r1, r3
 8000f94:	4819      	ldr	r0, [pc, #100]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000f96:	f002 fa57 	bl	8003448 <HAL_TIM_OC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000fa0:	f7ff fdcc 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	2208      	movs	r2, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	4813      	ldr	r0, [pc, #76]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000fae:	f002 fa4b 	bl	8003448 <HAL_TIM_OC_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000fb8:	f7ff fdc0 	bl	8000b3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4807      	ldr	r0, [pc, #28]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000fe0:	f002 feee 	bl	8003dc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000fea:	f7ff fda7 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fee:	4803      	ldr	r0, [pc, #12]	; (8000ffc <MX_TIM1_Init+0x168>)
 8000ff0:	f000 f8e0 	bl	80011b4 <HAL_TIM_MspPostInit>

}
 8000ff4:	bf00      	nop
 8000ff6:	3758      	adds	r7, #88	; 0x58
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200000b4 	.word	0x200000b4
 8001000:	40010000 	.word	0x40010000

08001004 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001018:	463b      	mov	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <MX_TIM3_Init+0x94>)
 8001022:	4a1e      	ldr	r2, [pc, #120]	; (800109c <MX_TIM3_Init+0x98>)
 8001024:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8999;
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_TIM3_Init+0x94>)
 8001028:	f242 3227 	movw	r2, #8999	; 0x2327
 800102c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <MX_TIM3_Init+0x94>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <MX_TIM3_Init+0x94>)
 8001036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800103a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <MX_TIM3_Init+0x94>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_TIM3_Init+0x94>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001048:	4813      	ldr	r0, [pc, #76]	; (8001098 <MX_TIM3_Init+0x94>)
 800104a:	f001 ffdc 	bl	8003006 <HAL_TIM_Base_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001054:	f7ff fd72 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	4619      	mov	r1, r3
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <MX_TIM3_Init+0x94>)
 8001066:	f002 fa4b 	bl	8003500 <HAL_TIM_ConfigClockSource>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001070:	f7ff fd64 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_TIM3_Init+0x94>)
 8001082:	f002 fe21 	bl	8003cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800108c:	f7ff fd56 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200000fc 	.word	0x200000fc
 800109c:	40000400 	.word	0x40000400

080010a0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a6:	463b      	mov	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_TIM7_Init+0x64>)
 80010b0:	4a15      	ldr	r2, [pc, #84]	; (8001108 <MX_TIM7_Init+0x68>)
 80010b2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1;
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_TIM7_Init+0x64>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_TIM7_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 44999;
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_TIM7_Init+0x64>)
 80010c2:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80010c6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_TIM7_Init+0x64>)
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <MX_TIM7_Init+0x64>)
 80010d0:	f001 ff99 	bl	8003006 <HAL_TIM_Base_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80010da:	f7ff fd2f 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_TIM7_Init+0x64>)
 80010ec:	f002 fdec 	bl	8003cc8 <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80010f6:	f7ff fd21 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000144 	.word	0x20000144
 8001108:	40001400 	.word	0x40001400

0800110c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <HAL_TIM_Base_MspInit+0x98>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d10e      	bne.n	800113c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800113a:	e02e      	b.n	800119a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a1a      	ldr	r2, [pc, #104]	; (80011ac <HAL_TIM_Base_MspInit+0xa0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d10e      	bne.n	8001164 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_TIM_Base_MspInit+0x9c>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a16      	ldr	r2, [pc, #88]	; (80011a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
}
 8001162:	e01a      	b.n	800119a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM7)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <HAL_TIM_Base_MspInit+0xa4>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d115      	bne.n	800119a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2037      	movs	r0, #55	; 0x37
 8001190:	f000 fa57 	bl	8001642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001194:	2037      	movs	r0, #55	; 0x37
 8001196:	f000 fa70 	bl	800167a <HAL_NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40010000 	.word	0x40010000
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40000400 	.word	0x40000400
 80011b0:	40001400 	.word	0x40001400

080011b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <HAL_TIM_MspPostInit+0x68>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d11e      	bne.n	8001214 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_TIM_MspPostInit+0x6c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a10      	ldr	r2, [pc, #64]	; (8001220 <HAL_TIM_MspPostInit+0x6c>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_TIM_MspPostInit+0x6c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = S1_H_Pin|S2_H_Pin|S3_H_Pin;
 80011f2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80011f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001204:	2301      	movs	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4619      	mov	r1, r3
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <HAL_TIM_MspPostInit+0x70>)
 8001210:	f000 fa54 	bl	80016bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40010000 	.word	0x40010000
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000

08001228 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <MX_USART2_UART_Init+0x50>)
 8001230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001260:	f002 fe14 	bl	8003e8c <HAL_UART_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800126a:	f7ff fc67 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000018c 	.word	0x2000018c
 8001278:	40004400 	.word	0x40004400

0800127c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a19      	ldr	r2, [pc, #100]	; (8001300 <HAL_UART_MspInit+0x84>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d12b      	bne.n	80012f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_UART_MspInit+0x88>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_UART_MspInit+0x88>)
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_UART_MspInit+0x88>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_UART_MspInit+0x88>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <HAL_UART_MspInit+0x88>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_UART_MspInit+0x88>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012d6:	230c      	movs	r3, #12
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e6:	2307      	movs	r3, #7
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <HAL_UART_MspInit+0x8c>)
 80012f2:	f000 f9e3 	bl	80016bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40004400 	.word	0x40004400
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000

0800130c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001310:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001312:	e003      	b.n	800131c <LoopCopyDataInit>

08001314 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001316:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001318:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800131a:	3104      	adds	r1, #4

0800131c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001320:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001322:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001324:	d3f6      	bcc.n	8001314 <CopyDataInit>
  ldr  r2, =_sbss
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001328:	e002      	b.n	8001330 <LoopFillZerobss>

0800132a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800132a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800132c:	f842 3b04 	str.w	r3, [r2], #4

08001330 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001332:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001334:	d3f9      	bcc.n	800132a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001336:	f7ff fd97 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133a:	f003 f96f 	bl	800461c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133e:	f7ff fa5f 	bl	8000800 <main>
  bx  lr    
 8001342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001348:	08005770 	.word	0x08005770
  ldr  r0, =_sdata
 800134c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001350:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001354:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001358:	200001e4 	.word	0x200001e4

0800135c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC_IRQHandler>
	...

08001360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_Init+0x40>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <HAL_Init+0x40>)
 800136a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <HAL_Init+0x40>)
 8001376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_Init+0x40>)
 8001382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001388:	2003      	movs	r0, #3
 800138a:	f000 f94f 	bl	800162c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800138e:	2000      	movs	r0, #0
 8001390:	f000 f808 	bl	80013a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001394:	f7ff fc2a 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023c00 	.word	0x40023c00

080013a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_InitTick+0x54>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x58>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80013be:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f967 	bl	8001696 <HAL_SYSTICK_Config>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00e      	b.n	80013f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b0f      	cmp	r3, #15
 80013d6:	d80a      	bhi.n	80013ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d8:	2200      	movs	r2, #0
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f000 f92f 	bl	8001642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <HAL_InitTick+0x5c>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e000      	b.n	80013f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000008 	.word	0x20000008
 8001400:	20000004 	.word	0x20000004

08001404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x20>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x24>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_IncTick+0x24>)
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008
 8001428:	200001d0 	.word	0x200001d0

0800142c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_GetTick+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200001d0 	.word	0x200001d0

08001444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff ffee 	bl	800142c <HAL_GetTick>
 8001450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145c:	d005      	beq.n	800146a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_Delay+0x44>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800146a:	bf00      	nop
 800146c:	f7ff ffde 	bl	800142c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	d8f7      	bhi.n	800146c <HAL_Delay+0x28>
  {
  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008

0800148c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db0b      	blt.n	800151a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	4907      	ldr	r1, [pc, #28]	; (8001528 <__NVIC_EnableIRQ+0x38>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2001      	movs	r0, #1
 8001512:	fa00 f202 	lsl.w	r2, r0, r2
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000e100 	.word	0xe000e100

0800152c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db0a      	blt.n	8001556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	490c      	ldr	r1, [pc, #48]	; (8001578 <__NVIC_SetPriority+0x4c>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001554:	e00a      	b.n	800156c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <__NVIC_SetPriority+0x50>)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3b04      	subs	r3, #4
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	440b      	add	r3, r1
 800156a:	761a      	strb	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f1c3 0307 	rsb	r3, r3, #7
 800159a:	2b04      	cmp	r3, #4
 800159c:	bf28      	it	cs
 800159e:	2304      	movcs	r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d902      	bls.n	80015b0 <NVIC_EncodePriority+0x30>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	e000      	b.n	80015b2 <NVIC_EncodePriority+0x32>
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43d9      	mvns	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	4313      	orrs	r3, r2
         );
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f8:	d301      	bcc.n	80015fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00f      	b.n	800161e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <SysTick_Config+0x40>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001606:	210f      	movs	r1, #15
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f7ff ff8e 	bl	800152c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <SysTick_Config+0x40>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <SysTick_Config+0x40>)
 8001618:	2207      	movs	r2, #7
 800161a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	e000e010 	.word	0xe000e010

0800162c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff29 	bl	800148c <__NVIC_SetPriorityGrouping>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001654:	f7ff ff3e 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 8001658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f7ff ff8e 	bl	8001580 <NVIC_EncodePriority>
 8001664:	4602      	mov	r2, r0
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff5d 	bl	800152c <__NVIC_SetPriority>
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff31 	bl	80014f0 <__NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffa2 	bl	80015e8 <SysTick_Config>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	e165      	b.n	80019a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016d8:	2201      	movs	r2, #1
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	f040 8154 	bne.w	800199e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d005      	beq.n	800170e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800170a:	2b02      	cmp	r3, #2
 800170c:	d130      	bne.n	8001770 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001744:	2201      	movs	r2, #1
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 0201 	and.w	r2, r3, #1
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b03      	cmp	r3, #3
 800177a:	d017      	beq.n	80017ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d123      	bne.n	8001800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	08da      	lsrs	r2, r3, #3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3208      	adds	r2, #8
 80017c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	220f      	movs	r2, #15
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	08da      	lsrs	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3208      	adds	r2, #8
 80017fa:	69b9      	ldr	r1, [r7, #24]
 80017fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2203      	movs	r2, #3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0203 	and.w	r2, r3, #3
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80ae 	beq.w	800199e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b5d      	ldr	r3, [pc, #372]	; (80019bc <HAL_GPIO_Init+0x300>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	4a5c      	ldr	r2, [pc, #368]	; (80019bc <HAL_GPIO_Init+0x300>)
 800184c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001850:	6453      	str	r3, [r2, #68]	; 0x44
 8001852:	4b5a      	ldr	r3, [pc, #360]	; (80019bc <HAL_GPIO_Init+0x300>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800185e:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <HAL_GPIO_Init+0x304>)
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	3302      	adds	r3, #2
 8001866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	220f      	movs	r2, #15
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4f      	ldr	r2, [pc, #316]	; (80019c4 <HAL_GPIO_Init+0x308>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d025      	beq.n	80018d6 <HAL_GPIO_Init+0x21a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4e      	ldr	r2, [pc, #312]	; (80019c8 <HAL_GPIO_Init+0x30c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d01f      	beq.n	80018d2 <HAL_GPIO_Init+0x216>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4d      	ldr	r2, [pc, #308]	; (80019cc <HAL_GPIO_Init+0x310>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d019      	beq.n	80018ce <HAL_GPIO_Init+0x212>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4c      	ldr	r2, [pc, #304]	; (80019d0 <HAL_GPIO_Init+0x314>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d013      	beq.n	80018ca <HAL_GPIO_Init+0x20e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4b      	ldr	r2, [pc, #300]	; (80019d4 <HAL_GPIO_Init+0x318>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00d      	beq.n	80018c6 <HAL_GPIO_Init+0x20a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4a      	ldr	r2, [pc, #296]	; (80019d8 <HAL_GPIO_Init+0x31c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d007      	beq.n	80018c2 <HAL_GPIO_Init+0x206>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a49      	ldr	r2, [pc, #292]	; (80019dc <HAL_GPIO_Init+0x320>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <HAL_GPIO_Init+0x202>
 80018ba:	2306      	movs	r3, #6
 80018bc:	e00c      	b.n	80018d8 <HAL_GPIO_Init+0x21c>
 80018be:	2307      	movs	r3, #7
 80018c0:	e00a      	b.n	80018d8 <HAL_GPIO_Init+0x21c>
 80018c2:	2305      	movs	r3, #5
 80018c4:	e008      	b.n	80018d8 <HAL_GPIO_Init+0x21c>
 80018c6:	2304      	movs	r3, #4
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x21c>
 80018ca:	2303      	movs	r3, #3
 80018cc:	e004      	b.n	80018d8 <HAL_GPIO_Init+0x21c>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_Init+0x21c>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x21c>
 80018d6:	2300      	movs	r3, #0
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	f002 0203 	and.w	r2, r2, #3
 80018de:	0092      	lsls	r2, r2, #2
 80018e0:	4093      	lsls	r3, r2
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e8:	4935      	ldr	r1, [pc, #212]	; (80019c0 <HAL_GPIO_Init+0x304>)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f6:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <HAL_GPIO_Init+0x324>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800191a:	4a31      	ldr	r2, [pc, #196]	; (80019e0 <HAL_GPIO_Init+0x324>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001920:	4b2f      	ldr	r3, [pc, #188]	; (80019e0 <HAL_GPIO_Init+0x324>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001944:	4a26      	ldr	r2, [pc, #152]	; (80019e0 <HAL_GPIO_Init+0x324>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800194a:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_GPIO_Init+0x324>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800196e:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <HAL_GPIO_Init+0x324>)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <HAL_GPIO_Init+0x324>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001998:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <HAL_GPIO_Init+0x324>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3301      	adds	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	f67f ae96 	bls.w	80016d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40013800 	.word	0x40013800
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40021400 	.word	0x40021400
 80019dc:	40021800 	.word	0x40021800
 80019e0:	40013c00 	.word	0x40013c00

080019e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	e001      	b.n	8001a06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
 8001a20:	4613      	mov	r3, r2
 8001a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a24:	787b      	ldrb	r3, [r7, #1]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a30:	e003      	b.n	8001a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	619a      	str	r2, [r3, #24]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a58:	887a      	ldrh	r2, [r7, #2]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	041a      	lsls	r2, r3, #16
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	400b      	ands	r3, r1
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	619a      	str	r2, [r3, #24]
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f924 	bl	8000ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40013c00 	.word	0x40013c00

08001aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0cc      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b68      	ldr	r3, [pc, #416]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d90c      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b65      	ldr	r3, [pc, #404]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0b8      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d020      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a58      	ldr	r2, [pc, #352]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a52      	ldr	r2, [pc, #328]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	494d      	ldr	r1, [pc, #308]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d044      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d119      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e07f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e06f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e067      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8a:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f023 0203 	bic.w	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4934      	ldr	r1, [pc, #208]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b9c:	f7ff fc46 	bl	800142c <HAL_GetTick>
 8001ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba4:	f7ff fc42 	bl	800142c <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e04f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 020c 	and.w	r2, r3, #12
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1eb      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d20c      	bcs.n	8001bf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e032      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4916      	ldr	r1, [pc, #88]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	490e      	ldr	r1, [pc, #56]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c32:	f000 fb7f 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	490a      	ldr	r1, [pc, #40]	; (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	5ccb      	ldrb	r3, [r1, r3]
 8001c46:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fba6 	bl	80013a4 <HAL_InitTick>

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023c00 	.word	0x40023c00
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	080056b0 	.word	0x080056b0
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000

08001c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c94:	f7ff fff0 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0a9b      	lsrs	r3, r3, #10
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	4903      	ldr	r1, [pc, #12]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	080056c0 	.word	0x080056c0

08001cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cbc:	f7ff ffdc 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0b5b      	lsrs	r3, r3, #13
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4903      	ldr	r1, [pc, #12]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	080056c0 	.word	0x080056c0

08001ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08c      	sub	sp, #48	; 0x30
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d010      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001d18:	4b6f      	ldr	r3, [pc, #444]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d1e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d26:	496c      	ldr	r1, [pc, #432]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001d36:	2301      	movs	r3, #1
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d010      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001d46:	4b64      	ldr	r3, [pc, #400]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d4c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d54:	4960      	ldr	r1, [pc, #384]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001d64:	2301      	movs	r3, #1
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d017      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d74:	4b58      	ldr	r3, [pc, #352]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4955      	ldr	r1, [pc, #340]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d92:	d101      	bne.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001d94:	2301      	movs	r3, #1
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001da0:	2301      	movs	r3, #1
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d017      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001db0:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbe:	4946      	ldr	r1, [pc, #280]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 808a 	beq.w	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	4b39      	ldr	r3, [pc, #228]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a38      	ldr	r2, [pc, #224]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfe:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e0a:	4b34      	ldr	r3, [pc, #208]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a33      	ldr	r2, [pc, #204]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e16:	f7ff fb09 	bl	800142c <HAL_GetTick>
 8001e1a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7ff fb05 	bl	800142c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e278      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e30:	4b2a      	ldr	r3, [pc, #168]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e3c:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e44:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d02f      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e54:	6a3a      	ldr	r2, [r7, #32]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d028      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e62:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d114      	bne.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e82:	f7ff fad3 	bl	800142c <HAL_GetTick>
 8001e86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff facf 	bl	800142c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e240      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ee      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001eb8:	d114      	bne.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ece:	4902      	ldr	r1, [pc, #8]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]
 8001ed4:	e00c      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	42470e40 	.word	0x42470e40
 8001ee4:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a49      	ldr	r2, [pc, #292]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001eea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001eee:	6093      	str	r3, [r2, #8]
 8001ef0:	4b47      	ldr	r3, [pc, #284]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ef2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efc:	4944      	ldr	r1, [pc, #272]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d004      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001f14:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001f16:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00a      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001f24:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	4937      	ldr	r1, [pc, #220]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00a      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f46:	4b32      	ldr	r3, [pc, #200]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f54:	492e      	ldr	r1, [pc, #184]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d011      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	4926      	ldr	r1, [pc, #152]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f86:	d101      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	491a      	ldr	r1, [pc, #104]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d011      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc8:	4911      	ldr	r1, [pc, #68]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fd8:	d101      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fec:	f040 80ff 	bne.w	80021ee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ff6:	f7ff fa19 	bl	800142c <HAL_GetTick>
 8001ffa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ffc:	e00e      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ffe:	f7ff fa15 	bl	800142c <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d907      	bls.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e188      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002010:	40023800 	.word	0x40023800
 8002014:	424711e0 	.word	0x424711e0
 8002018:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800201c:	4b7e      	ldr	r3, [pc, #504]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1ea      	bne.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	2b00      	cmp	r3, #0
 800203a:	d009      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002044:	2b00      	cmp	r3, #0
 8002046:	d028      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204c:	2b00      	cmp	r3, #0
 800204e:	d124      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002050:	4b71      	ldr	r3, [pc, #452]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002056:	0c1b      	lsrs	r3, r3, #16
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	3301      	adds	r3, #1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002062:	4b6d      	ldr	r3, [pc, #436]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002068:	0e1b      	lsrs	r3, r3, #24
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	019b      	lsls	r3, r3, #6
 800207a:	431a      	orrs	r2, r3
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	085b      	lsrs	r3, r3, #1
 8002080:	3b01      	subs	r3, #1
 8002082:	041b      	lsls	r3, r3, #16
 8002084:	431a      	orrs	r2, r3
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	071b      	lsls	r3, r3, #28
 8002092:	4961      	ldr	r1, [pc, #388]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d004      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020ae:	d00a      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d035      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c4:	d130      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80020c6:	4b54      	ldr	r3, [pc, #336]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	3301      	adds	r3, #1
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020d8:	4b4f      	ldr	r3, [pc, #316]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020de:	0f1b      	lsrs	r3, r3, #28
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	019b      	lsls	r3, r3, #6
 80020f0:	431a      	orrs	r2, r3
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	085b      	lsrs	r3, r3, #1
 80020f6:	3b01      	subs	r3, #1
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	061b      	lsls	r3, r3, #24
 8002102:	431a      	orrs	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	071b      	lsls	r3, r3, #28
 8002108:	4943      	ldr	r1, [pc, #268]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002110:	4b41      	ldr	r3, [pc, #260]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002116:	f023 021f 	bic.w	r2, r3, #31
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	3b01      	subs	r3, #1
 8002120:	493d      	ldr	r1, [pc, #244]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d029      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800213c:	d124      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800213e:	4b36      	ldr	r3, [pc, #216]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002144:	0c1b      	lsrs	r3, r3, #16
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	3301      	adds	r3, #1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002150:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002156:	0f1b      	lsrs	r3, r3, #28
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	019b      	lsls	r3, r3, #6
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	085b      	lsrs	r3, r3, #1
 8002170:	3b01      	subs	r3, #1
 8002172:	041b      	lsls	r3, r3, #16
 8002174:	431a      	orrs	r2, r3
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	061b      	lsls	r3, r3, #24
 800217a:	431a      	orrs	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	071b      	lsls	r3, r3, #28
 8002180:	4925      	ldr	r1, [pc, #148]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002190:	2b00      	cmp	r3, #0
 8002192:	d016      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	019b      	lsls	r3, r3, #6
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	085b      	lsrs	r3, r3, #1
 80021a6:	3b01      	subs	r3, #1
 80021a8:	041b      	lsls	r3, r3, #16
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	061b      	lsls	r3, r3, #24
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	071b      	lsls	r3, r3, #28
 80021ba:	4917      	ldr	r1, [pc, #92]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021c8:	f7ff f930 	bl	800142c <HAL_GetTick>
 80021cc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80021d0:	f7ff f92c 	bl	800142c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e09f      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021e2:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80021ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	f040 8095 	bne.w	8002320 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021fc:	f7ff f916 	bl	800142c <HAL_GetTick>
 8002200:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002202:	e00f      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002204:	f7ff f912 	bl	800142c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d908      	bls.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e085      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	42470068 	.word	0x42470068
 8002220:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002224:	4b41      	ldr	r3, [pc, #260]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800222c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002230:	d0e8      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	2b00      	cmp	r3, #0
 8002244:	d009      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800224e:	2b00      	cmp	r3, #0
 8002250:	d02b      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	2b00      	cmp	r3, #0
 8002258:	d127      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800225a:	4b34      	ldr	r3, [pc, #208]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002260:	0c1b      	lsrs	r3, r3, #16
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	3301      	adds	r3, #1
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	019b      	lsls	r3, r3, #6
 8002276:	431a      	orrs	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	3b01      	subs	r3, #1
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	061b      	lsls	r3, r3, #24
 8002288:	4928      	ldr	r1, [pc, #160]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002290:	4b26      	ldr	r3, [pc, #152]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002296:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	3b01      	subs	r3, #1
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	4922      	ldr	r1, [pc, #136]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d01d      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022be:	d118      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022c0:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	0e1b      	lsrs	r3, r3, #24
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	019b      	lsls	r3, r3, #6
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	3b01      	subs	r3, #1
 80022e2:	041b      	lsls	r3, r3, #16
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	061b      	lsls	r3, r3, #24
 80022ea:	4910      	ldr	r1, [pc, #64]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022f8:	f7ff f898 	bl	800142c <HAL_GetTick>
 80022fc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002300:	f7ff f894 	bl	800142c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e007      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800231a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800231e:	d1ef      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3730      	adds	r7, #48	; 0x30
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	42470070 	.word	0x42470070

08002334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002338:	b0ae      	sub	sp, #184	; 0xb8
 800233a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800235a:	4bcb      	ldr	r3, [pc, #812]	; (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b0c      	cmp	r3, #12
 8002364:	f200 8206 	bhi.w	8002774 <HAL_RCC_GetSysClockFreq+0x440>
 8002368:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <HAL_RCC_GetSysClockFreq+0x3c>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	080023a5 	.word	0x080023a5
 8002374:	08002775 	.word	0x08002775
 8002378:	08002775 	.word	0x08002775
 800237c:	08002775 	.word	0x08002775
 8002380:	080023ad 	.word	0x080023ad
 8002384:	08002775 	.word	0x08002775
 8002388:	08002775 	.word	0x08002775
 800238c:	08002775 	.word	0x08002775
 8002390:	080023b5 	.word	0x080023b5
 8002394:	08002775 	.word	0x08002775
 8002398:	08002775 	.word	0x08002775
 800239c:	08002775 	.word	0x08002775
 80023a0:	080025a5 	.word	0x080025a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023a4:	4bb9      	ldr	r3, [pc, #740]	; (800268c <HAL_RCC_GetSysClockFreq+0x358>)
 80023a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80023aa:	e1e7      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ac:	4bb8      	ldr	r3, [pc, #736]	; (8002690 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023b2:	e1e3      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023b4:	4bb4      	ldr	r3, [pc, #720]	; (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023c0:	4bb1      	ldr	r3, [pc, #708]	; (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d071      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023cc:	4bae      	ldr	r3, [pc, #696]	; (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	2200      	movs	r2, #0
 80023d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023d8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80023dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80023ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023f2:	4622      	mov	r2, r4
 80023f4:	462b      	mov	r3, r5
 80023f6:	f04f 0000 	mov.w	r0, #0
 80023fa:	f04f 0100 	mov.w	r1, #0
 80023fe:	0159      	lsls	r1, r3, #5
 8002400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002404:	0150      	lsls	r0, r2, #5
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4621      	mov	r1, r4
 800240c:	1a51      	subs	r1, r2, r1
 800240e:	6439      	str	r1, [r7, #64]	; 0x40
 8002410:	4629      	mov	r1, r5
 8002412:	eb63 0301 	sbc.w	r3, r3, r1
 8002416:	647b      	str	r3, [r7, #68]	; 0x44
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002424:	4649      	mov	r1, r9
 8002426:	018b      	lsls	r3, r1, #6
 8002428:	4641      	mov	r1, r8
 800242a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800242e:	4641      	mov	r1, r8
 8002430:	018a      	lsls	r2, r1, #6
 8002432:	4641      	mov	r1, r8
 8002434:	1a51      	subs	r1, r2, r1
 8002436:	63b9      	str	r1, [r7, #56]	; 0x38
 8002438:	4649      	mov	r1, r9
 800243a:	eb63 0301 	sbc.w	r3, r3, r1
 800243e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800244c:	4649      	mov	r1, r9
 800244e:	00cb      	lsls	r3, r1, #3
 8002450:	4641      	mov	r1, r8
 8002452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002456:	4641      	mov	r1, r8
 8002458:	00ca      	lsls	r2, r1, #3
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	4603      	mov	r3, r0
 8002460:	4622      	mov	r2, r4
 8002462:	189b      	adds	r3, r3, r2
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
 8002466:	462b      	mov	r3, r5
 8002468:	460a      	mov	r2, r1
 800246a:	eb42 0303 	adc.w	r3, r2, r3
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800247c:	4629      	mov	r1, r5
 800247e:	024b      	lsls	r3, r1, #9
 8002480:	4621      	mov	r1, r4
 8002482:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002486:	4621      	mov	r1, r4
 8002488:	024a      	lsls	r2, r1, #9
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002492:	2200      	movs	r2, #0
 8002494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002498:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800249c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80024a0:	f7fd ff06 	bl	80002b0 <__aeabi_uldivmod>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4613      	mov	r3, r2
 80024aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024ae:	e067      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b0:	4b75      	ldr	r3, [pc, #468]	; (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	2200      	movs	r2, #0
 80024b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80024c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80024ca:	2300      	movs	r3, #0
 80024cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80024ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80024d2:	4622      	mov	r2, r4
 80024d4:	462b      	mov	r3, r5
 80024d6:	f04f 0000 	mov.w	r0, #0
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	0159      	lsls	r1, r3, #5
 80024e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e4:	0150      	lsls	r0, r2, #5
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4621      	mov	r1, r4
 80024ec:	1a51      	subs	r1, r2, r1
 80024ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80024f0:	4629      	mov	r1, r5
 80024f2:	eb63 0301 	sbc.w	r3, r3, r1
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002504:	4649      	mov	r1, r9
 8002506:	018b      	lsls	r3, r1, #6
 8002508:	4641      	mov	r1, r8
 800250a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800250e:	4641      	mov	r1, r8
 8002510:	018a      	lsls	r2, r1, #6
 8002512:	4641      	mov	r1, r8
 8002514:	ebb2 0a01 	subs.w	sl, r2, r1
 8002518:	4649      	mov	r1, r9
 800251a:	eb63 0b01 	sbc.w	fp, r3, r1
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800252a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800252e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002532:	4692      	mov	sl, r2
 8002534:	469b      	mov	fp, r3
 8002536:	4623      	mov	r3, r4
 8002538:	eb1a 0303 	adds.w	r3, sl, r3
 800253c:	623b      	str	r3, [r7, #32]
 800253e:	462b      	mov	r3, r5
 8002540:	eb4b 0303 	adc.w	r3, fp, r3
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002552:	4629      	mov	r1, r5
 8002554:	028b      	lsls	r3, r1, #10
 8002556:	4621      	mov	r1, r4
 8002558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800255c:	4621      	mov	r1, r4
 800255e:	028a      	lsls	r2, r1, #10
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002568:	2200      	movs	r2, #0
 800256a:	673b      	str	r3, [r7, #112]	; 0x70
 800256c:	677a      	str	r2, [r7, #116]	; 0x74
 800256e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002572:	f7fd fe9d 	bl	80002b0 <__aeabi_uldivmod>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4613      	mov	r3, r2
 800257c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002580:	4b41      	ldr	r3, [pc, #260]	; (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	3301      	adds	r3, #1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002596:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800259a:	fbb2 f3f3 	udiv	r3, r2, r3
 800259e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025a2:	e0eb      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a4:	4b38      	ldr	r3, [pc, #224]	; (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b0:	4b35      	ldr	r3, [pc, #212]	; (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d06b      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025bc:	4b32      	ldr	r3, [pc, #200]	; (8002688 <HAL_RCC_GetSysClockFreq+0x354>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	2200      	movs	r2, #0
 80025c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80025c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ce:	663b      	str	r3, [r7, #96]	; 0x60
 80025d0:	2300      	movs	r3, #0
 80025d2:	667b      	str	r3, [r7, #100]	; 0x64
 80025d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80025d8:	4622      	mov	r2, r4
 80025da:	462b      	mov	r3, r5
 80025dc:	f04f 0000 	mov.w	r0, #0
 80025e0:	f04f 0100 	mov.w	r1, #0
 80025e4:	0159      	lsls	r1, r3, #5
 80025e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ea:	0150      	lsls	r0, r2, #5
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4621      	mov	r1, r4
 80025f2:	1a51      	subs	r1, r2, r1
 80025f4:	61b9      	str	r1, [r7, #24]
 80025f6:	4629      	mov	r1, r5
 80025f8:	eb63 0301 	sbc.w	r3, r3, r1
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800260a:	4659      	mov	r1, fp
 800260c:	018b      	lsls	r3, r1, #6
 800260e:	4651      	mov	r1, sl
 8002610:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002614:	4651      	mov	r1, sl
 8002616:	018a      	lsls	r2, r1, #6
 8002618:	4651      	mov	r1, sl
 800261a:	ebb2 0801 	subs.w	r8, r2, r1
 800261e:	4659      	mov	r1, fp
 8002620:	eb63 0901 	sbc.w	r9, r3, r1
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002630:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002634:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002638:	4690      	mov	r8, r2
 800263a:	4699      	mov	r9, r3
 800263c:	4623      	mov	r3, r4
 800263e:	eb18 0303 	adds.w	r3, r8, r3
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	462b      	mov	r3, r5
 8002646:	eb49 0303 	adc.w	r3, r9, r3
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002658:	4629      	mov	r1, r5
 800265a:	024b      	lsls	r3, r1, #9
 800265c:	4621      	mov	r1, r4
 800265e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002662:	4621      	mov	r1, r4
 8002664:	024a      	lsls	r2, r1, #9
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800266e:	2200      	movs	r2, #0
 8002670:	65bb      	str	r3, [r7, #88]	; 0x58
 8002672:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002674:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002678:	f7fd fe1a 	bl	80002b0 <__aeabi_uldivmod>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4613      	mov	r3, r2
 8002682:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002686:	e065      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x420>
 8002688:	40023800 	.word	0x40023800
 800268c:	00f42400 	.word	0x00f42400
 8002690:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002694:	4b3d      	ldr	r3, [pc, #244]	; (800278c <HAL_RCC_GetSysClockFreq+0x458>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	099b      	lsrs	r3, r3, #6
 800269a:	2200      	movs	r2, #0
 800269c:	4618      	mov	r0, r3
 800269e:	4611      	mov	r1, r2
 80026a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026a4:	653b      	str	r3, [r7, #80]	; 0x50
 80026a6:	2300      	movs	r3, #0
 80026a8:	657b      	str	r3, [r7, #84]	; 0x54
 80026aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80026ae:	4642      	mov	r2, r8
 80026b0:	464b      	mov	r3, r9
 80026b2:	f04f 0000 	mov.w	r0, #0
 80026b6:	f04f 0100 	mov.w	r1, #0
 80026ba:	0159      	lsls	r1, r3, #5
 80026bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c0:	0150      	lsls	r0, r2, #5
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4641      	mov	r1, r8
 80026c8:	1a51      	subs	r1, r2, r1
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	4649      	mov	r1, r9
 80026ce:	eb63 0301 	sbc.w	r3, r3, r1
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80026e0:	4659      	mov	r1, fp
 80026e2:	018b      	lsls	r3, r1, #6
 80026e4:	4651      	mov	r1, sl
 80026e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ea:	4651      	mov	r1, sl
 80026ec:	018a      	lsls	r2, r1, #6
 80026ee:	4651      	mov	r1, sl
 80026f0:	1a54      	subs	r4, r2, r1
 80026f2:	4659      	mov	r1, fp
 80026f4:	eb63 0501 	sbc.w	r5, r3, r1
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	00eb      	lsls	r3, r5, #3
 8002702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002706:	00e2      	lsls	r2, r4, #3
 8002708:	4614      	mov	r4, r2
 800270a:	461d      	mov	r5, r3
 800270c:	4643      	mov	r3, r8
 800270e:	18e3      	adds	r3, r4, r3
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	464b      	mov	r3, r9
 8002714:	eb45 0303 	adc.w	r3, r5, r3
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002726:	4629      	mov	r1, r5
 8002728:	028b      	lsls	r3, r1, #10
 800272a:	4621      	mov	r1, r4
 800272c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002730:	4621      	mov	r1, r4
 8002732:	028a      	lsls	r2, r1, #10
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800273c:	2200      	movs	r2, #0
 800273e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002740:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002742:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002746:	f7fd fdb3 	bl	80002b0 <__aeabi_uldivmod>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4613      	mov	r3, r2
 8002750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_RCC_GetSysClockFreq+0x458>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	0f1b      	lsrs	r3, r3, #28
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002766:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002772:	e003      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800277a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002780:	4618      	mov	r0, r3
 8002782:	37b8      	adds	r7, #184	; 0xb8
 8002784:	46bd      	mov	sp, r7
 8002786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	00f42400 	.word	0x00f42400

08002794 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e28d      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 8083 	beq.w	80028ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027b4:	4b94      	ldr	r3, [pc, #592]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d019      	beq.n	80027f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027c0:	4b91      	ldr	r3, [pc, #580]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d106      	bne.n	80027da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027cc:	4b8e      	ldr	r3, [pc, #568]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027d8:	d00c      	beq.n	80027f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027da:	4b8b      	ldr	r3, [pc, #556]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d112      	bne.n	800280c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e6:	4b88      	ldr	r3, [pc, #544]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f2:	d10b      	bne.n	800280c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	4b84      	ldr	r3, [pc, #528]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d05b      	beq.n	80028b8 <HAL_RCC_OscConfig+0x124>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d157      	bne.n	80028b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e25a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002814:	d106      	bne.n	8002824 <HAL_RCC_OscConfig+0x90>
 8002816:	4b7c      	ldr	r3, [pc, #496]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a7b      	ldr	r2, [pc, #492]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e01d      	b.n	8002860 <HAL_RCC_OscConfig+0xcc>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0xb4>
 800282e:	4b76      	ldr	r3, [pc, #472]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a75      	ldr	r2, [pc, #468]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b73      	ldr	r3, [pc, #460]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a72      	ldr	r2, [pc, #456]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0xcc>
 8002848:	4b6f      	ldr	r3, [pc, #444]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a6e      	ldr	r2, [pc, #440]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 800284e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b6c      	ldr	r3, [pc, #432]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a6b      	ldr	r2, [pc, #428]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 800285a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800285e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d013      	beq.n	8002890 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fde0 	bl	800142c <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002870:	f7fe fddc 	bl	800142c <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	; 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e21f      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b61      	ldr	r3, [pc, #388]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0xdc>
 800288e:	e014      	b.n	80028ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fdcc 	bl	800142c <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002898:	f7fe fdc8 	bl	800142c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e20b      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028aa:	4b57      	ldr	r3, [pc, #348]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x104>
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d06f      	beq.n	80029a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028c6:	4b50      	ldr	r3, [pc, #320]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d017      	beq.n	8002902 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028d2:	4b4d      	ldr	r3, [pc, #308]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d105      	bne.n	80028ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028de:	4b4a      	ldr	r3, [pc, #296]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ea:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d11c      	bne.n	8002930 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f6:	4b44      	ldr	r3, [pc, #272]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d116      	bne.n	8002930 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002902:	4b41      	ldr	r3, [pc, #260]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_RCC_OscConfig+0x186>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d001      	beq.n	800291a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e1d3      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291a:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4937      	ldr	r1, [pc, #220]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292e:	e03a      	b.n	80029a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002938:	4b34      	ldr	r3, [pc, #208]	; (8002a0c <HAL_RCC_OscConfig+0x278>)
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7fe fd75 	bl	800142c <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002946:	f7fe fd71 	bl	800142c <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e1b4      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4925      	ldr	r1, [pc, #148]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]
 8002978:	e015      	b.n	80029a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297a:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <HAL_RCC_OscConfig+0x278>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fd54 	bl	800142c <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002988:	f7fe fd50 	bl	800142c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e193      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d036      	beq.n	8002a20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d016      	beq.n	80029e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe fd34 	bl	800142c <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c8:	f7fe fd30 	bl	800142c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e173      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80029dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x234>
 80029e6:	e01b      	b.n	8002a20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_OscConfig+0x27c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7fe fd1d 	bl	800142c <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f4:	e00e      	b.n	8002a14 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f6:	f7fe fd19 	bl	800142c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d907      	bls.n	8002a14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e15c      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	42470000 	.word	0x42470000
 8002a10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a14:	4b8a      	ldr	r3, [pc, #552]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ea      	bne.n	80029f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8097 	beq.w	8002b5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a32:	4b83      	ldr	r3, [pc, #524]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10f      	bne.n	8002a5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	4b7f      	ldr	r3, [pc, #508]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a7e      	ldr	r2, [pc, #504]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b7c      	ldr	r3, [pc, #496]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5e:	4b79      	ldr	r3, [pc, #484]	; (8002c44 <HAL_RCC_OscConfig+0x4b0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d118      	bne.n	8002a9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a6a:	4b76      	ldr	r3, [pc, #472]	; (8002c44 <HAL_RCC_OscConfig+0x4b0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a75      	ldr	r2, [pc, #468]	; (8002c44 <HAL_RCC_OscConfig+0x4b0>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a76:	f7fe fcd9 	bl	800142c <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7e:	f7fe fcd5 	bl	800142c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e118      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	4b6c      	ldr	r3, [pc, #432]	; (8002c44 <HAL_RCC_OscConfig+0x4b0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x31e>
 8002aa4:	4b66      	ldr	r3, [pc, #408]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	4a65      	ldr	r2, [pc, #404]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab0:	e01c      	b.n	8002aec <HAL_RCC_OscConfig+0x358>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x340>
 8002aba:	4b61      	ldr	r3, [pc, #388]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	4a60      	ldr	r2, [pc, #384]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002ac0:	f043 0304 	orr.w	r3, r3, #4
 8002ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac6:	4b5e      	ldr	r3, [pc, #376]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	4a5d      	ldr	r2, [pc, #372]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad2:	e00b      	b.n	8002aec <HAL_RCC_OscConfig+0x358>
 8002ad4:	4b5a      	ldr	r3, [pc, #360]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	4a59      	ldr	r2, [pc, #356]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae0:	4b57      	ldr	r3, [pc, #348]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	4a56      	ldr	r2, [pc, #344]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002ae6:	f023 0304 	bic.w	r3, r3, #4
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d015      	beq.n	8002b20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7fe fc9a 	bl	800142c <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afc:	f7fe fc96 	bl	800142c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e0d7      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b12:	4b4b      	ldr	r3, [pc, #300]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0ee      	beq.n	8002afc <HAL_RCC_OscConfig+0x368>
 8002b1e:	e014      	b.n	8002b4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7fe fc84 	bl	800142c <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7fe fc80 	bl	800142c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0c1      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3e:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1ee      	bne.n	8002b28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b4a:	7dfb      	ldrb	r3, [r7, #23]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d105      	bne.n	8002b5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b50:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	4a3a      	ldr	r2, [pc, #232]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80ad 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b66:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d060      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d145      	bne.n	8002c06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7a:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <HAL_RCC_OscConfig+0x4b4>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fc54 	bl	800142c <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b88:	f7fe fc50 	bl	800142c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e093      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69da      	ldr	r2, [r3, #28]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	019b      	lsls	r3, r3, #6
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	085b      	lsrs	r3, r3, #1
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	041b      	lsls	r3, r3, #16
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	061b      	lsls	r3, r3, #24
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	071b      	lsls	r3, r3, #28
 8002bd2:	491b      	ldr	r1, [pc, #108]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x4b4>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fe fc25 	bl	800142c <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be6:	f7fe fc21 	bl	800142c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e064      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x452>
 8002c04:	e05c      	b.n	8002cc0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <HAL_RCC_OscConfig+0x4b4>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fc0e 	bl	800142c <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fc0a 	bl	800142c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e04d      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_RCC_OscConfig+0x4ac>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x480>
 8002c32:	e045      	b.n	8002cc0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e040      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40007000 	.word	0x40007000
 8002c48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <HAL_RCC_OscConfig+0x538>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d030      	beq.n	8002cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d129      	bne.n	8002cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d122      	bne.n	8002cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d119      	bne.n	8002cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	085b      	lsrs	r3, r3, #1
 8002c94:	3b01      	subs	r3, #1
 8002c96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d10f      	bne.n	8002cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d107      	bne.n	8002cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e066      	b.n	8002db4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7f5b      	ldrb	r3, [r3, #29]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d105      	bne.n	8002cfc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fd ff4e 	bl	8000b98 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	22ca      	movs	r2, #202	; 0xca
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2253      	movs	r2, #83	; 0x53
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8fe 	bl	8002f14 <RTC_EnterInitMode>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d12c      	bne.n	8002d7c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d34:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6899      	ldr	r1, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68d2      	ldr	r2, [r2, #12]
 8002d5c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6919      	ldr	r1, [r3, #16]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	041a      	lsls	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f905 	bl	8002f82 <RTC_ExitInitMode>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d113      	bne.n	8002daa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699a      	ldr	r2, [r3, #24]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	22ff      	movs	r2, #255	; 0xff
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	7f1b      	ldrb	r3, [r3, #28]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RTC_SetDate+0x1c>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e071      	b.n	8002ebc <HAL_RTC_SetDate+0x100>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2202      	movs	r2, #2
 8002de2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10e      	bne.n	8002e08 <HAL_RTC_SetDate+0x4c>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	785b      	ldrb	r3, [r3, #1]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	785b      	ldrb	r3, [r3, #1]
 8002dfa:	f023 0310 	bic.w	r3, r3, #16
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	330a      	adds	r3, #10
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11c      	bne.n	8002e48 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	78db      	ldrb	r3, [r3, #3]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 f8da 	bl	8002fcc <RTC_ByteToBcd2>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	785b      	ldrb	r3, [r3, #1]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f8d3 	bl	8002fcc <RTC_ByteToBcd2>
 8002e26:	4603      	mov	r3, r0
 8002e28:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e2a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	789b      	ldrb	r3, [r3, #2]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f8cb 	bl	8002fcc <RTC_ByteToBcd2>
 8002e36:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e38:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	e00e      	b.n	8002e66 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	78db      	ldrb	r3, [r3, #3]
 8002e4c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	785b      	ldrb	r3, [r3, #1]
 8002e52:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002e54:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002e5a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	22ca      	movs	r2, #202	; 0xca
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2253      	movs	r2, #83	; 0x53
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 f84c 	bl	8002f14 <RTC_EnterInitMode>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e94:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f873 	bl	8002f82 <RTC_ExitInitMode>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d102      	bne.n	8002eac <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	22ff      	movs	r2, #255	; 0xff
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	771a      	strb	r2, [r3, #28]

  return status;
 8002eba:	7cfb      	ldrb	r3, [r7, #19]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd90      	pop	{r4, r7, pc}

08002ec4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ede:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ee0:	f7fe faa4 	bl	800142c <HAL_GetTick>
 8002ee4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ee6:	e009      	b.n	8002efc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ee8:	f7fe faa0 	bl	800142c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ef6:	d901      	bls.n	8002efc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e007      	b.n	8002f0c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0ee      	beq.n	8002ee8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d122      	bne.n	8002f78 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f40:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f42:	f7fe fa73 	bl	800142c <HAL_GetTick>
 8002f46:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f48:	e00c      	b.n	8002f64 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f4a:	f7fe fa6f 	bl	800142c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f58:	d904      	bls.n	8002f64 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d102      	bne.n	8002f78 <RTC_EnterInitMode+0x64>
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d1e8      	bne.n	8002f4a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f9c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff89 	bl	8002ec4 <HAL_RTC_WaitForSynchro>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d004      	beq.n	8002fc2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002fda:	e005      	b.n	8002fe8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	3b0a      	subs	r3, #10
 8002fe6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	2b09      	cmp	r3, #9
 8002fec:	d8f6      	bhi.n	8002fdc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	b2db      	uxtb	r3, r3
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e041      	b.n	800309c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d106      	bne.n	8003032 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7fe f86d 	bl	800110c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2202      	movs	r2, #2
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3304      	adds	r3, #4
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f000 fb55 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d001      	beq.n	80030bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e04e      	b.n	800315a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a23      	ldr	r2, [pc, #140]	; (8003168 <HAL_TIM_Base_Start_IT+0xc4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d022      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x80>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e6:	d01d      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x80>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1f      	ldr	r2, [pc, #124]	; (800316c <HAL_TIM_Base_Start_IT+0xc8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d018      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x80>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1e      	ldr	r2, [pc, #120]	; (8003170 <HAL_TIM_Base_Start_IT+0xcc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d013      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x80>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1c      	ldr	r2, [pc, #112]	; (8003174 <HAL_TIM_Base_Start_IT+0xd0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00e      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x80>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <HAL_TIM_Base_Start_IT+0xd4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d009      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x80>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a19      	ldr	r2, [pc, #100]	; (800317c <HAL_TIM_Base_Start_IT+0xd8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d004      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x80>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a18      	ldr	r2, [pc, #96]	; (8003180 <HAL_TIM_Base_Start_IT+0xdc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d111      	bne.n	8003148 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b06      	cmp	r3, #6
 8003134:	d010      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003146:	e007      	b.n	8003158 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40010000 	.word	0x40010000
 800316c:	40000400 	.word	0x40000400
 8003170:	40000800 	.word	0x40000800
 8003174:	40000c00 	.word	0x40000c00
 8003178:	40010400 	.word	0x40010400
 800317c:	40014000 	.word	0x40014000
 8003180:	40001800 	.word	0x40001800

08003184 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e041      	b.n	800321a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f839 	bl	8003222 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3304      	adds	r3, #4
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f000 fa96 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b02      	cmp	r3, #2
 800324a:	d122      	bne.n	8003292 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d11b      	bne.n	8003292 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f06f 0202 	mvn.w	r2, #2
 8003262:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fa1c 	bl	80036b6 <HAL_TIM_IC_CaptureCallback>
 800327e:	e005      	b.n	800328c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fa0e 	bl	80036a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa1f 	bl	80036ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b04      	cmp	r3, #4
 800329e:	d122      	bne.n	80032e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d11b      	bne.n	80032e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f06f 0204 	mvn.w	r2, #4
 80032b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f9f2 	bl	80036b6 <HAL_TIM_IC_CaptureCallback>
 80032d2:	e005      	b.n	80032e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f9e4 	bl	80036a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f9f5 	bl	80036ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d122      	bne.n	800333a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d11b      	bne.n	800333a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f06f 0208 	mvn.w	r2, #8
 800330a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2204      	movs	r2, #4
 8003310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f9c8 	bl	80036b6 <HAL_TIM_IC_CaptureCallback>
 8003326:	e005      	b.n	8003334 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f9ba 	bl	80036a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f9cb 	bl	80036ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b10      	cmp	r3, #16
 8003346:	d122      	bne.n	800338e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b10      	cmp	r3, #16
 8003354:	d11b      	bne.n	800338e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f06f 0210 	mvn.w	r2, #16
 800335e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2208      	movs	r2, #8
 8003364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f99e 	bl	80036b6 <HAL_TIM_IC_CaptureCallback>
 800337a:	e005      	b.n	8003388 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f990 	bl	80036a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f9a1 	bl	80036ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10e      	bne.n	80033ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f06f 0201 	mvn.w	r2, #1
 80033b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f96a 	bl	800368e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c4:	2b80      	cmp	r3, #128	; 0x80
 80033c6:	d10e      	bne.n	80033e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b80      	cmp	r3, #128	; 0x80
 80033d4:	d107      	bne.n	80033e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fd49 	bl	8003e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d10e      	bne.n	8003412 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fe:	2b40      	cmp	r3, #64	; 0x40
 8003400:	d107      	bne.n	8003412 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800340a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f966 	bl	80036de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b20      	cmp	r3, #32
 800341e:	d10e      	bne.n	800343e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b20      	cmp	r3, #32
 800342c:	d107      	bne.n	800343e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f06f 0220 	mvn.w	r2, #32
 8003436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fd13 	bl	8003e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003462:	2302      	movs	r3, #2
 8003464:	e048      	b.n	80034f8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b0c      	cmp	r3, #12
 8003472:	d839      	bhi.n	80034e8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003474:	a201      	add	r2, pc, #4	; (adr r2, 800347c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347a:	bf00      	nop
 800347c:	080034b1 	.word	0x080034b1
 8003480:	080034e9 	.word	0x080034e9
 8003484:	080034e9 	.word	0x080034e9
 8003488:	080034e9 	.word	0x080034e9
 800348c:	080034bf 	.word	0x080034bf
 8003490:	080034e9 	.word	0x080034e9
 8003494:	080034e9 	.word	0x080034e9
 8003498:	080034e9 	.word	0x080034e9
 800349c:	080034cd 	.word	0x080034cd
 80034a0:	080034e9 	.word	0x080034e9
 80034a4:	080034e9 	.word	0x080034e9
 80034a8:	080034e9 	.word	0x080034e9
 80034ac:	080034db 	.word	0x080034db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f9bc 	bl	8003834 <TIM_OC1_SetConfig>
      break;
 80034bc:	e017      	b.n	80034ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fa25 	bl	8003914 <TIM_OC2_SetConfig>
      break;
 80034ca:	e010      	b.n	80034ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fa94 	bl	8003a00 <TIM_OC3_SetConfig>
      break;
 80034d8:	e009      	b.n	80034ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fb01 	bl	8003ae8 <TIM_OC4_SetConfig>
      break;
 80034e6:	e002      	b.n	80034ee <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	75fb      	strb	r3, [r7, #23]
      break;
 80034ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_TIM_ConfigClockSource+0x1c>
 8003518:	2302      	movs	r3, #2
 800351a:	e0b4      	b.n	8003686 <HAL_TIM_ConfigClockSource+0x186>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800353a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003554:	d03e      	beq.n	80035d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355a:	f200 8087 	bhi.w	800366c <HAL_TIM_ConfigClockSource+0x16c>
 800355e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003562:	f000 8086 	beq.w	8003672 <HAL_TIM_ConfigClockSource+0x172>
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356a:	d87f      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
 800356c:	2b70      	cmp	r3, #112	; 0x70
 800356e:	d01a      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003570:	2b70      	cmp	r3, #112	; 0x70
 8003572:	d87b      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
 8003574:	2b60      	cmp	r3, #96	; 0x60
 8003576:	d050      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x11a>
 8003578:	2b60      	cmp	r3, #96	; 0x60
 800357a:	d877      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
 800357c:	2b50      	cmp	r3, #80	; 0x50
 800357e:	d03c      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0xfa>
 8003580:	2b50      	cmp	r3, #80	; 0x50
 8003582:	d873      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d058      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x13a>
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d86f      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b30      	cmp	r3, #48	; 0x30
 800358e:	d064      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x15a>
 8003590:	2b30      	cmp	r3, #48	; 0x30
 8003592:	d86b      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b20      	cmp	r3, #32
 8003596:	d060      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x15a>
 8003598:	2b20      	cmp	r3, #32
 800359a:	d867      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d05c      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x15a>
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d05a      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x15a>
 80035a4:	e062      	b.n	800366c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6899      	ldr	r1, [r3, #8]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f000 fb67 	bl	8003c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	609a      	str	r2, [r3, #8]
      break;
 80035d2:	e04f      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6899      	ldr	r1, [r3, #8]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f000 fb50 	bl	8003c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035f6:	609a      	str	r2, [r3, #8]
      break;
 80035f8:	e03c      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	461a      	mov	r2, r3
 8003608:	f000 fac4 	bl	8003b94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2150      	movs	r1, #80	; 0x50
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fb1d 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 8003618:	e02c      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	461a      	mov	r2, r3
 8003628:	f000 fae3 	bl	8003bf2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2160      	movs	r1, #96	; 0x60
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fb0d 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 8003638:	e01c      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6859      	ldr	r1, [r3, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	461a      	mov	r2, r3
 8003648:	f000 faa4 	bl	8003b94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2140      	movs	r1, #64	; 0x40
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fafd 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 8003658:	e00c      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4619      	mov	r1, r3
 8003664:	4610      	mov	r0, r2
 8003666:	f000 faf4 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 800366a:	e003      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
      break;
 8003670:	e000      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a40      	ldr	r2, [pc, #256]	; (8003808 <TIM_Base_SetConfig+0x114>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d013      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d00f      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a3d      	ldr	r2, [pc, #244]	; (800380c <TIM_Base_SetConfig+0x118>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00b      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a3c      	ldr	r2, [pc, #240]	; (8003810 <TIM_Base_SetConfig+0x11c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d007      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a3b      	ldr	r2, [pc, #236]	; (8003814 <TIM_Base_SetConfig+0x120>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a3a      	ldr	r2, [pc, #232]	; (8003818 <TIM_Base_SetConfig+0x124>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d108      	bne.n	8003746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a2f      	ldr	r2, [pc, #188]	; (8003808 <TIM_Base_SetConfig+0x114>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d02b      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003754:	d027      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a2c      	ldr	r2, [pc, #176]	; (800380c <TIM_Base_SetConfig+0x118>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d023      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2b      	ldr	r2, [pc, #172]	; (8003810 <TIM_Base_SetConfig+0x11c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01f      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2a      	ldr	r2, [pc, #168]	; (8003814 <TIM_Base_SetConfig+0x120>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d01b      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a29      	ldr	r2, [pc, #164]	; (8003818 <TIM_Base_SetConfig+0x124>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d017      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a28      	ldr	r2, [pc, #160]	; (800381c <TIM_Base_SetConfig+0x128>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a27      	ldr	r2, [pc, #156]	; (8003820 <TIM_Base_SetConfig+0x12c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00f      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a26      	ldr	r2, [pc, #152]	; (8003824 <TIM_Base_SetConfig+0x130>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00b      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a25      	ldr	r2, [pc, #148]	; (8003828 <TIM_Base_SetConfig+0x134>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d007      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a24      	ldr	r2, [pc, #144]	; (800382c <TIM_Base_SetConfig+0x138>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d003      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a23      	ldr	r2, [pc, #140]	; (8003830 <TIM_Base_SetConfig+0x13c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d108      	bne.n	80037b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <TIM_Base_SetConfig+0x114>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d003      	beq.n	80037ec <TIM_Base_SetConfig+0xf8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <TIM_Base_SetConfig+0x124>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d103      	bne.n	80037f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	615a      	str	r2, [r3, #20]
}
 80037fa:	bf00      	nop
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40010000 	.word	0x40010000
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800
 8003814:	40000c00 	.word	0x40000c00
 8003818:	40010400 	.word	0x40010400
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800
 8003828:	40001800 	.word	0x40001800
 800382c:	40001c00 	.word	0x40001c00
 8003830:	40002000 	.word	0x40002000

08003834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f023 0201 	bic.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f023 0302 	bic.w	r3, r3, #2
 800387c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a20      	ldr	r2, [pc, #128]	; (800390c <TIM_OC1_SetConfig+0xd8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d003      	beq.n	8003898 <TIM_OC1_SetConfig+0x64>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a1f      	ldr	r2, [pc, #124]	; (8003910 <TIM_OC1_SetConfig+0xdc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d10c      	bne.n	80038b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 0308 	bic.w	r3, r3, #8
 800389e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f023 0304 	bic.w	r3, r3, #4
 80038b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a15      	ldr	r2, [pc, #84]	; (800390c <TIM_OC1_SetConfig+0xd8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d003      	beq.n	80038c2 <TIM_OC1_SetConfig+0x8e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a14      	ldr	r2, [pc, #80]	; (8003910 <TIM_OC1_SetConfig+0xdc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d111      	bne.n	80038e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	621a      	str	r2, [r3, #32]
}
 8003900:	bf00      	nop
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40010000 	.word	0x40010000
 8003910:	40010400 	.word	0x40010400

08003914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	f023 0210 	bic.w	r2, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800394a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f023 0320 	bic.w	r3, r3, #32
 800395e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a22      	ldr	r2, [pc, #136]	; (80039f8 <TIM_OC2_SetConfig+0xe4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d003      	beq.n	800397c <TIM_OC2_SetConfig+0x68>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a21      	ldr	r2, [pc, #132]	; (80039fc <TIM_OC2_SetConfig+0xe8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d10d      	bne.n	8003998 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003996:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <TIM_OC2_SetConfig+0xe4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_OC2_SetConfig+0x94>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a16      	ldr	r2, [pc, #88]	; (80039fc <TIM_OC2_SetConfig+0xe8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d113      	bne.n	80039d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000
 80039fc:	40010400 	.word	0x40010400

08003a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0303 	bic.w	r3, r3, #3
 8003a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a21      	ldr	r2, [pc, #132]	; (8003ae0 <TIM_OC3_SetConfig+0xe0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <TIM_OC3_SetConfig+0x66>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a20      	ldr	r2, [pc, #128]	; (8003ae4 <TIM_OC3_SetConfig+0xe4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10d      	bne.n	8003a82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a16      	ldr	r2, [pc, #88]	; (8003ae0 <TIM_OC3_SetConfig+0xe0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_OC3_SetConfig+0x92>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <TIM_OC3_SetConfig+0xe4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d113      	bne.n	8003aba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	621a      	str	r2, [r3, #32]
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40010400 	.word	0x40010400

08003ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	021b      	lsls	r3, r3, #8
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	031b      	lsls	r3, r3, #12
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <TIM_OC4_SetConfig+0xa4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_OC4_SetConfig+0x68>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a11      	ldr	r2, [pc, #68]	; (8003b90 <TIM_OC4_SetConfig+0xa8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d109      	bne.n	8003b64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	019b      	lsls	r3, r3, #6
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	621a      	str	r2, [r3, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40010000 	.word	0x40010000
 8003b90:	40010400 	.word	0x40010400

08003b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f023 0201 	bic.w	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f023 030a 	bic.w	r3, r3, #10
 8003bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b087      	sub	sp, #28
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f023 0210 	bic.w	r2, r3, #16
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	031b      	lsls	r3, r3, #12
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f043 0307 	orr.w	r3, r3, #7
 8003c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	609a      	str	r2, [r3, #8]
}
 8003c7c:	bf00      	nop
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	021a      	lsls	r2, r3, #8
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	609a      	str	r2, [r3, #8]
}
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e05a      	b.n	8003d96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a21      	ldr	r2, [pc, #132]	; (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d022      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2c:	d01d      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d018      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1a      	ldr	r2, [pc, #104]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00e      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a18      	ldr	r2, [pc, #96]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d009      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a15      	ldr	r2, [pc, #84]	; (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d10c      	bne.n	8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40010400 	.word	0x40010400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40001800 	.word	0x40001800

08003dc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e03d      	b.n	8003e58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e03f      	b.n	8003f1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd f9e2 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2224      	movs	r2, #36	; 0x24
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f929 	bl	8004128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b08a      	sub	sp, #40	; 0x28
 8003f2a:	af02      	add	r7, sp, #8
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d17c      	bne.n	8004040 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_UART_Transmit+0x2c>
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e075      	b.n	8004042 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_UART_Transmit+0x3e>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e06e      	b.n	8004042 <HAL_UART_Transmit+0x11c>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2221      	movs	r2, #33	; 0x21
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f7a:	f7fd fa57 	bl	800142c <HAL_GetTick>
 8003f7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	88fa      	ldrh	r2, [r7, #6]
 8003f84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f94:	d108      	bne.n	8003fa8 <HAL_UART_Transmit+0x82>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d104      	bne.n	8003fa8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	e003      	b.n	8003fb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fb8:	e02a      	b.n	8004010 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2180      	movs	r1, #128	; 0x80
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f840 	bl	800404a <UART_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e036      	b.n	8004042 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10b      	bne.n	8003ff2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	3302      	adds	r3, #2
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	e007      	b.n	8004002 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	781a      	ldrb	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	3301      	adds	r3, #1
 8004000:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1cf      	bne.n	8003fba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2200      	movs	r2, #0
 8004022:	2140      	movs	r1, #64	; 0x40
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f810 	bl	800404a <UART_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e006      	b.n	8004042 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	e000      	b.n	8004042 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004040:	2302      	movs	r3, #2
  }
}
 8004042:	4618      	mov	r0, r3
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b090      	sub	sp, #64	; 0x40
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	4613      	mov	r3, r2
 8004058:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405a:	e050      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d04c      	beq.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <UART_WaitOnFlagUntilTimeout+0x30>
 800406a:	f7fd f9df 	bl	800142c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004076:	429a      	cmp	r2, r3
 8004078:	d241      	bcs.n	80040fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	330c      	adds	r3, #12
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800409a:	637a      	str	r2, [r7, #52]	; 0x34
 800409c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e5      	bne.n	800407a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3314      	adds	r3, #20
 80040b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	e853 3f00 	ldrex	r3, [r3]
 80040bc:	613b      	str	r3, [r7, #16]
   return(result);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ce:	623a      	str	r2, [r7, #32]
 80040d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	69f9      	ldr	r1, [r7, #28]
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	61bb      	str	r3, [r7, #24]
   return(result);
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e5      	bne.n	80040ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e00f      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4013      	ands	r3, r2
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	429a      	cmp	r2, r3
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2300      	movne	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	429a      	cmp	r2, r3
 800411a:	d09f      	beq.n	800405c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3740      	adds	r7, #64	; 0x40
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800412c:	b0c0      	sub	sp, #256	; 0x100
 800412e:	af00      	add	r7, sp, #0
 8004130:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	68d9      	ldr	r1, [r3, #12]
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	ea40 0301 	orr.w	r3, r0, r1
 8004150:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	431a      	orrs	r2, r3
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	431a      	orrs	r2, r3
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004180:	f021 010c 	bic.w	r1, r1, #12
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800418e:	430b      	orrs	r3, r1
 8004190:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a2:	6999      	ldr	r1, [r3, #24]
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	ea40 0301 	orr.w	r3, r0, r1
 80041ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4b8f      	ldr	r3, [pc, #572]	; (80043f4 <UART_SetConfig+0x2cc>)
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d005      	beq.n	80041c8 <UART_SetConfig+0xa0>
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4b8d      	ldr	r3, [pc, #564]	; (80043f8 <UART_SetConfig+0x2d0>)
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d104      	bne.n	80041d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041c8:	f7fd fd76 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 80041cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041d0:	e003      	b.n	80041da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041d2:	f7fd fd5d 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 80041d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e4:	f040 810c 	bne.w	8004400 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ec:	2200      	movs	r2, #0
 80041ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041fa:	4622      	mov	r2, r4
 80041fc:	462b      	mov	r3, r5
 80041fe:	1891      	adds	r1, r2, r2
 8004200:	65b9      	str	r1, [r7, #88]	; 0x58
 8004202:	415b      	adcs	r3, r3
 8004204:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004206:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800420a:	4621      	mov	r1, r4
 800420c:	eb12 0801 	adds.w	r8, r2, r1
 8004210:	4629      	mov	r1, r5
 8004212:	eb43 0901 	adc.w	r9, r3, r1
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004222:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004226:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800422a:	4690      	mov	r8, r2
 800422c:	4699      	mov	r9, r3
 800422e:	4623      	mov	r3, r4
 8004230:	eb18 0303 	adds.w	r3, r8, r3
 8004234:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004238:	462b      	mov	r3, r5
 800423a:	eb49 0303 	adc.w	r3, r9, r3
 800423e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800424e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004252:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004256:	460b      	mov	r3, r1
 8004258:	18db      	adds	r3, r3, r3
 800425a:	653b      	str	r3, [r7, #80]	; 0x50
 800425c:	4613      	mov	r3, r2
 800425e:	eb42 0303 	adc.w	r3, r2, r3
 8004262:	657b      	str	r3, [r7, #84]	; 0x54
 8004264:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004268:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800426c:	f7fc f820 	bl	80002b0 <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4b61      	ldr	r3, [pc, #388]	; (80043fc <UART_SetConfig+0x2d4>)
 8004276:	fba3 2302 	umull	r2, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	011c      	lsls	r4, r3, #4
 800427e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004282:	2200      	movs	r2, #0
 8004284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004288:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800428c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004290:	4642      	mov	r2, r8
 8004292:	464b      	mov	r3, r9
 8004294:	1891      	adds	r1, r2, r2
 8004296:	64b9      	str	r1, [r7, #72]	; 0x48
 8004298:	415b      	adcs	r3, r3
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800429c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042a0:	4641      	mov	r1, r8
 80042a2:	eb12 0a01 	adds.w	sl, r2, r1
 80042a6:	4649      	mov	r1, r9
 80042a8:	eb43 0b01 	adc.w	fp, r3, r1
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042c0:	4692      	mov	sl, r2
 80042c2:	469b      	mov	fp, r3
 80042c4:	4643      	mov	r3, r8
 80042c6:	eb1a 0303 	adds.w	r3, sl, r3
 80042ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ce:	464b      	mov	r3, r9
 80042d0:	eb4b 0303 	adc.w	r3, fp, r3
 80042d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042ec:	460b      	mov	r3, r1
 80042ee:	18db      	adds	r3, r3, r3
 80042f0:	643b      	str	r3, [r7, #64]	; 0x40
 80042f2:	4613      	mov	r3, r2
 80042f4:	eb42 0303 	adc.w	r3, r2, r3
 80042f8:	647b      	str	r3, [r7, #68]	; 0x44
 80042fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004302:	f7fb ffd5 	bl	80002b0 <__aeabi_uldivmod>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4611      	mov	r1, r2
 800430c:	4b3b      	ldr	r3, [pc, #236]	; (80043fc <UART_SetConfig+0x2d4>)
 800430e:	fba3 2301 	umull	r2, r3, r3, r1
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	2264      	movs	r2, #100	; 0x64
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	1acb      	subs	r3, r1, r3
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004322:	4b36      	ldr	r3, [pc, #216]	; (80043fc <UART_SetConfig+0x2d4>)
 8004324:	fba3 2302 	umull	r2, r3, r3, r2
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004330:	441c      	add	r4, r3
 8004332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004336:	2200      	movs	r2, #0
 8004338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800433c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004340:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004344:	4642      	mov	r2, r8
 8004346:	464b      	mov	r3, r9
 8004348:	1891      	adds	r1, r2, r2
 800434a:	63b9      	str	r1, [r7, #56]	; 0x38
 800434c:	415b      	adcs	r3, r3
 800434e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004350:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004354:	4641      	mov	r1, r8
 8004356:	1851      	adds	r1, r2, r1
 8004358:	6339      	str	r1, [r7, #48]	; 0x30
 800435a:	4649      	mov	r1, r9
 800435c:	414b      	adcs	r3, r1
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800436c:	4659      	mov	r1, fp
 800436e:	00cb      	lsls	r3, r1, #3
 8004370:	4651      	mov	r1, sl
 8004372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004376:	4651      	mov	r1, sl
 8004378:	00ca      	lsls	r2, r1, #3
 800437a:	4610      	mov	r0, r2
 800437c:	4619      	mov	r1, r3
 800437e:	4603      	mov	r3, r0
 8004380:	4642      	mov	r2, r8
 8004382:	189b      	adds	r3, r3, r2
 8004384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004388:	464b      	mov	r3, r9
 800438a:	460a      	mov	r2, r1
 800438c:	eb42 0303 	adc.w	r3, r2, r3
 8004390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043a8:	460b      	mov	r3, r1
 80043aa:	18db      	adds	r3, r3, r3
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ae:	4613      	mov	r3, r2
 80043b0:	eb42 0303 	adc.w	r3, r2, r3
 80043b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043be:	f7fb ff77 	bl	80002b0 <__aeabi_uldivmod>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <UART_SetConfig+0x2d4>)
 80043c8:	fba3 1302 	umull	r1, r3, r3, r2
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	2164      	movs	r1, #100	; 0x64
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	3332      	adds	r3, #50	; 0x32
 80043da:	4a08      	ldr	r2, [pc, #32]	; (80043fc <UART_SetConfig+0x2d4>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	f003 0207 	and.w	r2, r3, #7
 80043e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4422      	add	r2, r4
 80043ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043f0:	e105      	b.n	80045fe <UART_SetConfig+0x4d6>
 80043f2:	bf00      	nop
 80043f4:	40011000 	.word	0x40011000
 80043f8:	40011400 	.word	0x40011400
 80043fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004404:	2200      	movs	r2, #0
 8004406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800440a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800440e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004412:	4642      	mov	r2, r8
 8004414:	464b      	mov	r3, r9
 8004416:	1891      	adds	r1, r2, r2
 8004418:	6239      	str	r1, [r7, #32]
 800441a:	415b      	adcs	r3, r3
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
 800441e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004422:	4641      	mov	r1, r8
 8004424:	1854      	adds	r4, r2, r1
 8004426:	4649      	mov	r1, r9
 8004428:	eb43 0501 	adc.w	r5, r3, r1
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	00eb      	lsls	r3, r5, #3
 8004436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800443a:	00e2      	lsls	r2, r4, #3
 800443c:	4614      	mov	r4, r2
 800443e:	461d      	mov	r5, r3
 8004440:	4643      	mov	r3, r8
 8004442:	18e3      	adds	r3, r4, r3
 8004444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004448:	464b      	mov	r3, r9
 800444a:	eb45 0303 	adc.w	r3, r5, r3
 800444e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800445e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800446e:	4629      	mov	r1, r5
 8004470:	008b      	lsls	r3, r1, #2
 8004472:	4621      	mov	r1, r4
 8004474:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004478:	4621      	mov	r1, r4
 800447a:	008a      	lsls	r2, r1, #2
 800447c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004480:	f7fb ff16 	bl	80002b0 <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4b60      	ldr	r3, [pc, #384]	; (800460c <UART_SetConfig+0x4e4>)
 800448a:	fba3 2302 	umull	r2, r3, r3, r2
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	011c      	lsls	r4, r3, #4
 8004492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004496:	2200      	movs	r2, #0
 8004498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800449c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044a4:	4642      	mov	r2, r8
 80044a6:	464b      	mov	r3, r9
 80044a8:	1891      	adds	r1, r2, r2
 80044aa:	61b9      	str	r1, [r7, #24]
 80044ac:	415b      	adcs	r3, r3
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b4:	4641      	mov	r1, r8
 80044b6:	1851      	adds	r1, r2, r1
 80044b8:	6139      	str	r1, [r7, #16]
 80044ba:	4649      	mov	r1, r9
 80044bc:	414b      	adcs	r3, r1
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044cc:	4659      	mov	r1, fp
 80044ce:	00cb      	lsls	r3, r1, #3
 80044d0:	4651      	mov	r1, sl
 80044d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044d6:	4651      	mov	r1, sl
 80044d8:	00ca      	lsls	r2, r1, #3
 80044da:	4610      	mov	r0, r2
 80044dc:	4619      	mov	r1, r3
 80044de:	4603      	mov	r3, r0
 80044e0:	4642      	mov	r2, r8
 80044e2:	189b      	adds	r3, r3, r2
 80044e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044e8:	464b      	mov	r3, r9
 80044ea:	460a      	mov	r2, r1
 80044ec:	eb42 0303 	adc.w	r3, r2, r3
 80044f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80044fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800450c:	4649      	mov	r1, r9
 800450e:	008b      	lsls	r3, r1, #2
 8004510:	4641      	mov	r1, r8
 8004512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004516:	4641      	mov	r1, r8
 8004518:	008a      	lsls	r2, r1, #2
 800451a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800451e:	f7fb fec7 	bl	80002b0 <__aeabi_uldivmod>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4b39      	ldr	r3, [pc, #228]	; (800460c <UART_SetConfig+0x4e4>)
 8004528:	fba3 1302 	umull	r1, r3, r3, r2
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	2164      	movs	r1, #100	; 0x64
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	3332      	adds	r3, #50	; 0x32
 800453a:	4a34      	ldr	r2, [pc, #208]	; (800460c <UART_SetConfig+0x4e4>)
 800453c:	fba2 2303 	umull	r2, r3, r2, r3
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004546:	441c      	add	r4, r3
 8004548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454c:	2200      	movs	r2, #0
 800454e:	673b      	str	r3, [r7, #112]	; 0x70
 8004550:	677a      	str	r2, [r7, #116]	; 0x74
 8004552:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004556:	4642      	mov	r2, r8
 8004558:	464b      	mov	r3, r9
 800455a:	1891      	adds	r1, r2, r2
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	415b      	adcs	r3, r3
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004566:	4641      	mov	r1, r8
 8004568:	1851      	adds	r1, r2, r1
 800456a:	6039      	str	r1, [r7, #0]
 800456c:	4649      	mov	r1, r9
 800456e:	414b      	adcs	r3, r1
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800457e:	4659      	mov	r1, fp
 8004580:	00cb      	lsls	r3, r1, #3
 8004582:	4651      	mov	r1, sl
 8004584:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004588:	4651      	mov	r1, sl
 800458a:	00ca      	lsls	r2, r1, #3
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	4603      	mov	r3, r0
 8004592:	4642      	mov	r2, r8
 8004594:	189b      	adds	r3, r3, r2
 8004596:	66bb      	str	r3, [r7, #104]	; 0x68
 8004598:	464b      	mov	r3, r9
 800459a:	460a      	mov	r2, r1
 800459c:	eb42 0303 	adc.w	r3, r2, r3
 80045a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	663b      	str	r3, [r7, #96]	; 0x60
 80045ac:	667a      	str	r2, [r7, #100]	; 0x64
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045ba:	4649      	mov	r1, r9
 80045bc:	008b      	lsls	r3, r1, #2
 80045be:	4641      	mov	r1, r8
 80045c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c4:	4641      	mov	r1, r8
 80045c6:	008a      	lsls	r2, r1, #2
 80045c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045cc:	f7fb fe70 	bl	80002b0 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4b0d      	ldr	r3, [pc, #52]	; (800460c <UART_SetConfig+0x4e4>)
 80045d6:	fba3 1302 	umull	r1, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	2164      	movs	r1, #100	; 0x64
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	3332      	adds	r3, #50	; 0x32
 80045e8:	4a08      	ldr	r2, [pc, #32]	; (800460c <UART_SetConfig+0x4e4>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	f003 020f 	and.w	r2, r3, #15
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4422      	add	r2, r4
 80045fc:	609a      	str	r2, [r3, #8]
}
 80045fe:	bf00      	nop
 8004600:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004604:	46bd      	mov	sp, r7
 8004606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800460a:	bf00      	nop
 800460c:	51eb851f 	.word	0x51eb851f

08004610 <__errno>:
 8004610:	4b01      	ldr	r3, [pc, #4]	; (8004618 <__errno+0x8>)
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	2000000c 	.word	0x2000000c

0800461c <__libc_init_array>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	4d0d      	ldr	r5, [pc, #52]	; (8004654 <__libc_init_array+0x38>)
 8004620:	4c0d      	ldr	r4, [pc, #52]	; (8004658 <__libc_init_array+0x3c>)
 8004622:	1b64      	subs	r4, r4, r5
 8004624:	10a4      	asrs	r4, r4, #2
 8004626:	2600      	movs	r6, #0
 8004628:	42a6      	cmp	r6, r4
 800462a:	d109      	bne.n	8004640 <__libc_init_array+0x24>
 800462c:	4d0b      	ldr	r5, [pc, #44]	; (800465c <__libc_init_array+0x40>)
 800462e:	4c0c      	ldr	r4, [pc, #48]	; (8004660 <__libc_init_array+0x44>)
 8004630:	f000 ffae 	bl	8005590 <_init>
 8004634:	1b64      	subs	r4, r4, r5
 8004636:	10a4      	asrs	r4, r4, #2
 8004638:	2600      	movs	r6, #0
 800463a:	42a6      	cmp	r6, r4
 800463c:	d105      	bne.n	800464a <__libc_init_array+0x2e>
 800463e:	bd70      	pop	{r4, r5, r6, pc}
 8004640:	f855 3b04 	ldr.w	r3, [r5], #4
 8004644:	4798      	blx	r3
 8004646:	3601      	adds	r6, #1
 8004648:	e7ee      	b.n	8004628 <__libc_init_array+0xc>
 800464a:	f855 3b04 	ldr.w	r3, [r5], #4
 800464e:	4798      	blx	r3
 8004650:	3601      	adds	r6, #1
 8004652:	e7f2      	b.n	800463a <__libc_init_array+0x1e>
 8004654:	08005768 	.word	0x08005768
 8004658:	08005768 	.word	0x08005768
 800465c:	08005768 	.word	0x08005768
 8004660:	0800576c 	.word	0x0800576c

08004664 <memset>:
 8004664:	4402      	add	r2, r0
 8004666:	4603      	mov	r3, r0
 8004668:	4293      	cmp	r3, r2
 800466a:	d100      	bne.n	800466e <memset+0xa>
 800466c:	4770      	bx	lr
 800466e:	f803 1b01 	strb.w	r1, [r3], #1
 8004672:	e7f9      	b.n	8004668 <memset+0x4>

08004674 <iprintf>:
 8004674:	b40f      	push	{r0, r1, r2, r3}
 8004676:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <iprintf+0x2c>)
 8004678:	b513      	push	{r0, r1, r4, lr}
 800467a:	681c      	ldr	r4, [r3, #0]
 800467c:	b124      	cbz	r4, 8004688 <iprintf+0x14>
 800467e:	69a3      	ldr	r3, [r4, #24]
 8004680:	b913      	cbnz	r3, 8004688 <iprintf+0x14>
 8004682:	4620      	mov	r0, r4
 8004684:	f000 f9e8 	bl	8004a58 <__sinit>
 8004688:	ab05      	add	r3, sp, #20
 800468a:	9a04      	ldr	r2, [sp, #16]
 800468c:	68a1      	ldr	r1, [r4, #8]
 800468e:	9301      	str	r3, [sp, #4]
 8004690:	4620      	mov	r0, r4
 8004692:	f000 fbf1 	bl	8004e78 <_vfiprintf_r>
 8004696:	b002      	add	sp, #8
 8004698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800469c:	b004      	add	sp, #16
 800469e:	4770      	bx	lr
 80046a0:	2000000c 	.word	0x2000000c

080046a4 <__swbuf_r>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	460e      	mov	r6, r1
 80046a8:	4614      	mov	r4, r2
 80046aa:	4605      	mov	r5, r0
 80046ac:	b118      	cbz	r0, 80046b6 <__swbuf_r+0x12>
 80046ae:	6983      	ldr	r3, [r0, #24]
 80046b0:	b90b      	cbnz	r3, 80046b6 <__swbuf_r+0x12>
 80046b2:	f000 f9d1 	bl	8004a58 <__sinit>
 80046b6:	4b21      	ldr	r3, [pc, #132]	; (800473c <__swbuf_r+0x98>)
 80046b8:	429c      	cmp	r4, r3
 80046ba:	d12b      	bne.n	8004714 <__swbuf_r+0x70>
 80046bc:	686c      	ldr	r4, [r5, #4]
 80046be:	69a3      	ldr	r3, [r4, #24]
 80046c0:	60a3      	str	r3, [r4, #8]
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	071a      	lsls	r2, r3, #28
 80046c6:	d52f      	bpl.n	8004728 <__swbuf_r+0x84>
 80046c8:	6923      	ldr	r3, [r4, #16]
 80046ca:	b36b      	cbz	r3, 8004728 <__swbuf_r+0x84>
 80046cc:	6923      	ldr	r3, [r4, #16]
 80046ce:	6820      	ldr	r0, [r4, #0]
 80046d0:	1ac0      	subs	r0, r0, r3
 80046d2:	6963      	ldr	r3, [r4, #20]
 80046d4:	b2f6      	uxtb	r6, r6
 80046d6:	4283      	cmp	r3, r0
 80046d8:	4637      	mov	r7, r6
 80046da:	dc04      	bgt.n	80046e6 <__swbuf_r+0x42>
 80046dc:	4621      	mov	r1, r4
 80046de:	4628      	mov	r0, r5
 80046e0:	f000 f926 	bl	8004930 <_fflush_r>
 80046e4:	bb30      	cbnz	r0, 8004734 <__swbuf_r+0x90>
 80046e6:	68a3      	ldr	r3, [r4, #8]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	60a3      	str	r3, [r4, #8]
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	6022      	str	r2, [r4, #0]
 80046f2:	701e      	strb	r6, [r3, #0]
 80046f4:	6963      	ldr	r3, [r4, #20]
 80046f6:	3001      	adds	r0, #1
 80046f8:	4283      	cmp	r3, r0
 80046fa:	d004      	beq.n	8004706 <__swbuf_r+0x62>
 80046fc:	89a3      	ldrh	r3, [r4, #12]
 80046fe:	07db      	lsls	r3, r3, #31
 8004700:	d506      	bpl.n	8004710 <__swbuf_r+0x6c>
 8004702:	2e0a      	cmp	r6, #10
 8004704:	d104      	bne.n	8004710 <__swbuf_r+0x6c>
 8004706:	4621      	mov	r1, r4
 8004708:	4628      	mov	r0, r5
 800470a:	f000 f911 	bl	8004930 <_fflush_r>
 800470e:	b988      	cbnz	r0, 8004734 <__swbuf_r+0x90>
 8004710:	4638      	mov	r0, r7
 8004712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004714:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <__swbuf_r+0x9c>)
 8004716:	429c      	cmp	r4, r3
 8004718:	d101      	bne.n	800471e <__swbuf_r+0x7a>
 800471a:	68ac      	ldr	r4, [r5, #8]
 800471c:	e7cf      	b.n	80046be <__swbuf_r+0x1a>
 800471e:	4b09      	ldr	r3, [pc, #36]	; (8004744 <__swbuf_r+0xa0>)
 8004720:	429c      	cmp	r4, r3
 8004722:	bf08      	it	eq
 8004724:	68ec      	ldreq	r4, [r5, #12]
 8004726:	e7ca      	b.n	80046be <__swbuf_r+0x1a>
 8004728:	4621      	mov	r1, r4
 800472a:	4628      	mov	r0, r5
 800472c:	f000 f80c 	bl	8004748 <__swsetup_r>
 8004730:	2800      	cmp	r0, #0
 8004732:	d0cb      	beq.n	80046cc <__swbuf_r+0x28>
 8004734:	f04f 37ff 	mov.w	r7, #4294967295
 8004738:	e7ea      	b.n	8004710 <__swbuf_r+0x6c>
 800473a:	bf00      	nop
 800473c:	080056ec 	.word	0x080056ec
 8004740:	0800570c 	.word	0x0800570c
 8004744:	080056cc 	.word	0x080056cc

08004748 <__swsetup_r>:
 8004748:	4b32      	ldr	r3, [pc, #200]	; (8004814 <__swsetup_r+0xcc>)
 800474a:	b570      	push	{r4, r5, r6, lr}
 800474c:	681d      	ldr	r5, [r3, #0]
 800474e:	4606      	mov	r6, r0
 8004750:	460c      	mov	r4, r1
 8004752:	b125      	cbz	r5, 800475e <__swsetup_r+0x16>
 8004754:	69ab      	ldr	r3, [r5, #24]
 8004756:	b913      	cbnz	r3, 800475e <__swsetup_r+0x16>
 8004758:	4628      	mov	r0, r5
 800475a:	f000 f97d 	bl	8004a58 <__sinit>
 800475e:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <__swsetup_r+0xd0>)
 8004760:	429c      	cmp	r4, r3
 8004762:	d10f      	bne.n	8004784 <__swsetup_r+0x3c>
 8004764:	686c      	ldr	r4, [r5, #4]
 8004766:	89a3      	ldrh	r3, [r4, #12]
 8004768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800476c:	0719      	lsls	r1, r3, #28
 800476e:	d42c      	bmi.n	80047ca <__swsetup_r+0x82>
 8004770:	06dd      	lsls	r5, r3, #27
 8004772:	d411      	bmi.n	8004798 <__swsetup_r+0x50>
 8004774:	2309      	movs	r3, #9
 8004776:	6033      	str	r3, [r6, #0]
 8004778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800477c:	81a3      	strh	r3, [r4, #12]
 800477e:	f04f 30ff 	mov.w	r0, #4294967295
 8004782:	e03e      	b.n	8004802 <__swsetup_r+0xba>
 8004784:	4b25      	ldr	r3, [pc, #148]	; (800481c <__swsetup_r+0xd4>)
 8004786:	429c      	cmp	r4, r3
 8004788:	d101      	bne.n	800478e <__swsetup_r+0x46>
 800478a:	68ac      	ldr	r4, [r5, #8]
 800478c:	e7eb      	b.n	8004766 <__swsetup_r+0x1e>
 800478e:	4b24      	ldr	r3, [pc, #144]	; (8004820 <__swsetup_r+0xd8>)
 8004790:	429c      	cmp	r4, r3
 8004792:	bf08      	it	eq
 8004794:	68ec      	ldreq	r4, [r5, #12]
 8004796:	e7e6      	b.n	8004766 <__swsetup_r+0x1e>
 8004798:	0758      	lsls	r0, r3, #29
 800479a:	d512      	bpl.n	80047c2 <__swsetup_r+0x7a>
 800479c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800479e:	b141      	cbz	r1, 80047b2 <__swsetup_r+0x6a>
 80047a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047a4:	4299      	cmp	r1, r3
 80047a6:	d002      	beq.n	80047ae <__swsetup_r+0x66>
 80047a8:	4630      	mov	r0, r6
 80047aa:	f000 fa5b 	bl	8004c64 <_free_r>
 80047ae:	2300      	movs	r3, #0
 80047b0:	6363      	str	r3, [r4, #52]	; 0x34
 80047b2:	89a3      	ldrh	r3, [r4, #12]
 80047b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047b8:	81a3      	strh	r3, [r4, #12]
 80047ba:	2300      	movs	r3, #0
 80047bc:	6063      	str	r3, [r4, #4]
 80047be:	6923      	ldr	r3, [r4, #16]
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	f043 0308 	orr.w	r3, r3, #8
 80047c8:	81a3      	strh	r3, [r4, #12]
 80047ca:	6923      	ldr	r3, [r4, #16]
 80047cc:	b94b      	cbnz	r3, 80047e2 <__swsetup_r+0x9a>
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d8:	d003      	beq.n	80047e2 <__swsetup_r+0x9a>
 80047da:	4621      	mov	r1, r4
 80047dc:	4630      	mov	r0, r6
 80047de:	f000 fa01 	bl	8004be4 <__smakebuf_r>
 80047e2:	89a0      	ldrh	r0, [r4, #12]
 80047e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047e8:	f010 0301 	ands.w	r3, r0, #1
 80047ec:	d00a      	beq.n	8004804 <__swsetup_r+0xbc>
 80047ee:	2300      	movs	r3, #0
 80047f0:	60a3      	str	r3, [r4, #8]
 80047f2:	6963      	ldr	r3, [r4, #20]
 80047f4:	425b      	negs	r3, r3
 80047f6:	61a3      	str	r3, [r4, #24]
 80047f8:	6923      	ldr	r3, [r4, #16]
 80047fa:	b943      	cbnz	r3, 800480e <__swsetup_r+0xc6>
 80047fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004800:	d1ba      	bne.n	8004778 <__swsetup_r+0x30>
 8004802:	bd70      	pop	{r4, r5, r6, pc}
 8004804:	0781      	lsls	r1, r0, #30
 8004806:	bf58      	it	pl
 8004808:	6963      	ldrpl	r3, [r4, #20]
 800480a:	60a3      	str	r3, [r4, #8]
 800480c:	e7f4      	b.n	80047f8 <__swsetup_r+0xb0>
 800480e:	2000      	movs	r0, #0
 8004810:	e7f7      	b.n	8004802 <__swsetup_r+0xba>
 8004812:	bf00      	nop
 8004814:	2000000c 	.word	0x2000000c
 8004818:	080056ec 	.word	0x080056ec
 800481c:	0800570c 	.word	0x0800570c
 8004820:	080056cc 	.word	0x080056cc

08004824 <__sflush_r>:
 8004824:	898a      	ldrh	r2, [r1, #12]
 8004826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800482a:	4605      	mov	r5, r0
 800482c:	0710      	lsls	r0, r2, #28
 800482e:	460c      	mov	r4, r1
 8004830:	d458      	bmi.n	80048e4 <__sflush_r+0xc0>
 8004832:	684b      	ldr	r3, [r1, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	dc05      	bgt.n	8004844 <__sflush_r+0x20>
 8004838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	dc02      	bgt.n	8004844 <__sflush_r+0x20>
 800483e:	2000      	movs	r0, #0
 8004840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004846:	2e00      	cmp	r6, #0
 8004848:	d0f9      	beq.n	800483e <__sflush_r+0x1a>
 800484a:	2300      	movs	r3, #0
 800484c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004850:	682f      	ldr	r7, [r5, #0]
 8004852:	602b      	str	r3, [r5, #0]
 8004854:	d032      	beq.n	80048bc <__sflush_r+0x98>
 8004856:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004858:	89a3      	ldrh	r3, [r4, #12]
 800485a:	075a      	lsls	r2, r3, #29
 800485c:	d505      	bpl.n	800486a <__sflush_r+0x46>
 800485e:	6863      	ldr	r3, [r4, #4]
 8004860:	1ac0      	subs	r0, r0, r3
 8004862:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004864:	b10b      	cbz	r3, 800486a <__sflush_r+0x46>
 8004866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004868:	1ac0      	subs	r0, r0, r3
 800486a:	2300      	movs	r3, #0
 800486c:	4602      	mov	r2, r0
 800486e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004870:	6a21      	ldr	r1, [r4, #32]
 8004872:	4628      	mov	r0, r5
 8004874:	47b0      	blx	r6
 8004876:	1c43      	adds	r3, r0, #1
 8004878:	89a3      	ldrh	r3, [r4, #12]
 800487a:	d106      	bne.n	800488a <__sflush_r+0x66>
 800487c:	6829      	ldr	r1, [r5, #0]
 800487e:	291d      	cmp	r1, #29
 8004880:	d82c      	bhi.n	80048dc <__sflush_r+0xb8>
 8004882:	4a2a      	ldr	r2, [pc, #168]	; (800492c <__sflush_r+0x108>)
 8004884:	40ca      	lsrs	r2, r1
 8004886:	07d6      	lsls	r6, r2, #31
 8004888:	d528      	bpl.n	80048dc <__sflush_r+0xb8>
 800488a:	2200      	movs	r2, #0
 800488c:	6062      	str	r2, [r4, #4]
 800488e:	04d9      	lsls	r1, r3, #19
 8004890:	6922      	ldr	r2, [r4, #16]
 8004892:	6022      	str	r2, [r4, #0]
 8004894:	d504      	bpl.n	80048a0 <__sflush_r+0x7c>
 8004896:	1c42      	adds	r2, r0, #1
 8004898:	d101      	bne.n	800489e <__sflush_r+0x7a>
 800489a:	682b      	ldr	r3, [r5, #0]
 800489c:	b903      	cbnz	r3, 80048a0 <__sflush_r+0x7c>
 800489e:	6560      	str	r0, [r4, #84]	; 0x54
 80048a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048a2:	602f      	str	r7, [r5, #0]
 80048a4:	2900      	cmp	r1, #0
 80048a6:	d0ca      	beq.n	800483e <__sflush_r+0x1a>
 80048a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048ac:	4299      	cmp	r1, r3
 80048ae:	d002      	beq.n	80048b6 <__sflush_r+0x92>
 80048b0:	4628      	mov	r0, r5
 80048b2:	f000 f9d7 	bl	8004c64 <_free_r>
 80048b6:	2000      	movs	r0, #0
 80048b8:	6360      	str	r0, [r4, #52]	; 0x34
 80048ba:	e7c1      	b.n	8004840 <__sflush_r+0x1c>
 80048bc:	6a21      	ldr	r1, [r4, #32]
 80048be:	2301      	movs	r3, #1
 80048c0:	4628      	mov	r0, r5
 80048c2:	47b0      	blx	r6
 80048c4:	1c41      	adds	r1, r0, #1
 80048c6:	d1c7      	bne.n	8004858 <__sflush_r+0x34>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0c4      	beq.n	8004858 <__sflush_r+0x34>
 80048ce:	2b1d      	cmp	r3, #29
 80048d0:	d001      	beq.n	80048d6 <__sflush_r+0xb2>
 80048d2:	2b16      	cmp	r3, #22
 80048d4:	d101      	bne.n	80048da <__sflush_r+0xb6>
 80048d6:	602f      	str	r7, [r5, #0]
 80048d8:	e7b1      	b.n	800483e <__sflush_r+0x1a>
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e0:	81a3      	strh	r3, [r4, #12]
 80048e2:	e7ad      	b.n	8004840 <__sflush_r+0x1c>
 80048e4:	690f      	ldr	r7, [r1, #16]
 80048e6:	2f00      	cmp	r7, #0
 80048e8:	d0a9      	beq.n	800483e <__sflush_r+0x1a>
 80048ea:	0793      	lsls	r3, r2, #30
 80048ec:	680e      	ldr	r6, [r1, #0]
 80048ee:	bf08      	it	eq
 80048f0:	694b      	ldreq	r3, [r1, #20]
 80048f2:	600f      	str	r7, [r1, #0]
 80048f4:	bf18      	it	ne
 80048f6:	2300      	movne	r3, #0
 80048f8:	eba6 0807 	sub.w	r8, r6, r7
 80048fc:	608b      	str	r3, [r1, #8]
 80048fe:	f1b8 0f00 	cmp.w	r8, #0
 8004902:	dd9c      	ble.n	800483e <__sflush_r+0x1a>
 8004904:	6a21      	ldr	r1, [r4, #32]
 8004906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004908:	4643      	mov	r3, r8
 800490a:	463a      	mov	r2, r7
 800490c:	4628      	mov	r0, r5
 800490e:	47b0      	blx	r6
 8004910:	2800      	cmp	r0, #0
 8004912:	dc06      	bgt.n	8004922 <__sflush_r+0xfe>
 8004914:	89a3      	ldrh	r3, [r4, #12]
 8004916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800491a:	81a3      	strh	r3, [r4, #12]
 800491c:	f04f 30ff 	mov.w	r0, #4294967295
 8004920:	e78e      	b.n	8004840 <__sflush_r+0x1c>
 8004922:	4407      	add	r7, r0
 8004924:	eba8 0800 	sub.w	r8, r8, r0
 8004928:	e7e9      	b.n	80048fe <__sflush_r+0xda>
 800492a:	bf00      	nop
 800492c:	20400001 	.word	0x20400001

08004930 <_fflush_r>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	690b      	ldr	r3, [r1, #16]
 8004934:	4605      	mov	r5, r0
 8004936:	460c      	mov	r4, r1
 8004938:	b913      	cbnz	r3, 8004940 <_fflush_r+0x10>
 800493a:	2500      	movs	r5, #0
 800493c:	4628      	mov	r0, r5
 800493e:	bd38      	pop	{r3, r4, r5, pc}
 8004940:	b118      	cbz	r0, 800494a <_fflush_r+0x1a>
 8004942:	6983      	ldr	r3, [r0, #24]
 8004944:	b90b      	cbnz	r3, 800494a <_fflush_r+0x1a>
 8004946:	f000 f887 	bl	8004a58 <__sinit>
 800494a:	4b14      	ldr	r3, [pc, #80]	; (800499c <_fflush_r+0x6c>)
 800494c:	429c      	cmp	r4, r3
 800494e:	d11b      	bne.n	8004988 <_fflush_r+0x58>
 8004950:	686c      	ldr	r4, [r5, #4]
 8004952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0ef      	beq.n	800493a <_fflush_r+0xa>
 800495a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800495c:	07d0      	lsls	r0, r2, #31
 800495e:	d404      	bmi.n	800496a <_fflush_r+0x3a>
 8004960:	0599      	lsls	r1, r3, #22
 8004962:	d402      	bmi.n	800496a <_fflush_r+0x3a>
 8004964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004966:	f000 f915 	bl	8004b94 <__retarget_lock_acquire_recursive>
 800496a:	4628      	mov	r0, r5
 800496c:	4621      	mov	r1, r4
 800496e:	f7ff ff59 	bl	8004824 <__sflush_r>
 8004972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004974:	07da      	lsls	r2, r3, #31
 8004976:	4605      	mov	r5, r0
 8004978:	d4e0      	bmi.n	800493c <_fflush_r+0xc>
 800497a:	89a3      	ldrh	r3, [r4, #12]
 800497c:	059b      	lsls	r3, r3, #22
 800497e:	d4dd      	bmi.n	800493c <_fflush_r+0xc>
 8004980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004982:	f000 f908 	bl	8004b96 <__retarget_lock_release_recursive>
 8004986:	e7d9      	b.n	800493c <_fflush_r+0xc>
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <_fflush_r+0x70>)
 800498a:	429c      	cmp	r4, r3
 800498c:	d101      	bne.n	8004992 <_fflush_r+0x62>
 800498e:	68ac      	ldr	r4, [r5, #8]
 8004990:	e7df      	b.n	8004952 <_fflush_r+0x22>
 8004992:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <_fflush_r+0x74>)
 8004994:	429c      	cmp	r4, r3
 8004996:	bf08      	it	eq
 8004998:	68ec      	ldreq	r4, [r5, #12]
 800499a:	e7da      	b.n	8004952 <_fflush_r+0x22>
 800499c:	080056ec 	.word	0x080056ec
 80049a0:	0800570c 	.word	0x0800570c
 80049a4:	080056cc 	.word	0x080056cc

080049a8 <std>:
 80049a8:	2300      	movs	r3, #0
 80049aa:	b510      	push	{r4, lr}
 80049ac:	4604      	mov	r4, r0
 80049ae:	e9c0 3300 	strd	r3, r3, [r0]
 80049b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049b6:	6083      	str	r3, [r0, #8]
 80049b8:	8181      	strh	r1, [r0, #12]
 80049ba:	6643      	str	r3, [r0, #100]	; 0x64
 80049bc:	81c2      	strh	r2, [r0, #14]
 80049be:	6183      	str	r3, [r0, #24]
 80049c0:	4619      	mov	r1, r3
 80049c2:	2208      	movs	r2, #8
 80049c4:	305c      	adds	r0, #92	; 0x5c
 80049c6:	f7ff fe4d 	bl	8004664 <memset>
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <std+0x38>)
 80049cc:	6263      	str	r3, [r4, #36]	; 0x24
 80049ce:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <std+0x3c>)
 80049d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <std+0x40>)
 80049d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <std+0x44>)
 80049d8:	6224      	str	r4, [r4, #32]
 80049da:	6323      	str	r3, [r4, #48]	; 0x30
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	bf00      	nop
 80049e0:	08005421 	.word	0x08005421
 80049e4:	08005443 	.word	0x08005443
 80049e8:	0800547b 	.word	0x0800547b
 80049ec:	0800549f 	.word	0x0800549f

080049f0 <_cleanup_r>:
 80049f0:	4901      	ldr	r1, [pc, #4]	; (80049f8 <_cleanup_r+0x8>)
 80049f2:	f000 b8af 	b.w	8004b54 <_fwalk_reent>
 80049f6:	bf00      	nop
 80049f8:	08004931 	.word	0x08004931

080049fc <__sfmoreglue>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	2268      	movs	r2, #104	; 0x68
 8004a00:	1e4d      	subs	r5, r1, #1
 8004a02:	4355      	muls	r5, r2
 8004a04:	460e      	mov	r6, r1
 8004a06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a0a:	f000 f997 	bl	8004d3c <_malloc_r>
 8004a0e:	4604      	mov	r4, r0
 8004a10:	b140      	cbz	r0, 8004a24 <__sfmoreglue+0x28>
 8004a12:	2100      	movs	r1, #0
 8004a14:	e9c0 1600 	strd	r1, r6, [r0]
 8004a18:	300c      	adds	r0, #12
 8004a1a:	60a0      	str	r0, [r4, #8]
 8004a1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a20:	f7ff fe20 	bl	8004664 <memset>
 8004a24:	4620      	mov	r0, r4
 8004a26:	bd70      	pop	{r4, r5, r6, pc}

08004a28 <__sfp_lock_acquire>:
 8004a28:	4801      	ldr	r0, [pc, #4]	; (8004a30 <__sfp_lock_acquire+0x8>)
 8004a2a:	f000 b8b3 	b.w	8004b94 <__retarget_lock_acquire_recursive>
 8004a2e:	bf00      	nop
 8004a30:	200001d5 	.word	0x200001d5

08004a34 <__sfp_lock_release>:
 8004a34:	4801      	ldr	r0, [pc, #4]	; (8004a3c <__sfp_lock_release+0x8>)
 8004a36:	f000 b8ae 	b.w	8004b96 <__retarget_lock_release_recursive>
 8004a3a:	bf00      	nop
 8004a3c:	200001d5 	.word	0x200001d5

08004a40 <__sinit_lock_acquire>:
 8004a40:	4801      	ldr	r0, [pc, #4]	; (8004a48 <__sinit_lock_acquire+0x8>)
 8004a42:	f000 b8a7 	b.w	8004b94 <__retarget_lock_acquire_recursive>
 8004a46:	bf00      	nop
 8004a48:	200001d6 	.word	0x200001d6

08004a4c <__sinit_lock_release>:
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <__sinit_lock_release+0x8>)
 8004a4e:	f000 b8a2 	b.w	8004b96 <__retarget_lock_release_recursive>
 8004a52:	bf00      	nop
 8004a54:	200001d6 	.word	0x200001d6

08004a58 <__sinit>:
 8004a58:	b510      	push	{r4, lr}
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	f7ff fff0 	bl	8004a40 <__sinit_lock_acquire>
 8004a60:	69a3      	ldr	r3, [r4, #24]
 8004a62:	b11b      	cbz	r3, 8004a6c <__sinit+0x14>
 8004a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a68:	f7ff bff0 	b.w	8004a4c <__sinit_lock_release>
 8004a6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a70:	6523      	str	r3, [r4, #80]	; 0x50
 8004a72:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <__sinit+0x68>)
 8004a74:	4a13      	ldr	r2, [pc, #76]	; (8004ac4 <__sinit+0x6c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a7a:	42a3      	cmp	r3, r4
 8004a7c:	bf04      	itt	eq
 8004a7e:	2301      	moveq	r3, #1
 8004a80:	61a3      	streq	r3, [r4, #24]
 8004a82:	4620      	mov	r0, r4
 8004a84:	f000 f820 	bl	8004ac8 <__sfp>
 8004a88:	6060      	str	r0, [r4, #4]
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f000 f81c 	bl	8004ac8 <__sfp>
 8004a90:	60a0      	str	r0, [r4, #8]
 8004a92:	4620      	mov	r0, r4
 8004a94:	f000 f818 	bl	8004ac8 <__sfp>
 8004a98:	2200      	movs	r2, #0
 8004a9a:	60e0      	str	r0, [r4, #12]
 8004a9c:	2104      	movs	r1, #4
 8004a9e:	6860      	ldr	r0, [r4, #4]
 8004aa0:	f7ff ff82 	bl	80049a8 <std>
 8004aa4:	68a0      	ldr	r0, [r4, #8]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	2109      	movs	r1, #9
 8004aaa:	f7ff ff7d 	bl	80049a8 <std>
 8004aae:	68e0      	ldr	r0, [r4, #12]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	2112      	movs	r1, #18
 8004ab4:	f7ff ff78 	bl	80049a8 <std>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	61a3      	str	r3, [r4, #24]
 8004abc:	e7d2      	b.n	8004a64 <__sinit+0xc>
 8004abe:	bf00      	nop
 8004ac0:	080056c8 	.word	0x080056c8
 8004ac4:	080049f1 	.word	0x080049f1

08004ac8 <__sfp>:
 8004ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aca:	4607      	mov	r7, r0
 8004acc:	f7ff ffac 	bl	8004a28 <__sfp_lock_acquire>
 8004ad0:	4b1e      	ldr	r3, [pc, #120]	; (8004b4c <__sfp+0x84>)
 8004ad2:	681e      	ldr	r6, [r3, #0]
 8004ad4:	69b3      	ldr	r3, [r6, #24]
 8004ad6:	b913      	cbnz	r3, 8004ade <__sfp+0x16>
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f7ff ffbd 	bl	8004a58 <__sinit>
 8004ade:	3648      	adds	r6, #72	; 0x48
 8004ae0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	d503      	bpl.n	8004af0 <__sfp+0x28>
 8004ae8:	6833      	ldr	r3, [r6, #0]
 8004aea:	b30b      	cbz	r3, 8004b30 <__sfp+0x68>
 8004aec:	6836      	ldr	r6, [r6, #0]
 8004aee:	e7f7      	b.n	8004ae0 <__sfp+0x18>
 8004af0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004af4:	b9d5      	cbnz	r5, 8004b2c <__sfp+0x64>
 8004af6:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <__sfp+0x88>)
 8004af8:	60e3      	str	r3, [r4, #12]
 8004afa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004afe:	6665      	str	r5, [r4, #100]	; 0x64
 8004b00:	f000 f847 	bl	8004b92 <__retarget_lock_init_recursive>
 8004b04:	f7ff ff96 	bl	8004a34 <__sfp_lock_release>
 8004b08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b10:	6025      	str	r5, [r4, #0]
 8004b12:	61a5      	str	r5, [r4, #24]
 8004b14:	2208      	movs	r2, #8
 8004b16:	4629      	mov	r1, r5
 8004b18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b1c:	f7ff fda2 	bl	8004664 <memset>
 8004b20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b28:	4620      	mov	r0, r4
 8004b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b2c:	3468      	adds	r4, #104	; 0x68
 8004b2e:	e7d9      	b.n	8004ae4 <__sfp+0x1c>
 8004b30:	2104      	movs	r1, #4
 8004b32:	4638      	mov	r0, r7
 8004b34:	f7ff ff62 	bl	80049fc <__sfmoreglue>
 8004b38:	4604      	mov	r4, r0
 8004b3a:	6030      	str	r0, [r6, #0]
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	d1d5      	bne.n	8004aec <__sfp+0x24>
 8004b40:	f7ff ff78 	bl	8004a34 <__sfp_lock_release>
 8004b44:	230c      	movs	r3, #12
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	e7ee      	b.n	8004b28 <__sfp+0x60>
 8004b4a:	bf00      	nop
 8004b4c:	080056c8 	.word	0x080056c8
 8004b50:	ffff0001 	.word	0xffff0001

08004b54 <_fwalk_reent>:
 8004b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b58:	4606      	mov	r6, r0
 8004b5a:	4688      	mov	r8, r1
 8004b5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b60:	2700      	movs	r7, #0
 8004b62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b66:	f1b9 0901 	subs.w	r9, r9, #1
 8004b6a:	d505      	bpl.n	8004b78 <_fwalk_reent+0x24>
 8004b6c:	6824      	ldr	r4, [r4, #0]
 8004b6e:	2c00      	cmp	r4, #0
 8004b70:	d1f7      	bne.n	8004b62 <_fwalk_reent+0xe>
 8004b72:	4638      	mov	r0, r7
 8004b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b78:	89ab      	ldrh	r3, [r5, #12]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d907      	bls.n	8004b8e <_fwalk_reent+0x3a>
 8004b7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b82:	3301      	adds	r3, #1
 8004b84:	d003      	beq.n	8004b8e <_fwalk_reent+0x3a>
 8004b86:	4629      	mov	r1, r5
 8004b88:	4630      	mov	r0, r6
 8004b8a:	47c0      	blx	r8
 8004b8c:	4307      	orrs	r7, r0
 8004b8e:	3568      	adds	r5, #104	; 0x68
 8004b90:	e7e9      	b.n	8004b66 <_fwalk_reent+0x12>

08004b92 <__retarget_lock_init_recursive>:
 8004b92:	4770      	bx	lr

08004b94 <__retarget_lock_acquire_recursive>:
 8004b94:	4770      	bx	lr

08004b96 <__retarget_lock_release_recursive>:
 8004b96:	4770      	bx	lr

08004b98 <__swhatbuf_r>:
 8004b98:	b570      	push	{r4, r5, r6, lr}
 8004b9a:	460e      	mov	r6, r1
 8004b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba0:	2900      	cmp	r1, #0
 8004ba2:	b096      	sub	sp, #88	; 0x58
 8004ba4:	4614      	mov	r4, r2
 8004ba6:	461d      	mov	r5, r3
 8004ba8:	da08      	bge.n	8004bbc <__swhatbuf_r+0x24>
 8004baa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	602a      	str	r2, [r5, #0]
 8004bb2:	061a      	lsls	r2, r3, #24
 8004bb4:	d410      	bmi.n	8004bd8 <__swhatbuf_r+0x40>
 8004bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bba:	e00e      	b.n	8004bda <__swhatbuf_r+0x42>
 8004bbc:	466a      	mov	r2, sp
 8004bbe:	f000 fc95 	bl	80054ec <_fstat_r>
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	dbf1      	blt.n	8004baa <__swhatbuf_r+0x12>
 8004bc6:	9a01      	ldr	r2, [sp, #4]
 8004bc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004bcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004bd0:	425a      	negs	r2, r3
 8004bd2:	415a      	adcs	r2, r3
 8004bd4:	602a      	str	r2, [r5, #0]
 8004bd6:	e7ee      	b.n	8004bb6 <__swhatbuf_r+0x1e>
 8004bd8:	2340      	movs	r3, #64	; 0x40
 8004bda:	2000      	movs	r0, #0
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	b016      	add	sp, #88	; 0x58
 8004be0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004be4 <__smakebuf_r>:
 8004be4:	898b      	ldrh	r3, [r1, #12]
 8004be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004be8:	079d      	lsls	r5, r3, #30
 8004bea:	4606      	mov	r6, r0
 8004bec:	460c      	mov	r4, r1
 8004bee:	d507      	bpl.n	8004c00 <__smakebuf_r+0x1c>
 8004bf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	6123      	str	r3, [r4, #16]
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	6163      	str	r3, [r4, #20]
 8004bfc:	b002      	add	sp, #8
 8004bfe:	bd70      	pop	{r4, r5, r6, pc}
 8004c00:	ab01      	add	r3, sp, #4
 8004c02:	466a      	mov	r2, sp
 8004c04:	f7ff ffc8 	bl	8004b98 <__swhatbuf_r>
 8004c08:	9900      	ldr	r1, [sp, #0]
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	f000 f895 	bl	8004d3c <_malloc_r>
 8004c12:	b948      	cbnz	r0, 8004c28 <__smakebuf_r+0x44>
 8004c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c18:	059a      	lsls	r2, r3, #22
 8004c1a:	d4ef      	bmi.n	8004bfc <__smakebuf_r+0x18>
 8004c1c:	f023 0303 	bic.w	r3, r3, #3
 8004c20:	f043 0302 	orr.w	r3, r3, #2
 8004c24:	81a3      	strh	r3, [r4, #12]
 8004c26:	e7e3      	b.n	8004bf0 <__smakebuf_r+0xc>
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <__smakebuf_r+0x7c>)
 8004c2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	6020      	str	r0, [r4, #0]
 8004c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c34:	81a3      	strh	r3, [r4, #12]
 8004c36:	9b00      	ldr	r3, [sp, #0]
 8004c38:	6163      	str	r3, [r4, #20]
 8004c3a:	9b01      	ldr	r3, [sp, #4]
 8004c3c:	6120      	str	r0, [r4, #16]
 8004c3e:	b15b      	cbz	r3, 8004c58 <__smakebuf_r+0x74>
 8004c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c44:	4630      	mov	r0, r6
 8004c46:	f000 fc63 	bl	8005510 <_isatty_r>
 8004c4a:	b128      	cbz	r0, 8004c58 <__smakebuf_r+0x74>
 8004c4c:	89a3      	ldrh	r3, [r4, #12]
 8004c4e:	f023 0303 	bic.w	r3, r3, #3
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	81a3      	strh	r3, [r4, #12]
 8004c58:	89a0      	ldrh	r0, [r4, #12]
 8004c5a:	4305      	orrs	r5, r0
 8004c5c:	81a5      	strh	r5, [r4, #12]
 8004c5e:	e7cd      	b.n	8004bfc <__smakebuf_r+0x18>
 8004c60:	080049f1 	.word	0x080049f1

08004c64 <_free_r>:
 8004c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c66:	2900      	cmp	r1, #0
 8004c68:	d044      	beq.n	8004cf4 <_free_r+0x90>
 8004c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c6e:	9001      	str	r0, [sp, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f1a1 0404 	sub.w	r4, r1, #4
 8004c76:	bfb8      	it	lt
 8004c78:	18e4      	addlt	r4, r4, r3
 8004c7a:	f000 fc6b 	bl	8005554 <__malloc_lock>
 8004c7e:	4a1e      	ldr	r2, [pc, #120]	; (8004cf8 <_free_r+0x94>)
 8004c80:	9801      	ldr	r0, [sp, #4]
 8004c82:	6813      	ldr	r3, [r2, #0]
 8004c84:	b933      	cbnz	r3, 8004c94 <_free_r+0x30>
 8004c86:	6063      	str	r3, [r4, #4]
 8004c88:	6014      	str	r4, [r2, #0]
 8004c8a:	b003      	add	sp, #12
 8004c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c90:	f000 bc66 	b.w	8005560 <__malloc_unlock>
 8004c94:	42a3      	cmp	r3, r4
 8004c96:	d908      	bls.n	8004caa <_free_r+0x46>
 8004c98:	6825      	ldr	r5, [r4, #0]
 8004c9a:	1961      	adds	r1, r4, r5
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	bf01      	itttt	eq
 8004ca0:	6819      	ldreq	r1, [r3, #0]
 8004ca2:	685b      	ldreq	r3, [r3, #4]
 8004ca4:	1949      	addeq	r1, r1, r5
 8004ca6:	6021      	streq	r1, [r4, #0]
 8004ca8:	e7ed      	b.n	8004c86 <_free_r+0x22>
 8004caa:	461a      	mov	r2, r3
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	b10b      	cbz	r3, 8004cb4 <_free_r+0x50>
 8004cb0:	42a3      	cmp	r3, r4
 8004cb2:	d9fa      	bls.n	8004caa <_free_r+0x46>
 8004cb4:	6811      	ldr	r1, [r2, #0]
 8004cb6:	1855      	adds	r5, r2, r1
 8004cb8:	42a5      	cmp	r5, r4
 8004cba:	d10b      	bne.n	8004cd4 <_free_r+0x70>
 8004cbc:	6824      	ldr	r4, [r4, #0]
 8004cbe:	4421      	add	r1, r4
 8004cc0:	1854      	adds	r4, r2, r1
 8004cc2:	42a3      	cmp	r3, r4
 8004cc4:	6011      	str	r1, [r2, #0]
 8004cc6:	d1e0      	bne.n	8004c8a <_free_r+0x26>
 8004cc8:	681c      	ldr	r4, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	6053      	str	r3, [r2, #4]
 8004cce:	4421      	add	r1, r4
 8004cd0:	6011      	str	r1, [r2, #0]
 8004cd2:	e7da      	b.n	8004c8a <_free_r+0x26>
 8004cd4:	d902      	bls.n	8004cdc <_free_r+0x78>
 8004cd6:	230c      	movs	r3, #12
 8004cd8:	6003      	str	r3, [r0, #0]
 8004cda:	e7d6      	b.n	8004c8a <_free_r+0x26>
 8004cdc:	6825      	ldr	r5, [r4, #0]
 8004cde:	1961      	adds	r1, r4, r5
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	bf04      	itt	eq
 8004ce4:	6819      	ldreq	r1, [r3, #0]
 8004ce6:	685b      	ldreq	r3, [r3, #4]
 8004ce8:	6063      	str	r3, [r4, #4]
 8004cea:	bf04      	itt	eq
 8004cec:	1949      	addeq	r1, r1, r5
 8004cee:	6021      	streq	r1, [r4, #0]
 8004cf0:	6054      	str	r4, [r2, #4]
 8004cf2:	e7ca      	b.n	8004c8a <_free_r+0x26>
 8004cf4:	b003      	add	sp, #12
 8004cf6:	bd30      	pop	{r4, r5, pc}
 8004cf8:	200001d8 	.word	0x200001d8

08004cfc <sbrk_aligned>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	4e0e      	ldr	r6, [pc, #56]	; (8004d38 <sbrk_aligned+0x3c>)
 8004d00:	460c      	mov	r4, r1
 8004d02:	6831      	ldr	r1, [r6, #0]
 8004d04:	4605      	mov	r5, r0
 8004d06:	b911      	cbnz	r1, 8004d0e <sbrk_aligned+0x12>
 8004d08:	f000 fb7a 	bl	8005400 <_sbrk_r>
 8004d0c:	6030      	str	r0, [r6, #0]
 8004d0e:	4621      	mov	r1, r4
 8004d10:	4628      	mov	r0, r5
 8004d12:	f000 fb75 	bl	8005400 <_sbrk_r>
 8004d16:	1c43      	adds	r3, r0, #1
 8004d18:	d00a      	beq.n	8004d30 <sbrk_aligned+0x34>
 8004d1a:	1cc4      	adds	r4, r0, #3
 8004d1c:	f024 0403 	bic.w	r4, r4, #3
 8004d20:	42a0      	cmp	r0, r4
 8004d22:	d007      	beq.n	8004d34 <sbrk_aligned+0x38>
 8004d24:	1a21      	subs	r1, r4, r0
 8004d26:	4628      	mov	r0, r5
 8004d28:	f000 fb6a 	bl	8005400 <_sbrk_r>
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d101      	bne.n	8004d34 <sbrk_aligned+0x38>
 8004d30:	f04f 34ff 	mov.w	r4, #4294967295
 8004d34:	4620      	mov	r0, r4
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
 8004d38:	200001dc 	.word	0x200001dc

08004d3c <_malloc_r>:
 8004d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d40:	1ccd      	adds	r5, r1, #3
 8004d42:	f025 0503 	bic.w	r5, r5, #3
 8004d46:	3508      	adds	r5, #8
 8004d48:	2d0c      	cmp	r5, #12
 8004d4a:	bf38      	it	cc
 8004d4c:	250c      	movcc	r5, #12
 8004d4e:	2d00      	cmp	r5, #0
 8004d50:	4607      	mov	r7, r0
 8004d52:	db01      	blt.n	8004d58 <_malloc_r+0x1c>
 8004d54:	42a9      	cmp	r1, r5
 8004d56:	d905      	bls.n	8004d64 <_malloc_r+0x28>
 8004d58:	230c      	movs	r3, #12
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	2600      	movs	r6, #0
 8004d5e:	4630      	mov	r0, r6
 8004d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d64:	4e2e      	ldr	r6, [pc, #184]	; (8004e20 <_malloc_r+0xe4>)
 8004d66:	f000 fbf5 	bl	8005554 <__malloc_lock>
 8004d6a:	6833      	ldr	r3, [r6, #0]
 8004d6c:	461c      	mov	r4, r3
 8004d6e:	bb34      	cbnz	r4, 8004dbe <_malloc_r+0x82>
 8004d70:	4629      	mov	r1, r5
 8004d72:	4638      	mov	r0, r7
 8004d74:	f7ff ffc2 	bl	8004cfc <sbrk_aligned>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	d14d      	bne.n	8004e1a <_malloc_r+0xde>
 8004d7e:	6834      	ldr	r4, [r6, #0]
 8004d80:	4626      	mov	r6, r4
 8004d82:	2e00      	cmp	r6, #0
 8004d84:	d140      	bne.n	8004e08 <_malloc_r+0xcc>
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	4631      	mov	r1, r6
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	eb04 0803 	add.w	r8, r4, r3
 8004d90:	f000 fb36 	bl	8005400 <_sbrk_r>
 8004d94:	4580      	cmp	r8, r0
 8004d96:	d13a      	bne.n	8004e0e <_malloc_r+0xd2>
 8004d98:	6821      	ldr	r1, [r4, #0]
 8004d9a:	3503      	adds	r5, #3
 8004d9c:	1a6d      	subs	r5, r5, r1
 8004d9e:	f025 0503 	bic.w	r5, r5, #3
 8004da2:	3508      	adds	r5, #8
 8004da4:	2d0c      	cmp	r5, #12
 8004da6:	bf38      	it	cc
 8004da8:	250c      	movcc	r5, #12
 8004daa:	4629      	mov	r1, r5
 8004dac:	4638      	mov	r0, r7
 8004dae:	f7ff ffa5 	bl	8004cfc <sbrk_aligned>
 8004db2:	3001      	adds	r0, #1
 8004db4:	d02b      	beq.n	8004e0e <_malloc_r+0xd2>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	442b      	add	r3, r5
 8004dba:	6023      	str	r3, [r4, #0]
 8004dbc:	e00e      	b.n	8004ddc <_malloc_r+0xa0>
 8004dbe:	6822      	ldr	r2, [r4, #0]
 8004dc0:	1b52      	subs	r2, r2, r5
 8004dc2:	d41e      	bmi.n	8004e02 <_malloc_r+0xc6>
 8004dc4:	2a0b      	cmp	r2, #11
 8004dc6:	d916      	bls.n	8004df6 <_malloc_r+0xba>
 8004dc8:	1961      	adds	r1, r4, r5
 8004dca:	42a3      	cmp	r3, r4
 8004dcc:	6025      	str	r5, [r4, #0]
 8004dce:	bf18      	it	ne
 8004dd0:	6059      	strne	r1, [r3, #4]
 8004dd2:	6863      	ldr	r3, [r4, #4]
 8004dd4:	bf08      	it	eq
 8004dd6:	6031      	streq	r1, [r6, #0]
 8004dd8:	5162      	str	r2, [r4, r5]
 8004dda:	604b      	str	r3, [r1, #4]
 8004ddc:	4638      	mov	r0, r7
 8004dde:	f104 060b 	add.w	r6, r4, #11
 8004de2:	f000 fbbd 	bl	8005560 <__malloc_unlock>
 8004de6:	f026 0607 	bic.w	r6, r6, #7
 8004dea:	1d23      	adds	r3, r4, #4
 8004dec:	1af2      	subs	r2, r6, r3
 8004dee:	d0b6      	beq.n	8004d5e <_malloc_r+0x22>
 8004df0:	1b9b      	subs	r3, r3, r6
 8004df2:	50a3      	str	r3, [r4, r2]
 8004df4:	e7b3      	b.n	8004d5e <_malloc_r+0x22>
 8004df6:	6862      	ldr	r2, [r4, #4]
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	bf0c      	ite	eq
 8004dfc:	6032      	streq	r2, [r6, #0]
 8004dfe:	605a      	strne	r2, [r3, #4]
 8004e00:	e7ec      	b.n	8004ddc <_malloc_r+0xa0>
 8004e02:	4623      	mov	r3, r4
 8004e04:	6864      	ldr	r4, [r4, #4]
 8004e06:	e7b2      	b.n	8004d6e <_malloc_r+0x32>
 8004e08:	4634      	mov	r4, r6
 8004e0a:	6876      	ldr	r6, [r6, #4]
 8004e0c:	e7b9      	b.n	8004d82 <_malloc_r+0x46>
 8004e0e:	230c      	movs	r3, #12
 8004e10:	603b      	str	r3, [r7, #0]
 8004e12:	4638      	mov	r0, r7
 8004e14:	f000 fba4 	bl	8005560 <__malloc_unlock>
 8004e18:	e7a1      	b.n	8004d5e <_malloc_r+0x22>
 8004e1a:	6025      	str	r5, [r4, #0]
 8004e1c:	e7de      	b.n	8004ddc <_malloc_r+0xa0>
 8004e1e:	bf00      	nop
 8004e20:	200001d8 	.word	0x200001d8

08004e24 <__sfputc_r>:
 8004e24:	6893      	ldr	r3, [r2, #8]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	b410      	push	{r4}
 8004e2c:	6093      	str	r3, [r2, #8]
 8004e2e:	da08      	bge.n	8004e42 <__sfputc_r+0x1e>
 8004e30:	6994      	ldr	r4, [r2, #24]
 8004e32:	42a3      	cmp	r3, r4
 8004e34:	db01      	blt.n	8004e3a <__sfputc_r+0x16>
 8004e36:	290a      	cmp	r1, #10
 8004e38:	d103      	bne.n	8004e42 <__sfputc_r+0x1e>
 8004e3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e3e:	f7ff bc31 	b.w	80046a4 <__swbuf_r>
 8004e42:	6813      	ldr	r3, [r2, #0]
 8004e44:	1c58      	adds	r0, r3, #1
 8004e46:	6010      	str	r0, [r2, #0]
 8004e48:	7019      	strb	r1, [r3, #0]
 8004e4a:	4608      	mov	r0, r1
 8004e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <__sfputs_r>:
 8004e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e54:	4606      	mov	r6, r0
 8004e56:	460f      	mov	r7, r1
 8004e58:	4614      	mov	r4, r2
 8004e5a:	18d5      	adds	r5, r2, r3
 8004e5c:	42ac      	cmp	r4, r5
 8004e5e:	d101      	bne.n	8004e64 <__sfputs_r+0x12>
 8004e60:	2000      	movs	r0, #0
 8004e62:	e007      	b.n	8004e74 <__sfputs_r+0x22>
 8004e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e68:	463a      	mov	r2, r7
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	f7ff ffda 	bl	8004e24 <__sfputc_r>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d1f3      	bne.n	8004e5c <__sfputs_r+0xa>
 8004e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e78 <_vfiprintf_r>:
 8004e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e7c:	460d      	mov	r5, r1
 8004e7e:	b09d      	sub	sp, #116	; 0x74
 8004e80:	4614      	mov	r4, r2
 8004e82:	4698      	mov	r8, r3
 8004e84:	4606      	mov	r6, r0
 8004e86:	b118      	cbz	r0, 8004e90 <_vfiprintf_r+0x18>
 8004e88:	6983      	ldr	r3, [r0, #24]
 8004e8a:	b90b      	cbnz	r3, 8004e90 <_vfiprintf_r+0x18>
 8004e8c:	f7ff fde4 	bl	8004a58 <__sinit>
 8004e90:	4b89      	ldr	r3, [pc, #548]	; (80050b8 <_vfiprintf_r+0x240>)
 8004e92:	429d      	cmp	r5, r3
 8004e94:	d11b      	bne.n	8004ece <_vfiprintf_r+0x56>
 8004e96:	6875      	ldr	r5, [r6, #4]
 8004e98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e9a:	07d9      	lsls	r1, r3, #31
 8004e9c:	d405      	bmi.n	8004eaa <_vfiprintf_r+0x32>
 8004e9e:	89ab      	ldrh	r3, [r5, #12]
 8004ea0:	059a      	lsls	r2, r3, #22
 8004ea2:	d402      	bmi.n	8004eaa <_vfiprintf_r+0x32>
 8004ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ea6:	f7ff fe75 	bl	8004b94 <__retarget_lock_acquire_recursive>
 8004eaa:	89ab      	ldrh	r3, [r5, #12]
 8004eac:	071b      	lsls	r3, r3, #28
 8004eae:	d501      	bpl.n	8004eb4 <_vfiprintf_r+0x3c>
 8004eb0:	692b      	ldr	r3, [r5, #16]
 8004eb2:	b9eb      	cbnz	r3, 8004ef0 <_vfiprintf_r+0x78>
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	f7ff fc46 	bl	8004748 <__swsetup_r>
 8004ebc:	b1c0      	cbz	r0, 8004ef0 <_vfiprintf_r+0x78>
 8004ebe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ec0:	07dc      	lsls	r4, r3, #31
 8004ec2:	d50e      	bpl.n	8004ee2 <_vfiprintf_r+0x6a>
 8004ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec8:	b01d      	add	sp, #116	; 0x74
 8004eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ece:	4b7b      	ldr	r3, [pc, #492]	; (80050bc <_vfiprintf_r+0x244>)
 8004ed0:	429d      	cmp	r5, r3
 8004ed2:	d101      	bne.n	8004ed8 <_vfiprintf_r+0x60>
 8004ed4:	68b5      	ldr	r5, [r6, #8]
 8004ed6:	e7df      	b.n	8004e98 <_vfiprintf_r+0x20>
 8004ed8:	4b79      	ldr	r3, [pc, #484]	; (80050c0 <_vfiprintf_r+0x248>)
 8004eda:	429d      	cmp	r5, r3
 8004edc:	bf08      	it	eq
 8004ede:	68f5      	ldreq	r5, [r6, #12]
 8004ee0:	e7da      	b.n	8004e98 <_vfiprintf_r+0x20>
 8004ee2:	89ab      	ldrh	r3, [r5, #12]
 8004ee4:	0598      	lsls	r0, r3, #22
 8004ee6:	d4ed      	bmi.n	8004ec4 <_vfiprintf_r+0x4c>
 8004ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eea:	f7ff fe54 	bl	8004b96 <__retarget_lock_release_recursive>
 8004eee:	e7e9      	b.n	8004ec4 <_vfiprintf_r+0x4c>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef4:	2320      	movs	r3, #32
 8004ef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004efa:	f8cd 800c 	str.w	r8, [sp, #12]
 8004efe:	2330      	movs	r3, #48	; 0x30
 8004f00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80050c4 <_vfiprintf_r+0x24c>
 8004f04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f08:	f04f 0901 	mov.w	r9, #1
 8004f0c:	4623      	mov	r3, r4
 8004f0e:	469a      	mov	sl, r3
 8004f10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f14:	b10a      	cbz	r2, 8004f1a <_vfiprintf_r+0xa2>
 8004f16:	2a25      	cmp	r2, #37	; 0x25
 8004f18:	d1f9      	bne.n	8004f0e <_vfiprintf_r+0x96>
 8004f1a:	ebba 0b04 	subs.w	fp, sl, r4
 8004f1e:	d00b      	beq.n	8004f38 <_vfiprintf_r+0xc0>
 8004f20:	465b      	mov	r3, fp
 8004f22:	4622      	mov	r2, r4
 8004f24:	4629      	mov	r1, r5
 8004f26:	4630      	mov	r0, r6
 8004f28:	f7ff ff93 	bl	8004e52 <__sfputs_r>
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	f000 80aa 	beq.w	8005086 <_vfiprintf_r+0x20e>
 8004f32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f34:	445a      	add	r2, fp
 8004f36:	9209      	str	r2, [sp, #36]	; 0x24
 8004f38:	f89a 3000 	ldrb.w	r3, [sl]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 80a2 	beq.w	8005086 <_vfiprintf_r+0x20e>
 8004f42:	2300      	movs	r3, #0
 8004f44:	f04f 32ff 	mov.w	r2, #4294967295
 8004f48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f4c:	f10a 0a01 	add.w	sl, sl, #1
 8004f50:	9304      	str	r3, [sp, #16]
 8004f52:	9307      	str	r3, [sp, #28]
 8004f54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f58:	931a      	str	r3, [sp, #104]	; 0x68
 8004f5a:	4654      	mov	r4, sl
 8004f5c:	2205      	movs	r2, #5
 8004f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f62:	4858      	ldr	r0, [pc, #352]	; (80050c4 <_vfiprintf_r+0x24c>)
 8004f64:	f7fb f954 	bl	8000210 <memchr>
 8004f68:	9a04      	ldr	r2, [sp, #16]
 8004f6a:	b9d8      	cbnz	r0, 8004fa4 <_vfiprintf_r+0x12c>
 8004f6c:	06d1      	lsls	r1, r2, #27
 8004f6e:	bf44      	itt	mi
 8004f70:	2320      	movmi	r3, #32
 8004f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f76:	0713      	lsls	r3, r2, #28
 8004f78:	bf44      	itt	mi
 8004f7a:	232b      	movmi	r3, #43	; 0x2b
 8004f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f80:	f89a 3000 	ldrb.w	r3, [sl]
 8004f84:	2b2a      	cmp	r3, #42	; 0x2a
 8004f86:	d015      	beq.n	8004fb4 <_vfiprintf_r+0x13c>
 8004f88:	9a07      	ldr	r2, [sp, #28]
 8004f8a:	4654      	mov	r4, sl
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	f04f 0c0a 	mov.w	ip, #10
 8004f92:	4621      	mov	r1, r4
 8004f94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f98:	3b30      	subs	r3, #48	; 0x30
 8004f9a:	2b09      	cmp	r3, #9
 8004f9c:	d94e      	bls.n	800503c <_vfiprintf_r+0x1c4>
 8004f9e:	b1b0      	cbz	r0, 8004fce <_vfiprintf_r+0x156>
 8004fa0:	9207      	str	r2, [sp, #28]
 8004fa2:	e014      	b.n	8004fce <_vfiprintf_r+0x156>
 8004fa4:	eba0 0308 	sub.w	r3, r0, r8
 8004fa8:	fa09 f303 	lsl.w	r3, r9, r3
 8004fac:	4313      	orrs	r3, r2
 8004fae:	9304      	str	r3, [sp, #16]
 8004fb0:	46a2      	mov	sl, r4
 8004fb2:	e7d2      	b.n	8004f5a <_vfiprintf_r+0xe2>
 8004fb4:	9b03      	ldr	r3, [sp, #12]
 8004fb6:	1d19      	adds	r1, r3, #4
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	9103      	str	r1, [sp, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bfbb      	ittet	lt
 8004fc0:	425b      	neglt	r3, r3
 8004fc2:	f042 0202 	orrlt.w	r2, r2, #2
 8004fc6:	9307      	strge	r3, [sp, #28]
 8004fc8:	9307      	strlt	r3, [sp, #28]
 8004fca:	bfb8      	it	lt
 8004fcc:	9204      	strlt	r2, [sp, #16]
 8004fce:	7823      	ldrb	r3, [r4, #0]
 8004fd0:	2b2e      	cmp	r3, #46	; 0x2e
 8004fd2:	d10c      	bne.n	8004fee <_vfiprintf_r+0x176>
 8004fd4:	7863      	ldrb	r3, [r4, #1]
 8004fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fd8:	d135      	bne.n	8005046 <_vfiprintf_r+0x1ce>
 8004fda:	9b03      	ldr	r3, [sp, #12]
 8004fdc:	1d1a      	adds	r2, r3, #4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	9203      	str	r2, [sp, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	bfb8      	it	lt
 8004fe6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fea:	3402      	adds	r4, #2
 8004fec:	9305      	str	r3, [sp, #20]
 8004fee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80050d4 <_vfiprintf_r+0x25c>
 8004ff2:	7821      	ldrb	r1, [r4, #0]
 8004ff4:	2203      	movs	r2, #3
 8004ff6:	4650      	mov	r0, sl
 8004ff8:	f7fb f90a 	bl	8000210 <memchr>
 8004ffc:	b140      	cbz	r0, 8005010 <_vfiprintf_r+0x198>
 8004ffe:	2340      	movs	r3, #64	; 0x40
 8005000:	eba0 000a 	sub.w	r0, r0, sl
 8005004:	fa03 f000 	lsl.w	r0, r3, r0
 8005008:	9b04      	ldr	r3, [sp, #16]
 800500a:	4303      	orrs	r3, r0
 800500c:	3401      	adds	r4, #1
 800500e:	9304      	str	r3, [sp, #16]
 8005010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005014:	482c      	ldr	r0, [pc, #176]	; (80050c8 <_vfiprintf_r+0x250>)
 8005016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800501a:	2206      	movs	r2, #6
 800501c:	f7fb f8f8 	bl	8000210 <memchr>
 8005020:	2800      	cmp	r0, #0
 8005022:	d03f      	beq.n	80050a4 <_vfiprintf_r+0x22c>
 8005024:	4b29      	ldr	r3, [pc, #164]	; (80050cc <_vfiprintf_r+0x254>)
 8005026:	bb1b      	cbnz	r3, 8005070 <_vfiprintf_r+0x1f8>
 8005028:	9b03      	ldr	r3, [sp, #12]
 800502a:	3307      	adds	r3, #7
 800502c:	f023 0307 	bic.w	r3, r3, #7
 8005030:	3308      	adds	r3, #8
 8005032:	9303      	str	r3, [sp, #12]
 8005034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005036:	443b      	add	r3, r7
 8005038:	9309      	str	r3, [sp, #36]	; 0x24
 800503a:	e767      	b.n	8004f0c <_vfiprintf_r+0x94>
 800503c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005040:	460c      	mov	r4, r1
 8005042:	2001      	movs	r0, #1
 8005044:	e7a5      	b.n	8004f92 <_vfiprintf_r+0x11a>
 8005046:	2300      	movs	r3, #0
 8005048:	3401      	adds	r4, #1
 800504a:	9305      	str	r3, [sp, #20]
 800504c:	4619      	mov	r1, r3
 800504e:	f04f 0c0a 	mov.w	ip, #10
 8005052:	4620      	mov	r0, r4
 8005054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005058:	3a30      	subs	r2, #48	; 0x30
 800505a:	2a09      	cmp	r2, #9
 800505c:	d903      	bls.n	8005066 <_vfiprintf_r+0x1ee>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0c5      	beq.n	8004fee <_vfiprintf_r+0x176>
 8005062:	9105      	str	r1, [sp, #20]
 8005064:	e7c3      	b.n	8004fee <_vfiprintf_r+0x176>
 8005066:	fb0c 2101 	mla	r1, ip, r1, r2
 800506a:	4604      	mov	r4, r0
 800506c:	2301      	movs	r3, #1
 800506e:	e7f0      	b.n	8005052 <_vfiprintf_r+0x1da>
 8005070:	ab03      	add	r3, sp, #12
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	462a      	mov	r2, r5
 8005076:	4b16      	ldr	r3, [pc, #88]	; (80050d0 <_vfiprintf_r+0x258>)
 8005078:	a904      	add	r1, sp, #16
 800507a:	4630      	mov	r0, r6
 800507c:	f3af 8000 	nop.w
 8005080:	4607      	mov	r7, r0
 8005082:	1c78      	adds	r0, r7, #1
 8005084:	d1d6      	bne.n	8005034 <_vfiprintf_r+0x1bc>
 8005086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005088:	07d9      	lsls	r1, r3, #31
 800508a:	d405      	bmi.n	8005098 <_vfiprintf_r+0x220>
 800508c:	89ab      	ldrh	r3, [r5, #12]
 800508e:	059a      	lsls	r2, r3, #22
 8005090:	d402      	bmi.n	8005098 <_vfiprintf_r+0x220>
 8005092:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005094:	f7ff fd7f 	bl	8004b96 <__retarget_lock_release_recursive>
 8005098:	89ab      	ldrh	r3, [r5, #12]
 800509a:	065b      	lsls	r3, r3, #25
 800509c:	f53f af12 	bmi.w	8004ec4 <_vfiprintf_r+0x4c>
 80050a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050a2:	e711      	b.n	8004ec8 <_vfiprintf_r+0x50>
 80050a4:	ab03      	add	r3, sp, #12
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	462a      	mov	r2, r5
 80050aa:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <_vfiprintf_r+0x258>)
 80050ac:	a904      	add	r1, sp, #16
 80050ae:	4630      	mov	r0, r6
 80050b0:	f000 f880 	bl	80051b4 <_printf_i>
 80050b4:	e7e4      	b.n	8005080 <_vfiprintf_r+0x208>
 80050b6:	bf00      	nop
 80050b8:	080056ec 	.word	0x080056ec
 80050bc:	0800570c 	.word	0x0800570c
 80050c0:	080056cc 	.word	0x080056cc
 80050c4:	0800572c 	.word	0x0800572c
 80050c8:	08005736 	.word	0x08005736
 80050cc:	00000000 	.word	0x00000000
 80050d0:	08004e53 	.word	0x08004e53
 80050d4:	08005732 	.word	0x08005732

080050d8 <_printf_common>:
 80050d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050dc:	4616      	mov	r6, r2
 80050de:	4699      	mov	r9, r3
 80050e0:	688a      	ldr	r2, [r1, #8]
 80050e2:	690b      	ldr	r3, [r1, #16]
 80050e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050e8:	4293      	cmp	r3, r2
 80050ea:	bfb8      	it	lt
 80050ec:	4613      	movlt	r3, r2
 80050ee:	6033      	str	r3, [r6, #0]
 80050f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050f4:	4607      	mov	r7, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	b10a      	cbz	r2, 80050fe <_printf_common+0x26>
 80050fa:	3301      	adds	r3, #1
 80050fc:	6033      	str	r3, [r6, #0]
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	0699      	lsls	r1, r3, #26
 8005102:	bf42      	ittt	mi
 8005104:	6833      	ldrmi	r3, [r6, #0]
 8005106:	3302      	addmi	r3, #2
 8005108:	6033      	strmi	r3, [r6, #0]
 800510a:	6825      	ldr	r5, [r4, #0]
 800510c:	f015 0506 	ands.w	r5, r5, #6
 8005110:	d106      	bne.n	8005120 <_printf_common+0x48>
 8005112:	f104 0a19 	add.w	sl, r4, #25
 8005116:	68e3      	ldr	r3, [r4, #12]
 8005118:	6832      	ldr	r2, [r6, #0]
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	42ab      	cmp	r3, r5
 800511e:	dc26      	bgt.n	800516e <_printf_common+0x96>
 8005120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005124:	1e13      	subs	r3, r2, #0
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	bf18      	it	ne
 800512a:	2301      	movne	r3, #1
 800512c:	0692      	lsls	r2, r2, #26
 800512e:	d42b      	bmi.n	8005188 <_printf_common+0xb0>
 8005130:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005134:	4649      	mov	r1, r9
 8005136:	4638      	mov	r0, r7
 8005138:	47c0      	blx	r8
 800513a:	3001      	adds	r0, #1
 800513c:	d01e      	beq.n	800517c <_printf_common+0xa4>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	68e5      	ldr	r5, [r4, #12]
 8005142:	6832      	ldr	r2, [r6, #0]
 8005144:	f003 0306 	and.w	r3, r3, #6
 8005148:	2b04      	cmp	r3, #4
 800514a:	bf08      	it	eq
 800514c:	1aad      	subeq	r5, r5, r2
 800514e:	68a3      	ldr	r3, [r4, #8]
 8005150:	6922      	ldr	r2, [r4, #16]
 8005152:	bf0c      	ite	eq
 8005154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005158:	2500      	movne	r5, #0
 800515a:	4293      	cmp	r3, r2
 800515c:	bfc4      	itt	gt
 800515e:	1a9b      	subgt	r3, r3, r2
 8005160:	18ed      	addgt	r5, r5, r3
 8005162:	2600      	movs	r6, #0
 8005164:	341a      	adds	r4, #26
 8005166:	42b5      	cmp	r5, r6
 8005168:	d11a      	bne.n	80051a0 <_printf_common+0xc8>
 800516a:	2000      	movs	r0, #0
 800516c:	e008      	b.n	8005180 <_printf_common+0xa8>
 800516e:	2301      	movs	r3, #1
 8005170:	4652      	mov	r2, sl
 8005172:	4649      	mov	r1, r9
 8005174:	4638      	mov	r0, r7
 8005176:	47c0      	blx	r8
 8005178:	3001      	adds	r0, #1
 800517a:	d103      	bne.n	8005184 <_printf_common+0xac>
 800517c:	f04f 30ff 	mov.w	r0, #4294967295
 8005180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005184:	3501      	adds	r5, #1
 8005186:	e7c6      	b.n	8005116 <_printf_common+0x3e>
 8005188:	18e1      	adds	r1, r4, r3
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	2030      	movs	r0, #48	; 0x30
 800518e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005192:	4422      	add	r2, r4
 8005194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800519c:	3302      	adds	r3, #2
 800519e:	e7c7      	b.n	8005130 <_printf_common+0x58>
 80051a0:	2301      	movs	r3, #1
 80051a2:	4622      	mov	r2, r4
 80051a4:	4649      	mov	r1, r9
 80051a6:	4638      	mov	r0, r7
 80051a8:	47c0      	blx	r8
 80051aa:	3001      	adds	r0, #1
 80051ac:	d0e6      	beq.n	800517c <_printf_common+0xa4>
 80051ae:	3601      	adds	r6, #1
 80051b0:	e7d9      	b.n	8005166 <_printf_common+0x8e>
	...

080051b4 <_printf_i>:
 80051b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051b8:	7e0f      	ldrb	r7, [r1, #24]
 80051ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051bc:	2f78      	cmp	r7, #120	; 0x78
 80051be:	4691      	mov	r9, r2
 80051c0:	4680      	mov	r8, r0
 80051c2:	460c      	mov	r4, r1
 80051c4:	469a      	mov	sl, r3
 80051c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051ca:	d807      	bhi.n	80051dc <_printf_i+0x28>
 80051cc:	2f62      	cmp	r7, #98	; 0x62
 80051ce:	d80a      	bhi.n	80051e6 <_printf_i+0x32>
 80051d0:	2f00      	cmp	r7, #0
 80051d2:	f000 80d8 	beq.w	8005386 <_printf_i+0x1d2>
 80051d6:	2f58      	cmp	r7, #88	; 0x58
 80051d8:	f000 80a3 	beq.w	8005322 <_printf_i+0x16e>
 80051dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051e4:	e03a      	b.n	800525c <_printf_i+0xa8>
 80051e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051ea:	2b15      	cmp	r3, #21
 80051ec:	d8f6      	bhi.n	80051dc <_printf_i+0x28>
 80051ee:	a101      	add	r1, pc, #4	; (adr r1, 80051f4 <_printf_i+0x40>)
 80051f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051f4:	0800524d 	.word	0x0800524d
 80051f8:	08005261 	.word	0x08005261
 80051fc:	080051dd 	.word	0x080051dd
 8005200:	080051dd 	.word	0x080051dd
 8005204:	080051dd 	.word	0x080051dd
 8005208:	080051dd 	.word	0x080051dd
 800520c:	08005261 	.word	0x08005261
 8005210:	080051dd 	.word	0x080051dd
 8005214:	080051dd 	.word	0x080051dd
 8005218:	080051dd 	.word	0x080051dd
 800521c:	080051dd 	.word	0x080051dd
 8005220:	0800536d 	.word	0x0800536d
 8005224:	08005291 	.word	0x08005291
 8005228:	0800534f 	.word	0x0800534f
 800522c:	080051dd 	.word	0x080051dd
 8005230:	080051dd 	.word	0x080051dd
 8005234:	0800538f 	.word	0x0800538f
 8005238:	080051dd 	.word	0x080051dd
 800523c:	08005291 	.word	0x08005291
 8005240:	080051dd 	.word	0x080051dd
 8005244:	080051dd 	.word	0x080051dd
 8005248:	08005357 	.word	0x08005357
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	1d1a      	adds	r2, r3, #4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	602a      	str	r2, [r5, #0]
 8005254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800525c:	2301      	movs	r3, #1
 800525e:	e0a3      	b.n	80053a8 <_printf_i+0x1f4>
 8005260:	6820      	ldr	r0, [r4, #0]
 8005262:	6829      	ldr	r1, [r5, #0]
 8005264:	0606      	lsls	r6, r0, #24
 8005266:	f101 0304 	add.w	r3, r1, #4
 800526a:	d50a      	bpl.n	8005282 <_printf_i+0xce>
 800526c:	680e      	ldr	r6, [r1, #0]
 800526e:	602b      	str	r3, [r5, #0]
 8005270:	2e00      	cmp	r6, #0
 8005272:	da03      	bge.n	800527c <_printf_i+0xc8>
 8005274:	232d      	movs	r3, #45	; 0x2d
 8005276:	4276      	negs	r6, r6
 8005278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800527c:	485e      	ldr	r0, [pc, #376]	; (80053f8 <_printf_i+0x244>)
 800527e:	230a      	movs	r3, #10
 8005280:	e019      	b.n	80052b6 <_printf_i+0x102>
 8005282:	680e      	ldr	r6, [r1, #0]
 8005284:	602b      	str	r3, [r5, #0]
 8005286:	f010 0f40 	tst.w	r0, #64	; 0x40
 800528a:	bf18      	it	ne
 800528c:	b236      	sxthne	r6, r6
 800528e:	e7ef      	b.n	8005270 <_printf_i+0xbc>
 8005290:	682b      	ldr	r3, [r5, #0]
 8005292:	6820      	ldr	r0, [r4, #0]
 8005294:	1d19      	adds	r1, r3, #4
 8005296:	6029      	str	r1, [r5, #0]
 8005298:	0601      	lsls	r1, r0, #24
 800529a:	d501      	bpl.n	80052a0 <_printf_i+0xec>
 800529c:	681e      	ldr	r6, [r3, #0]
 800529e:	e002      	b.n	80052a6 <_printf_i+0xf2>
 80052a0:	0646      	lsls	r6, r0, #25
 80052a2:	d5fb      	bpl.n	800529c <_printf_i+0xe8>
 80052a4:	881e      	ldrh	r6, [r3, #0]
 80052a6:	4854      	ldr	r0, [pc, #336]	; (80053f8 <_printf_i+0x244>)
 80052a8:	2f6f      	cmp	r7, #111	; 0x6f
 80052aa:	bf0c      	ite	eq
 80052ac:	2308      	moveq	r3, #8
 80052ae:	230a      	movne	r3, #10
 80052b0:	2100      	movs	r1, #0
 80052b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052b6:	6865      	ldr	r5, [r4, #4]
 80052b8:	60a5      	str	r5, [r4, #8]
 80052ba:	2d00      	cmp	r5, #0
 80052bc:	bfa2      	ittt	ge
 80052be:	6821      	ldrge	r1, [r4, #0]
 80052c0:	f021 0104 	bicge.w	r1, r1, #4
 80052c4:	6021      	strge	r1, [r4, #0]
 80052c6:	b90e      	cbnz	r6, 80052cc <_printf_i+0x118>
 80052c8:	2d00      	cmp	r5, #0
 80052ca:	d04d      	beq.n	8005368 <_printf_i+0x1b4>
 80052cc:	4615      	mov	r5, r2
 80052ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80052d2:	fb03 6711 	mls	r7, r3, r1, r6
 80052d6:	5dc7      	ldrb	r7, [r0, r7]
 80052d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052dc:	4637      	mov	r7, r6
 80052de:	42bb      	cmp	r3, r7
 80052e0:	460e      	mov	r6, r1
 80052e2:	d9f4      	bls.n	80052ce <_printf_i+0x11a>
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d10b      	bne.n	8005300 <_printf_i+0x14c>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	07de      	lsls	r6, r3, #31
 80052ec:	d508      	bpl.n	8005300 <_printf_i+0x14c>
 80052ee:	6923      	ldr	r3, [r4, #16]
 80052f0:	6861      	ldr	r1, [r4, #4]
 80052f2:	4299      	cmp	r1, r3
 80052f4:	bfde      	ittt	le
 80052f6:	2330      	movle	r3, #48	; 0x30
 80052f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005300:	1b52      	subs	r2, r2, r5
 8005302:	6122      	str	r2, [r4, #16]
 8005304:	f8cd a000 	str.w	sl, [sp]
 8005308:	464b      	mov	r3, r9
 800530a:	aa03      	add	r2, sp, #12
 800530c:	4621      	mov	r1, r4
 800530e:	4640      	mov	r0, r8
 8005310:	f7ff fee2 	bl	80050d8 <_printf_common>
 8005314:	3001      	adds	r0, #1
 8005316:	d14c      	bne.n	80053b2 <_printf_i+0x1fe>
 8005318:	f04f 30ff 	mov.w	r0, #4294967295
 800531c:	b004      	add	sp, #16
 800531e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005322:	4835      	ldr	r0, [pc, #212]	; (80053f8 <_printf_i+0x244>)
 8005324:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005328:	6829      	ldr	r1, [r5, #0]
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005330:	6029      	str	r1, [r5, #0]
 8005332:	061d      	lsls	r5, r3, #24
 8005334:	d514      	bpl.n	8005360 <_printf_i+0x1ac>
 8005336:	07df      	lsls	r7, r3, #31
 8005338:	bf44      	itt	mi
 800533a:	f043 0320 	orrmi.w	r3, r3, #32
 800533e:	6023      	strmi	r3, [r4, #0]
 8005340:	b91e      	cbnz	r6, 800534a <_printf_i+0x196>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	f023 0320 	bic.w	r3, r3, #32
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	2310      	movs	r3, #16
 800534c:	e7b0      	b.n	80052b0 <_printf_i+0xfc>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	f043 0320 	orr.w	r3, r3, #32
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	2378      	movs	r3, #120	; 0x78
 8005358:	4828      	ldr	r0, [pc, #160]	; (80053fc <_printf_i+0x248>)
 800535a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800535e:	e7e3      	b.n	8005328 <_printf_i+0x174>
 8005360:	0659      	lsls	r1, r3, #25
 8005362:	bf48      	it	mi
 8005364:	b2b6      	uxthmi	r6, r6
 8005366:	e7e6      	b.n	8005336 <_printf_i+0x182>
 8005368:	4615      	mov	r5, r2
 800536a:	e7bb      	b.n	80052e4 <_printf_i+0x130>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	6826      	ldr	r6, [r4, #0]
 8005370:	6961      	ldr	r1, [r4, #20]
 8005372:	1d18      	adds	r0, r3, #4
 8005374:	6028      	str	r0, [r5, #0]
 8005376:	0635      	lsls	r5, r6, #24
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	d501      	bpl.n	8005380 <_printf_i+0x1cc>
 800537c:	6019      	str	r1, [r3, #0]
 800537e:	e002      	b.n	8005386 <_printf_i+0x1d2>
 8005380:	0670      	lsls	r0, r6, #25
 8005382:	d5fb      	bpl.n	800537c <_printf_i+0x1c8>
 8005384:	8019      	strh	r1, [r3, #0]
 8005386:	2300      	movs	r3, #0
 8005388:	6123      	str	r3, [r4, #16]
 800538a:	4615      	mov	r5, r2
 800538c:	e7ba      	b.n	8005304 <_printf_i+0x150>
 800538e:	682b      	ldr	r3, [r5, #0]
 8005390:	1d1a      	adds	r2, r3, #4
 8005392:	602a      	str	r2, [r5, #0]
 8005394:	681d      	ldr	r5, [r3, #0]
 8005396:	6862      	ldr	r2, [r4, #4]
 8005398:	2100      	movs	r1, #0
 800539a:	4628      	mov	r0, r5
 800539c:	f7fa ff38 	bl	8000210 <memchr>
 80053a0:	b108      	cbz	r0, 80053a6 <_printf_i+0x1f2>
 80053a2:	1b40      	subs	r0, r0, r5
 80053a4:	6060      	str	r0, [r4, #4]
 80053a6:	6863      	ldr	r3, [r4, #4]
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	2300      	movs	r3, #0
 80053ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053b0:	e7a8      	b.n	8005304 <_printf_i+0x150>
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	462a      	mov	r2, r5
 80053b6:	4649      	mov	r1, r9
 80053b8:	4640      	mov	r0, r8
 80053ba:	47d0      	blx	sl
 80053bc:	3001      	adds	r0, #1
 80053be:	d0ab      	beq.n	8005318 <_printf_i+0x164>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	079b      	lsls	r3, r3, #30
 80053c4:	d413      	bmi.n	80053ee <_printf_i+0x23a>
 80053c6:	68e0      	ldr	r0, [r4, #12]
 80053c8:	9b03      	ldr	r3, [sp, #12]
 80053ca:	4298      	cmp	r0, r3
 80053cc:	bfb8      	it	lt
 80053ce:	4618      	movlt	r0, r3
 80053d0:	e7a4      	b.n	800531c <_printf_i+0x168>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4632      	mov	r2, r6
 80053d6:	4649      	mov	r1, r9
 80053d8:	4640      	mov	r0, r8
 80053da:	47d0      	blx	sl
 80053dc:	3001      	adds	r0, #1
 80053de:	d09b      	beq.n	8005318 <_printf_i+0x164>
 80053e0:	3501      	adds	r5, #1
 80053e2:	68e3      	ldr	r3, [r4, #12]
 80053e4:	9903      	ldr	r1, [sp, #12]
 80053e6:	1a5b      	subs	r3, r3, r1
 80053e8:	42ab      	cmp	r3, r5
 80053ea:	dcf2      	bgt.n	80053d2 <_printf_i+0x21e>
 80053ec:	e7eb      	b.n	80053c6 <_printf_i+0x212>
 80053ee:	2500      	movs	r5, #0
 80053f0:	f104 0619 	add.w	r6, r4, #25
 80053f4:	e7f5      	b.n	80053e2 <_printf_i+0x22e>
 80053f6:	bf00      	nop
 80053f8:	0800573d 	.word	0x0800573d
 80053fc:	0800574e 	.word	0x0800574e

08005400 <_sbrk_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4d06      	ldr	r5, [pc, #24]	; (800541c <_sbrk_r+0x1c>)
 8005404:	2300      	movs	r3, #0
 8005406:	4604      	mov	r4, r0
 8005408:	4608      	mov	r0, r1
 800540a:	602b      	str	r3, [r5, #0]
 800540c:	f7fb fd00 	bl	8000e10 <_sbrk>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d102      	bne.n	800541a <_sbrk_r+0x1a>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	b103      	cbz	r3, 800541a <_sbrk_r+0x1a>
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	200001e0 	.word	0x200001e0

08005420 <__sread>:
 8005420:	b510      	push	{r4, lr}
 8005422:	460c      	mov	r4, r1
 8005424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005428:	f000 f8a0 	bl	800556c <_read_r>
 800542c:	2800      	cmp	r0, #0
 800542e:	bfab      	itete	ge
 8005430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005432:	89a3      	ldrhlt	r3, [r4, #12]
 8005434:	181b      	addge	r3, r3, r0
 8005436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800543a:	bfac      	ite	ge
 800543c:	6563      	strge	r3, [r4, #84]	; 0x54
 800543e:	81a3      	strhlt	r3, [r4, #12]
 8005440:	bd10      	pop	{r4, pc}

08005442 <__swrite>:
 8005442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005446:	461f      	mov	r7, r3
 8005448:	898b      	ldrh	r3, [r1, #12]
 800544a:	05db      	lsls	r3, r3, #23
 800544c:	4605      	mov	r5, r0
 800544e:	460c      	mov	r4, r1
 8005450:	4616      	mov	r6, r2
 8005452:	d505      	bpl.n	8005460 <__swrite+0x1e>
 8005454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005458:	2302      	movs	r3, #2
 800545a:	2200      	movs	r2, #0
 800545c:	f000 f868 	bl	8005530 <_lseek_r>
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800546a:	81a3      	strh	r3, [r4, #12]
 800546c:	4632      	mov	r2, r6
 800546e:	463b      	mov	r3, r7
 8005470:	4628      	mov	r0, r5
 8005472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005476:	f000 b817 	b.w	80054a8 <_write_r>

0800547a <__sseek>:
 800547a:	b510      	push	{r4, lr}
 800547c:	460c      	mov	r4, r1
 800547e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005482:	f000 f855 	bl	8005530 <_lseek_r>
 8005486:	1c43      	adds	r3, r0, #1
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	bf15      	itete	ne
 800548c:	6560      	strne	r0, [r4, #84]	; 0x54
 800548e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005496:	81a3      	strheq	r3, [r4, #12]
 8005498:	bf18      	it	ne
 800549a:	81a3      	strhne	r3, [r4, #12]
 800549c:	bd10      	pop	{r4, pc}

0800549e <__sclose>:
 800549e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a2:	f000 b813 	b.w	80054cc <_close_r>
	...

080054a8 <_write_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	4d07      	ldr	r5, [pc, #28]	; (80054c8 <_write_r+0x20>)
 80054ac:	4604      	mov	r4, r0
 80054ae:	4608      	mov	r0, r1
 80054b0:	4611      	mov	r1, r2
 80054b2:	2200      	movs	r2, #0
 80054b4:	602a      	str	r2, [r5, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	f7fb fc59 	bl	8000d6e <_write>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d102      	bne.n	80054c6 <_write_r+0x1e>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	b103      	cbz	r3, 80054c6 <_write_r+0x1e>
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	200001e0 	.word	0x200001e0

080054cc <_close_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4d06      	ldr	r5, [pc, #24]	; (80054e8 <_close_r+0x1c>)
 80054d0:	2300      	movs	r3, #0
 80054d2:	4604      	mov	r4, r0
 80054d4:	4608      	mov	r0, r1
 80054d6:	602b      	str	r3, [r5, #0]
 80054d8:	f7fb fc65 	bl	8000da6 <_close>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_close_r+0x1a>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_close_r+0x1a>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	200001e0 	.word	0x200001e0

080054ec <_fstat_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4d07      	ldr	r5, [pc, #28]	; (800550c <_fstat_r+0x20>)
 80054f0:	2300      	movs	r3, #0
 80054f2:	4604      	mov	r4, r0
 80054f4:	4608      	mov	r0, r1
 80054f6:	4611      	mov	r1, r2
 80054f8:	602b      	str	r3, [r5, #0]
 80054fa:	f7fb fc60 	bl	8000dbe <_fstat>
 80054fe:	1c43      	adds	r3, r0, #1
 8005500:	d102      	bne.n	8005508 <_fstat_r+0x1c>
 8005502:	682b      	ldr	r3, [r5, #0]
 8005504:	b103      	cbz	r3, 8005508 <_fstat_r+0x1c>
 8005506:	6023      	str	r3, [r4, #0]
 8005508:	bd38      	pop	{r3, r4, r5, pc}
 800550a:	bf00      	nop
 800550c:	200001e0 	.word	0x200001e0

08005510 <_isatty_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	4d06      	ldr	r5, [pc, #24]	; (800552c <_isatty_r+0x1c>)
 8005514:	2300      	movs	r3, #0
 8005516:	4604      	mov	r4, r0
 8005518:	4608      	mov	r0, r1
 800551a:	602b      	str	r3, [r5, #0]
 800551c:	f7fb fc5f 	bl	8000dde <_isatty>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_isatty_r+0x1a>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_isatty_r+0x1a>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	200001e0 	.word	0x200001e0

08005530 <_lseek_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4d07      	ldr	r5, [pc, #28]	; (8005550 <_lseek_r+0x20>)
 8005534:	4604      	mov	r4, r0
 8005536:	4608      	mov	r0, r1
 8005538:	4611      	mov	r1, r2
 800553a:	2200      	movs	r2, #0
 800553c:	602a      	str	r2, [r5, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	f7fb fc58 	bl	8000df4 <_lseek>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d102      	bne.n	800554e <_lseek_r+0x1e>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	b103      	cbz	r3, 800554e <_lseek_r+0x1e>
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	200001e0 	.word	0x200001e0

08005554 <__malloc_lock>:
 8005554:	4801      	ldr	r0, [pc, #4]	; (800555c <__malloc_lock+0x8>)
 8005556:	f7ff bb1d 	b.w	8004b94 <__retarget_lock_acquire_recursive>
 800555a:	bf00      	nop
 800555c:	200001d4 	.word	0x200001d4

08005560 <__malloc_unlock>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__malloc_unlock+0x8>)
 8005562:	f7ff bb18 	b.w	8004b96 <__retarget_lock_release_recursive>
 8005566:	bf00      	nop
 8005568:	200001d4 	.word	0x200001d4

0800556c <_read_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4d07      	ldr	r5, [pc, #28]	; (800558c <_read_r+0x20>)
 8005570:	4604      	mov	r4, r0
 8005572:	4608      	mov	r0, r1
 8005574:	4611      	mov	r1, r2
 8005576:	2200      	movs	r2, #0
 8005578:	602a      	str	r2, [r5, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	f7fb fbda 	bl	8000d34 <_read>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d102      	bne.n	800558a <_read_r+0x1e>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	b103      	cbz	r3, 800558a <_read_r+0x1e>
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	bd38      	pop	{r3, r4, r5, pc}
 800558c:	200001e0 	.word	0x200001e0

08005590 <_init>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	bf00      	nop
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr

0800559c <_fini>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr
